Method;TargetClass;ATFD;ATSD;FDP;DIST_EC;DIST_TC;LOC_M;LOC_EC;LOC_TC
org.apache.derby.jdbc.EmbeddedSimpleDataSource.findDriver();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BetweenOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.run();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.ServiceBootContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextService.getCurrentContextManager();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.modifyAccessPaths();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getNullNode(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.printSubNodes(int);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.columnOnOneSide(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnFromName(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.setParameterAsObject(int, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.countReferencedColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logAction(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privRemoveFile(org.apache.derby.io.StorageFile);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.open();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pop();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.findParentResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.iapi.types.J2SEDataValueFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.types.SQLDecimal;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTime(java.lang.String, java.sql.Time, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameTableBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getSemiRowCount(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.getAsFile(java.lang.String, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.newTime(java.util.Calendar);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferScan.next();org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScan(boolean, boolean, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getDouble();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.multiStageMerge(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.ExternalSortFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.switchLogBuffer();org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getUpdateBaseTableName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextImpl.pushMe();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.validateReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setResultSetNumber(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.insertCodeSpace(int, int);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getTablesReferenced(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getNextAllocPageOffset();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.resolveLogicalBinaryOperator(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnConstraint(boolean, java.lang.String, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.getInt(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.D_LockControl.diag();org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.deleteAtSlot(boolean, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getLong();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.setQueryTimeout(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getFirstRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(boolean);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.checkReliability();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getJDBCTypeId();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.ValueRow.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.addResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(int, java.lang.Object[], java.lang.String, java.lang.String, java.lang.Throwable, java.sql.SQLException);org.apache.derby.impl.jdbc.SQLExceptionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantTriggers(int, int[], org.apache.derby.iapi.sql.dictionary.GenericDescriptorList);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(boolean, boolean, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setup(org.apache.derby.iapi.services.property.PersistentSet);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.setArrayElement(int);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(int, int, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.purgeCommittedDeletes(org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties, org.apache.derby.io.StorageFactory);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getSQLXML(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.isMaterializable();org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.AggregateNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextPermutation();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.setTypeMap(java.util.Map);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushTriggerExecutionContext(org.apache.derby.iapi.db.TriggerExecutionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSchemaAuth(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(int, int, int, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement.createDuplicateStatement(java.sql.CallableStatement, java.sql.Connection);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getDeferralControl();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.optimize();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.openCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.numberComparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getLogicalLeftResultSet();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.equalTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.reparseTriggerText();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeLong(long);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.findUserTransaction(java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.discard(org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_makeOneIndex(int, long, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.isPrepared();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.jdbc.Driver20.getPropertyInfo(java.lang.String, java.util.Properties);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(java.io.PrintStream, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ReclaimSpace;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setMaxRows(int);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AllResultColumn.cloneMe();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.addOuterJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.capacity();org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyTypesAndLengthsToSource(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.selectivityForConglomerate(int, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.remove(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.returnConnectionToResource(org.apache.derby.iapi.store.access.xa.XAXactId, org.apache.derby.jdbc.XATransactionState);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getMember(java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allExpressionsAreColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeColumn(java.lang.Object);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.searchLeftAndLockPreviousKey(int, int, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableArrayHolder.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(boolean, boolean, java.lang.Object, java.lang.String, java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.parseTimestamp(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getSysIBMSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.reprepare(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getForeignKeys(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getServiceType(java.lang.Object);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.dumpTempWriter(boolean);org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.addNewNodes();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.diag.SpaceTable.getString(int);org.apache.derby.diag.ConglomInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(int, long);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.replace(boolean, java.io.InputStream);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyCreateConstraintColumnList(org.apache.derby.impl.sql.compile.TableElementList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getResultSet();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getStartOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.spaceForInsert(int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyInto(int, int, int, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.isClosed();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bindPrivilegesForView(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getLockFactory();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConglomerateDescriptor(long, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.openContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.diag.SpaceTable.getShort(int);org.apache.derby.diag.ConglomInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setShort(int, short);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.splitMethod();org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.toString();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.updateAllocPageHeader();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOverflowAtSlot(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTime(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.newRowLocationTemplate();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraints(int, int, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.throwIfMissingParms();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnType(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesReleaseSavepointLevels();org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.toString();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.findAndAssumeTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.reserveSpaceForChecksum(int, long, long);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getUserPageWait(long);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewExpressionResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTime(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.fixChildrensParents(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropViewDescriptor(org.apache.derby.iapi.sql.dictionary.ViewDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.decryptPage(byte[], int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.doDelete();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.printPosition(int, org.apache.derby.iapi.services.loader.GeneratedMethod, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultSet(int[]);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEqualityPredicate(boolean, int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromLog(org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrementUnion(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getNumColumnsReturned();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getURL();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.lang.String, long);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootClassFactory(boolean, java.util.Properties);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getLatchedPage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.markOrderingDependent();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getSchemaId(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.toString();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.run();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.catalog.types.BaseTypeIdImpl.setTypeIdSpecificInstanceVariables();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCJava.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getSubString(int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.positionToNextRecord();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.setTopModule(java.lang.Object);org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pullExpressions(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setRef(int, java.sql.Ref);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOverflowAtSlot(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(java.io.File, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.setNodeType(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.writeExternal_v36(java.io.ObjectOutput);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.buildRCL();org.apache.derby.impl.sql.compile.HalfOuterJoinNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.canSupport(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.CreateTableNode;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.toHexString();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IMaxScan.init(boolean, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.locateBind();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.AllResultColumn.getFullTableName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMajorVersion();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(java.util.Properties);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markAllPredicatesQualifiers();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBlob(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(java.lang.Object, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getRightChild(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.InternalXact.setIdleState();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.FromBaseTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.D_BTreeController.diag();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int, java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.plus(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lastAutoincrementValue(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.hasConsistentTypeInfo();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.complete(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.iapi.services.classfile.ClassMember, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAliasDescriptor(org.apache.derby.iapi.sql.dictionary.AliasDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getArray(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.rowDeleted();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDate(java.lang.String, java.sql.Date, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getType();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.populate(int[], org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResults(int, java.sql.ResultSet[][]);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.isNullable();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.updateUnfilledPageInfo(org.apache.derby.impl.store.raw.data.AllocExtent);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrict();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getGlobalTransactionIdString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.makeFromList(org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.FromSubquery;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(int[], java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU4(int, short);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2ICostController.init(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I);org.apache.derby.impl.store.access.btree.BTreeCostController;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findService(java.lang.String, java.lang.String);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.close();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.handleException(java.lang.Throwable);org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.dropConglomerate(long);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.diag.ErrorLogReader.getString(int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.iapi.services.classfile.MemberTable.classFileSize();org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.generateParameterValueSet(org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.inAbort();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.stopOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaIndex(boolean, int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SyncOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.impl.store.raw.data.ContainerActionOnCommit;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getParentPageNumber();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.markUnused();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getBinaryStream(int);org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeConstraintDependenciesOnPrivileges(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.minus(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.SetOpResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.updateTargetLockMode();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setPrepareState();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.getRecordHandleAtSlot(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCMethodDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConglomerateDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.like(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.Like;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(int, java.lang.Object[], java.lang.String, java.lang.String, java.lang.Throwable, java.sql.SQLException);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdateField(int, int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.substitutePassword(boolean, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.getStoredFormatIdFromTypeId();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.uniqueJoinWithOuterTable(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.setFullTypeInfo();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.removeOptPredicate(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsIndexes(int[]);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(java.sql.Blob, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.SystemColumnImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DecryptInputStream.fillByteHolder();org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setObject(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.pushableToSubqueries();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSchemaDescriptor(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.throwBadType(java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.open(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.MergeInserter;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.init(boolean, boolean, java.util.Properties);org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubKeyConstraint(int, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesAndRollback();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.execute(boolean, long, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.shutdown();org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnNames();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkForInvalidDefaults();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getReusableRecordIdSequenceNumber();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerInfo.hasTrigger(java.lang.Boolean, java.lang.Boolean);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.addSubqueryNode(org.apache.derby.impl.sql.compile.SubqueryNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.getConnection();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.removePage(org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.setAsciiStream(long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.load.ExportAbstract.doAllTheWork();org.apache.derby.impl.load.ExportWriteDataAbstract;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.diag();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getFetchDirection();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.changeToCorrespondingExpressionType();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.zeroDurationlockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.services.locks.TableNameInfo.getTableType(java.lang.Long);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.authenticateUser(java.lang.String, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.castArgToNationalString(org.apache.derby.iapi.sql.compile.TypeCompiler, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.FetchDescriptor.setValidColumns(org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAnyPage(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptorArray(boolean, int, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.DTSClassInfo.getNewInstance();org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(int, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.J2SEDataValueFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.types.DataValueFactoryImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.releaseResource(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.getDNFromUID(java.lang.String);org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableActions.actionInsert(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.InsertOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.setValueCols(boolean[], int, int, org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.checkRowOrder(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.preAllocate(int, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.areColumnsComparable(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.resultSetClosing(org.apache.derby.impl.jdbc.EmbedResultSet);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtDoneScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getNewSubMethod(boolean, java.lang.String);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.getFileFormat();org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDataDictionary();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.catalog.types.TypeDescriptorImpl.getJDBCTypeId();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.close();org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.containsParameterNode();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.impl.sql.compile.CharConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getCursorName();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.setValue(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addNameAndType(java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openStoreCost(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.addEntry(boolean, java.lang.Object, java.lang.Object, org.apache.derby.impl.services.cache.CachedItem);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.getContainerId();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindDateTimeArg(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllTableDescriptorsByTableId(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.createTemplate();org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScanInfo.getAllScanInfo(java.util.Properties);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicProviderInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getByte(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.SystemColumnImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.getString(int);org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(java.lang.String);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.getAggregateVector(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getShort();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics.setNames();org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.setResultSetType(int);org.apache.derby.impl.jdbc.EmbedSQLWarning;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writeExtent(int);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.setObject(java.lang.Object);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getURL(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.readExternal_v36(java.io.ObjectInput);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowCore();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.initialize();org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkAutoCommit(boolean);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.flattenFromTables(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(boolean, boolean, org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getColumnDescriptors();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntryBackward(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.getGroupByColumn(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.setParameters(org.apache.derby.iapi.sql.ParameterValueSet, org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getStatementContext();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBlob(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getlcc();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameString(java.util.Hashtable, org.apache.derby.iapi.services.classfile.CONSTANT_Index_info);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.generateParameterValueSet(org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.next();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DropIndexConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllConglomerateDescriptorsByNumber(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int, int[], org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.AllResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setLevel(int);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.DateTimeParser.checkEnd();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.GlobalXactId.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logLongColumn(int, int, java.lang.Object, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addString(java.lang.String);org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.isSessionSchema(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.closeCurrentConnectionHandle();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getProperties();org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.postBindFixup();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.eliminateBooleanTrueAndBooleanTrue();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UntypedNullConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getMethodParameterClasses();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int, int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getIndexedCols();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getTableName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.createConglomerate(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.formatJDBCTime(java.lang.StringBuffer, java.util.Calendar);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.estimateCost(double, org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.DateTimeParser.parseInt(boolean, boolean, char[], int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.loadClass(boolean, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.clearLimit(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.clearColumnInfoInProviders(org.apache.derby.iapi.sql.depend.ProviderList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getStoreCostController(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(int, long, long, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.isLast();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isOrderedResult(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassEnumeration.findClassReferences(java.util.HashSet);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllTableDescriptorsByTableId(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.getReferencedConstraintInfo();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkCommit();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(boolean, boolean, int, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.truncate();org.apache.derby.iapi.services.io.LimitReader;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.printPosition(int, org.apache.derby.iapi.services.loader.GeneratedMethod, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.close();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getNextAllocPageNumber();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.clearIdentity();org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlock(java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getLastRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.HasNodeVisitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericStatementContext.setInUse(boolean, boolean, boolean, java.lang.String, long, org.apache.derby.iapi.sql.ParameterValueSet);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDataDictionary();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropJDBCMetadataSPSes(boolean, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getRowPositionFromRowLocation(org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewNullResultExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getObject(java.lang.String, java.util.Map);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.load.ControlInfo.validateDelimiters();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkStatus();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getResourceAsStream(java.lang.String);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraints(int, int, org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDate(java.lang.String, java.sql.Date, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.newEmbedResultSetMetaData(org.apache.derby.iapi.sql.ResultDescription);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllRoutinePermDescriptors(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.minus(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMajorVersion();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLConstantNode.getString();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.addPropertySetNotification(org.apache.derby.iapi.services.property.PropertySetCallback, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.setLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getInt();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getFinalCostEstimate();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getClone();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.addAttribute(java.lang.String, org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.addOuterJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.openStoreCost(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.index.B2ICostController;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyReferencedColumnsToNewList(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.init(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.updateRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ProjectRestrictResultSet;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.tableHasAutoincrement();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.verifyNoOpenResultSets(int, org.apache.derby.iapi.sql.depend.Provider, org.apache.derby.iapi.sql.PreparedStatement);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getColumnPosition();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.orderedOnColumn(int, int, int);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.newLockingPolicy(boolean, int, int);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClass(boolean, java.lang.String);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedColPermsDescriptor(org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor);org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.findLogicalPage(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnDisplaySize(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.types.XML.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTypeName();org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restorePredicates();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.findContainer(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.defragmentConglomerate(boolean, int, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getLogInstant();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNull(java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCMethodDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getlcc();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.io.CPFile.getParentDir(int);org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.feasible(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadGeneratedClassFromData(java.lang.String, org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasNonSelfReferencingFK(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(byte[], long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.InsertConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.buildTableNumList(boolean, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getNewJoinCondition(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.Scan;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.startReading(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.createDependency(org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRow.cloneMe();org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genIsNullTree();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.update(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.encryptContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.isClosed();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.rewindJoinOrder();org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.getMD5Checksum(byte[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.stop();org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.cast(java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.dataTypeConversion(int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.adjustNumberOfRowsReturned(org.apache.derby.iapi.sql.compile.CostEstimate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.renameGeneratedResultNames();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongVarbit.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.setWidth(boolean, int, int);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DropOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.pushPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AccessPathImpl.initializeAccessPathName(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setNull(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.NormalizeResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.decrementLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.complete();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.diag.StatementCache.getBoolean(int);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSPSSet(boolean, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.isIndexUnique(int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.checkValidity();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.OpenHeap.newRowLocationTemplate();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.getJavaTypeName();org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(org.apache.derby.iapi.services.context.Context);org.apache.derby.impl.services.reflect.GCInstanceFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.markForDistinctScan();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBytes(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.updateObject(int, int, java.lang.Object);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.markTempTableAsModifiedInUnitOfWork(java.lang.String);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getResultSetHoldability();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.preComplete(java.lang.Integer);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropStatisticsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStoredDependency(org.apache.derby.iapi.sql.dictionary.DependencyDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.store.raw.PageKey.toString();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement30.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(byte);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateLockGranularity(char, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getClasspath();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.insertRow();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.dropContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.uniqueJoin(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.XML.getLength();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertLongColumn(byte, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.LongColumnException);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.rollback(javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.OnceResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.execute(boolean, boolean, int, int[], java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.getReadMap(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getTableNumbers();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdInputStream.readObject();org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(int, int, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.checkReliability(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setURL(int, java.net.URL);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(boolean, int, java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createNClob();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement40.isPoolable();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToExistsJoin(boolean, int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.toString();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.setIdentity(java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortScan.fetch(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStopKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.addPage(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getDominantTypeServices();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createSQLXML();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.preAllocatePage(int, int, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.checkSufficientData();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.resetVirtualColumnIds();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.doProjection();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.isForeignKeyConstraint();org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRecordHandle(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.openRealConnection();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTimestamp(int, java.sql.Timestamp, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.types.DataType.setValue(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.setJNDIProviderProperties();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.AggregatorInfoList.hasDistinct();org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getUserPageWait(long);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getDatabase();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selfComparison(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getCharacterStream(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.removeJoinColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.run();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLRef.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(java.lang.String, org.apache.derby.iapi.jdbc.BrokeredStatementControl);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptorScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.rollback(java.sql.Savepoint);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.clearColumnReferences();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getURL(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.getTablesReferenced();org.apache.derby.impl.sql.compile.ReferencedTablesVisitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.OpenHeap.getFormatIds();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addAndLoadStreamContainer(java.util.Properties, long, org.apache.derby.iapi.store.access.RowSource, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(boolean, org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.DirectCall.invoke(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.canAddFreePage(long);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCodeForTemporaryTable(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.cloneRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getAuthenticationService();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.recreateUUID(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getNegation(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkCharacterStreamConditions(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLQuery(org.apache.derby.iapi.types.SqlXmlUtil, org.apache.derby.iapi.types.XMLDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameTable(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDouble(double, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.commit();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdOutputStream.writeObject(java.lang.Object);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.addPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(int, long, long, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getSchemaDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.CountAggregator.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerKey.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getOldRowSet();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.loadClass(boolean, java.lang.String);org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.next();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.checkReliability();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.dropAllJDBCMetaDataSPSes();org.apache.derby.iapi.sql.conn.ConnectionUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredRecordHeader.write(java.io.OutputStream);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getFloat();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductName();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.create(java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.setOurUpdatedIndexRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getHours(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.HashScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexLister.getAllIndexes();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setParent(long);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderedColumn.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getRef(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.createServiceRoot(boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(int, int, int, java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.removePage(org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.qualifyRecordFromRow(java.lang.Object[], org.apache.derby.iapi.store.access.Qualifier[][]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean, boolean, int, java.lang.String, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeader(java.io.DataInput);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.accumulateScalarAggregation(boolean, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChild(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyRow();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.startModule(boolean, java.lang.Object, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.finishKey(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController;0;0;0;0;0
org.apache.derby.catalog.types.TypeDescriptorImpl.getMaximumWidthInBytes();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getDatabaseProperty(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.isNullable();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.returnConnectionToResource(org.apache.derby.iapi.store.access.xa.XAXactId, org.apache.derby.jdbc.XATransactionState);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getReturnRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.addDeclaredGlobalTempTable(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.mapAbsoluteToRelativeColumnPosition(int);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorByDefaultId(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.isValid(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getSchemaUUID(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getUUIDFactory();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.open(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.diag.LockTable.dumpLock(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.locks.TableNameInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.OrderableAggregator.merge(org.apache.derby.iapi.sql.execute.ExecAggregator);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.tellRowOrderingAboutConstantColumns(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getInsertablePage(boolean, boolean, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateNewAutoincrementColumn(java.lang.String, long, long, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getParentResultSets();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.postTermination();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.complete(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.iapi.services.classfile.ClassMember, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.collectAffectedRows(boolean);org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(boolean, int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getConnection();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.initializeResultField(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.search(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.reset();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setFloat(float, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.setPageStatus(int, long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.decrementLevel(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnPermDescriptor(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.runChecker(boolean);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.makeDatabaseID(boolean, java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.preprocess(int, org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.spaceForInsert(int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdInputStream.getClassFactory();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllConglomerateDescriptorsByNumber(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.setBinaryStream(long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.run();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.getBasePredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.services.locks.Timeout.buildLockTableString();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.updatableByCursor();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.generateKey(byte[]);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerProperties(java.util.Properties);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(float);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getTransitiveSearchClause(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getIsRoot();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.verifyPutAndsOnTop();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.orPermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.DefaultDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.printSubNodes(int);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.AccessPathImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.popSavePoints(boolean, int);org.apache.derby.impl.store.raw.xact.SavePoint;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBinaryStream(int, java.io.InputStream, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getTrueNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int, int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int, int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.openFile();org.apache.derby.impl.load.ExportWriteDataAbstract;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.XML.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.makeCatalog(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties, org.apache.derby.io.StorageFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allExpressionsAreColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.isSameNodeType(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.stringCompare(org.apache.derby.iapi.types.SQLChar, org.apache.derby.iapi.types.SQLChar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setReservedSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.assumeIdentity(org.apache.derby.impl.store.raw.xact.TransactionTableEntry);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexColumnCount(int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(int, int, java.lang.String);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(boolean);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markAllUnreferenced();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeOptionalDataToBuffer(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.xa_commit(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_initSystemTableCols(boolean, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.setNullability(boolean);org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateArray(java.lang.String, java.sql.Array);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.delete();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampDiffBind();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanCommittedDeletedRow(int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.like(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.log.CheckpointOperation.needsRedo(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkCommit();org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.ChecksumOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getReadMap(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.normExpressions();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.flattenFromTables(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setNullability(boolean);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.doIt(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.resolveLogicalBinaryOperator(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getUserPageNoWait(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLParse(boolean, java.lang.String, org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getNewNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics.setNames();org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForSet(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(int, int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductName();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logOverflowRecord(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.close();org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindParameter();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.prepareSPS(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.start_xact_and_dosplit(boolean, int, long, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForDuplicateColumns(java.lang.String, java.util.Hashtable, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getIndexConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.overflowMethodCheck();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.checkTableDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getDouble();org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowFromSource();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.addWaiters(java.util.Dictionary);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.clean(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateTriggerDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.orPermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted();org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setString(java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.checkNoDeclaredOutputParameters();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getPropertyDefault(java.lang.String);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsToExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassData(boolean, java.io.InputStream, java.lang.String, java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getDate(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.updateTargetLockMode();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.addUpdateTransaction(int);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(boolean, boolean, java.lang.Object, java.lang.String, java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.impl.services.monitor.UpdateServiceProperties;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.getSchemaName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.setSharedState(java.io.Serializable, java.lang.String);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getPrecision(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampDiffBind();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnClassName(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getGenericConstantActionFactory();org.apache.derby.impl.sql.execute.GenericExecutionFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getURL(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getFloat(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.isUserTransaction();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getContextId();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.toString();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.addBatch(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.writePage(boolean, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(java.io.InputStream, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.bind();org.apache.derby.impl.sql.compile.PrivilegeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRelativeRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerStatus();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrictForReordering();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.DataType.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.toString();org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyAllOrderable();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.postBindFixup();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptors(long);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.parseDate(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactId.getMaxStoredSize();org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(boolean, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DD_Version;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.usePageBuffer(byte[]);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.initAccessPaths(org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.setColumnListToNotNull(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.removeUpdateTransaction();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.setDataTypeServices(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.trimToSize();org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.toString();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.rejectParameters();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.nextAutoincrementValue(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getRelativeRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindToBuiltIn();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.compile.IntersectOrExceptNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.removeFirst();org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addInvisibleColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(boolean, boolean, boolean, boolean, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeRowPosition, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLVarchar;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.deleteLogFileAfterCheckpointLogFile();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(boolean, int, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.addColumn(int, org.apache.derby.iapi.services.io.Storable, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getFields();org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.addXmlOpMethodParams(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.delete(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.releaseSavepoint(java.sql.Savepoint);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.canSupport(java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getParameterMetaData();org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setOutputStream(java.io.OutputStream);org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBoolean(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.getPageNumber();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setCharacterStream(int, java.io.Reader, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.verifyTargetProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.validateReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nopProjectRestrict();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(int, java.lang.String, java.util.Properties, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_1_system_procedures(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.setColumnListToNotNull(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.preDirty(boolean);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.containsColumnName(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement40.isClosed();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.load.ImportReadData.readNextFixedRow(java.lang.String[]);org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getRowLocation();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(int, long, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(java.sql.Date, java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.addScopedPredicatesToList(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.clean(boolean);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.areColumnsComparable(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropViewDescriptor(org.apache.derby.iapi.sql.dictionary.ViewDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.cleanUp();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.initLoaders();org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.removeConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewAggregatorResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.GenericClassInfo.getNewInstance();org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.newEmbedResultSetMetaData(org.apache.derby.iapi.sql.ResultDescription);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.JoinResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.addDeclaredGlobalTempTable(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNString(java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openScanController(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.setCalendar(java.util.Calendar);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.swap();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.removeOrphanedColumnChain(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.impl.store.raw.data.ReclaimSpace);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.CreateViewNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement40.setPoolable(boolean);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(org.apache.derby.iapi.services.context.Context);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.transferParameters(org.apache.derby.impl.jdbc.EmbedPreparedStatement);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(java.sql.Blob, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setUpdateState();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.deallocatePage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewStart(java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.encryptPage(boolean, byte[], byte[], int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.init(boolean, boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(boolean, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(boolean, byte[], byte[], long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.bindOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getNextRowFromRowSource();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setSQLXML(int, java.sql.SQLXML);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.setOutParameter(int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.bestCost();org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createSQLXML();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBlobConditions(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParameterJDBCType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.sortRequired(org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.locks.D_LockControl.diag();org.apache.derby.impl.services.locks.LockControl;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.getAuthorizationID(java.lang.String);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.close();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.setParameterMode(int, int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTime(java.lang.String, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.logCreateContainerInfo();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.toString();org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getIsParam();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericStatementContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify();org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.executeSchemaName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.toDebugString();org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.completeCommit(int);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.rejectParameters();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.load();org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortRowSource(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.ExternalSortFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.CountAggregator.accumulate(java.lang.Object, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition();org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.findParentResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.XML.isNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSIBM_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getTotalNumberOfIndexes();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setString(int, java.lang.String);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.changeToCNF(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.makeTableName(java.lang.String, java.lang.String);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.CreateConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.index.B2IRowLocking3;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewStart(java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogStorageFactory();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.notInSoftUpgradeMode();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.sort.NodeAllocator.newNode();org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.access.PC_XenaVersion.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.store.access.PropertyConglomerate);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.DRDAServerStarter.stop();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AccessPathImpl.initializeAccessPathName(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.HashTableResultSet;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.removePushedCode(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getHeapConglomerateController();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.compress(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.AllocPage, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromLog(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewExpressionResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.addNewNodes();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.getScanArgs(boolean, int, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.io.FormatableIntHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.cleanAll();org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberAsBest(int, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getU4(int);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.execute.JoinResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getIndexConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.setJNDIProviderProperties();org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.invalidOperandType();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.truncate();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.prepForNextRound();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMinorVersion();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.FailedProperties40;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getScale();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.write(byte[], int, int);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.parseTimestamp(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexConglomerate(int, long);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnDescriptorCore(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.checkConsistency();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.load();org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.fillIn(int, int, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(java.io.InputStream, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChildPageno();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.fillInReferencedTableMap(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getRowLocation();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.deallocatePage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.DefaultNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.addRCForRID();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.open(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.pageHeaderToString();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.defragmentConglomerate(boolean, int, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.io.FormatableIntHolder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTableDescriptor(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.jdbc.XATransactionState.cleanupOnError(java.lang.Throwable);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int, java.lang.Object);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRow.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getrightSiblingPageNumber();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.checkStatementValidity();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(double);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(java.lang.String, java.sql.CallableStatement);org.apache.derby.jdbc.XAStatementControl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.isMaterializable();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactContext.substituteTransaction(org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.expandPage(int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createNClob();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createBlob();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nopProjectRestrict();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(java.io.InputStream, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.findContainerForRedoRecovery(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionDelete(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.makeAllocPage(int, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.ExternalSortFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeResultSets();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.LOJgetReferencedTables(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(java.io.Reader, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setName(java.lang.String);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(java.lang.String);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.shiftRemainingData(int, int, int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.lockRow(boolean, int, int, int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getUnicodeStream(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.rollbackToSavePoint(java.lang.Object, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.toString();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.openSortRowSource(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.postBindFixup();org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.store.access.DiskHashtable.getRemove(boolean, boolean, java.lang.Object);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockPreviousToFirstKey(int, int, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.growCache();org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.store.access.sort.ExternalSortFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.projectResultColumns();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPUBLIClevelColPermsDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.finish();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getDependable(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getReferencedFormatableBitSet(boolean, boolean, boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SavepointNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.printSubNodes(int);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.getSegmentId();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.toString();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCostController.init(org.apache.derby.impl.store.access.conglomerate.OpenConglomerate);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setNull(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.CurrentOfNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.removePage(org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getExposedName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.getTableName();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.eliminateBooleanTrueAndBooleanTrue();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.formatJDBCDate(java.lang.StringBuffer, java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord();org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.getShort(int);org.apache.derby.vti.VTITemplate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.fetch(boolean, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeRowPieces(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getRowFromResultSet(boolean);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.fillBuffer(int);org.apache.derby.iapi.services.io.LimitReader;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.timestampDiff(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.getParameterMetaData();org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.grantPublicAccessToSystemRoutines(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRowAtSlotNoWaitExclusive(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.load.Export.getExportWriteData();org.apache.derby.impl.load.ExportAbstract;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.load(org.apache.derby.iapi.store.access.RowSource);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.writePage(boolean, byte[], long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getDependable(org.apache.derby.catalog.UUID);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.requireAuthentication(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.services.locks.ActiveLock.wakeUp(byte);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(org.apache.derby.impl.services.daemon.ServiceRecord);org.apache.derby.impl.services.daemon.ServiceRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pullExpressions(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOrderableVariantType(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.disableLogArchiveMode();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNormalizeResultSetNode(boolean, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.generateParameters(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(int, int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getShort();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.readPage(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.unlock(int, org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.locks.ActiveLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.locateBind();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.zeroDurationlockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.dumpTimeStats(java.lang.String, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeRowPieces(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(java.lang.Object);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.verifyUniqueColumnList(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.VTIResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.catalog.types.RoutineAliasInfo.toString();org.apache.derby.catalog.types.MethodAliasInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerOperation.undoMe(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.getStorableValue();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.io.JarStorageFactory.getJarFile(java.lang.String);org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerSortAvoidancePath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getlcc();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(boolean, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.CurrentOfNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.isWrapperFor(java.lang.Class<?>);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.close();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.addLock(java.lang.Object, org.apache.derby.impl.services.locks.Lock);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.iapi.jdbc.DRDAServerStarter.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.MiscellaneousStatementNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllRoutinePermDescriptors(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.removePersistentService(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(boolean, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregator.getAggregatorInstance();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNClob(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.setInvalid(boolean);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLExists(org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.getMoreResults(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.rowChangerFinish();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genProjectRestrict(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition(org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.catalog.types.BaseTypeIdImpl.setTypeIdSpecificInstanceVariables();org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.setCursorInfo(org.apache.derby.impl.sql.CursorInfo);org.apache.derby.impl.sql.CursorInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.load.ExportAbstract.doAllTheWork();org.apache.derby.impl.load.ExportResultSetForObject;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getStatementExecutionPlanText();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.zeroDurationlockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericExecutionFactory.canSupport(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.allPushable();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(int, int[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraintId();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.fkSetupArrays(boolean[], int, int[], java.lang.String[], long[], org.apache.derby.catalog.UUID[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.open(boolean);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.requiresRelocking();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getRecordPortionLength(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTimestamp(java.lang.String, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.postComplete(int, java.lang.Integer);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.InListOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectAllocActions.actionAllocatePage(int, int, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.reusableResult();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.sql.execute.AggregateSortObserver.insertNonDuplicateKey(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.setType(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.open(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addReference(int, org.apache.derby.iapi.services.classfile.ClassMember);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.bind();org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.toString();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUDTs(int[], java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.newRowLocationTemplate();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getIndexColMapping();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.cloneMe();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.lockClassLoader(org.apache.derby.iapi.services.locks.ShExQual);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.log.CheckpointOperation.toString();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.iapi.types.DataType.getStream();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.checkNode(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getHeapConglomerateId();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferScan.next();org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.iapi.store.raw.PageKey.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPUBLIClevelColPermsDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isStoreQualifier();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.buildRCL();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.backupAndEnableLogArchiveMode(boolean, boolean, java.lang.String);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.dropAllJDBCMetaDataSPSes();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQuery(boolean, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushCompilerContext(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getAllRelevantConstraints(boolean, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.InsertConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTableDescriptorForDeclaredGlobalTempTable(java.lang.String);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.cleanPage();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNString(java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.castArgToNationalString(org.apache.derby.iapi.sql.compile.TypeCompiler, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.legalJoinOrder(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getTime(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLLongvarchar;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genProjectRestrict(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getTime(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyTypesAndLengthsToSource(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealCallableStatement();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.cleanCache(org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.sortInAscendingOrder(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.makeResultDescription();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.moveRecordForCompressAtSlot(int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle[], org.apache.derby.iapi.store.raw.RecordHandle[]);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.isWrapperFor(java.lang.Class<?>);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.setUserTypeIdInfo();org.apache.derby.catalog.types.UserDefinedTypeIdImpl;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.close();org.apache.derby.impl.load.ImportReadData;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.createSort(boolean, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.SortObserver, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(float);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(int, long);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalogDescription(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindConstraints(boolean, boolean, int[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.init(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.printTree(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setCharacterStream(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.sortRequired(org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.forget(javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setPoolable(boolean);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.flattenFromTables(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllTableDescriptorsByTableId(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.setType(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getLanguageConnectionContext();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.checkChildren(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(byte, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.determine_lock_level(int);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getRowId(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.DataType.dataTypeConversion(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateJavaValue(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(float);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.commit(boolean, javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.setValue(java.sql.Date, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.setNodeType(int);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTimestamp(java.lang.String, java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.fetchNextGroup(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.startNestedTopTransaction();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getSQLText();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getLeftPredicateList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createTriggerDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.GenericDescriptorList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.prepConstantAction();org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DropConstraintConstantAction;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(java.lang.Object[], java.util.Hashtable);org.apache.derby.iapi.store.access.DiskHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.invalidOperandType();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.setupExecutors(org.apache.derby.impl.sql.execute.TriggerInfo);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.toString();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSParams(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.openContainer(int, org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.LockingPolicy);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allTopCRsFromSameTable();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.load.ExportResultSetForObject.getMetaDataInfo();org.apache.derby.impl.load.ColumnInfo;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setObject(java.lang.Object);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.setupContextStack();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.resolveConcatOperation(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.clearParameters();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.getName();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.isRightmostLeaf();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.getNonRedundantExpression();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.bindParameter();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.fixLengths(int, int, int, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.setPointOfAttachment(int);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetSavepoints();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.rememberAsBest(int, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.getDependencyDescriptorList(java.util.List, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.updateSYSSTATEMENTS(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getNullNode(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateRefActionDependentTableScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getColumnSQLType(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.nextAssignment(boolean);org.apache.derby.impl.services.daemon.ServiceRecord;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.InsertConstantAction;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.concatenate(org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.addLock(java.lang.Object, java.lang.Object, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.ActiveLock;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(long);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdInputStream.readObject();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.keyColumnOnLeft(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isScopedToSourceResultSet();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(boolean[], int, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.recoveryTransaction();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCostController.init(org.apache.derby.impl.store.access.conglomerate.OpenConglomerate);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.read(byte[], int, int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getAtMostOneResultColumn(java.lang.String, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setRowHoldersTypeToUniqueStream();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.validateReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.TriggerReferencingStruct;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.usesParameters(int, int, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyUniqueNames(boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(java.util.Properties);org.apache.derby.iapi.jdbc.FailedProperties40;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.subqueryReferencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.toString();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.release(org.apache.derby.impl.services.cache.CachedItem);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.checkConsistency();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.setNodeType(int);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(java.lang.String, java.util.Properties);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DropTriggerConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.getNextRowFromRowSource();org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.index.B2IController;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextDecoratedPermutation();org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.loader.ClassInspector.findPublicField(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.updatableByCursor(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.changeToCorrespondingExpressionType();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.shrinkFor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.getNextRowCore();org.apache.derby.impl.sql.compile.IntersectOrExceptNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateBinaryStream(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnDescriptor(int, org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaxMinAggregator.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getAffectedIndexes(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStoredDependency(org.apache.derby.iapi.sql.dictionary.DependencyDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.cleanUp();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.createFinished();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logField(int, int, java.io.OutputStream);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkHoldCursors(boolean, int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.setPointOfAttachment(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.closeSource();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultColumn();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.getVarcharDescriptor();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.D_BTreeController.diag();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.removeAttributes();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNString(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDouble(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.deallocPage(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(int, java.lang.StringBuffer, org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBytes(int, long);org.apache.derby.iapi.services.io.InputStreamUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.close();org.apache.derby.impl.store.access.btree.BTreeController;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getWarnings();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.insertForUpdate(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.startNestedTopTransaction();org.apache.derby.impl.store.raw.xact.XactContext;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenAfterEndTransaction();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScanInfo.getAllScanInfo(java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLockingRR.getReadLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.getNonRedundantExpression();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.encryptContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.decrementLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(int, int[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.heap.D_HeapController.diag();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.setNames();org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getURL(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivityNoStatistics(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.next();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.getRowCount();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getInputStream();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.lockClassLoader(org.apache.derby.iapi.services.locks.ShExQual);org.apache.derby.iapi.services.loader.ClassFactoryContext;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getNextRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(int, long);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initialize();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getInt();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.activationKind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getFileName(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassEnumeration.findClassReferences(java.util.HashSet);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.ContainerLocking2.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.toString();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.CollectNodesVisitor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAliasDescriptor(org.apache.derby.iapi.sql.dictionary.AliasDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory;0;0;0;0;0
org.apache.derby.impl.services.monitor.FileMonitor.PBinitialize(boolean);org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.initBaseTableVisitor(boolean, int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkOpen();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValue(java.lang.Number);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnReferenceFromName(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTableDescriptor(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getNodeName();org.apache.derby.impl.sql.compile.IntersectOrExceptNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptPassword(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.moveSavedDataToPage(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.releaseResource(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.EncryptContainerOperation;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getConstantAction();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pushIndexName(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.equalsComparisonWithConstantExpression(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(boolean, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexName(int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearParentResultSets();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnNamesArray();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(boolean, int, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.close();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.oneRowRightSide(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.sameStartStopPosition();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openStoreCost(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.addToProtocol(org.apache.derby.impl.services.monitor.ModuleInstance, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.doInsert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.handleException(java.lang.Exception, java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.getSchemaName();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(double);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(int, int, java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.initAccessPaths(org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.updateVTI(java.sql.ResultSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.decrementLevel(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.getChangedColumnIds(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(int, java.lang.StringBuffer, org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericLanguageFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.close();org.apache.derby.iapi.store.access.DiskHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.toString();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.typeUntypedNullExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.dumpConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getTime(int, java.util.Calendar);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerOperation.undoMe(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.EncryptData;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentRollbackFirstTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getFloat();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegation(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection40.addStatementEventListener(javax.sql.StatementEventListener);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getVTIClass(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getTableNumbers();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.preprocess(int, org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.convertIdentifierCase(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapPostCommit.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.store.access.heap.Heap;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalog(org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.compactColumns(boolean, boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getRealConnection();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.appendResultColumns(boolean, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.BulkTableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.compressContainer(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForGet(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.AggregatorInfoList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.setLockingBasedOnThreshold(double, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.bind();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(boolean, boolean, java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.debugConglomerate();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.undoCompressPages(int, int);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.getFileFormat();org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.DependentResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.getPageForRedoRecovery(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferScan.close();org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.update(java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.requiresTypeFromContext();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.findHashKeyColumns(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getAbsoluteRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getEmptyExecRow(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.jdbc.Driver20.stop();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int);org.apache.derby.impl.jdbc.EmbedCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.userTypeStorable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableNumber();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.timesNN(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getCorrelationTables(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.CollectNodesVisitor;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_RowLock.diag();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.toString();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getUserSpecifiedJoinStrategy();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.encryptAllContainers(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.cleanUp();org.apache.derby.impl.sql.execute.VTIResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.setupConnection(java.lang.String, java.lang.String, java.lang.String, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.readJarFile(java.lang.String, java.lang.String);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.printPosition(int, org.apache.derby.iapi.services.loader.GeneratedMethod, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdateField(int, int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootStrapSystemIndexes(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selfComparison(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.clean(boolean);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearIndexScanInfo();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.copy_init_xid(byte[], byte[], int);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantLength();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.setLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allTopCRsFromSameTable();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(byte);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selfComparison(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.rollback();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getCharacterStream();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.setUsed(java.lang.Object[]);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.removeIdentity(org.apache.derby.impl.services.cache.CachedItem);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setAfterLastRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.nextFreePageNumber(long);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.DD_Version);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBinaryStreamConditions(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(boolean, boolean, java.lang.Throwable);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.insertAndFetchLocation(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getOperator();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.lockAttributes(int, java.util.Hashtable);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByPosition(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.TriggerEvent;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStatisticsDescriptors(org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.LOJgetReferencedTables(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.getBranchQualifier();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortRowSource(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedUnaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.markAsCursorTargetTable();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(java.lang.String);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.localReadExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNClob(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(int, org.apache.derby.iapi.services.classfile.ClassHolder);org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFileOperation.needsRedo(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.feasible(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNClob(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.initContainerHeader(boolean);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionChainAllocPage(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.DeleteCascadeResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setExpressionToNullNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantLength();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.JSQLType.getSQLType();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdOutputStream.writeObject(java.lang.Object);org.apache.derby.iapi.services.io.DebugByteTeeOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkColumnUpdateability(java.lang.String, java.lang.String[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.checkHostVariable(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.binaryRelOpColRefsToString();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.canSupport(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.sortMe();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.createDuplicateStatement(java.sql.Connection, java.sql.PreparedStatement);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getConnection();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.getTypeServices();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getContainerProperties(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.remove(boolean, java.lang.String, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.memoryUsageOK(double, int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.d_BCValidate;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.getRowLocation(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getLanguageConnectionContext();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateIndexableRow(int, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.validateChecksum(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.putAndsOnTop();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setVersion(int);org.apache.derby.impl.store.access.StorableFormatId;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pushIndexName(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.GlobalXactId.getGlobalTransactionId();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.toString();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getString(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.performTransitiveClosure(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findLastAllocPage(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.optimize();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getNewNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writeExtent(int);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectLoaderJava2.loadGeneratedClass(java.lang.String, org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.getContainerid();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.getLong();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(java.lang.Object, java.lang.String, java.sql.PreparedStatement);org.apache.derby.jdbc.XAStatementControl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.constantColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nameAllResultColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.updateAllocPageHeader();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateChecksum();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getPrimitiveTypeName();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setSlotEntry(int, int, int, int);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getExpressionOperand(int, int, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.getScanArgs(boolean, int, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.compile.BaseJoinStrategy;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.statementCacheSize(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream(long, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateSQLXML(java.lang.String, java.sql.SQLXML);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.updateFieldAtSlot(int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.resetRealConnection();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getRealConnection();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSchemaName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNCharacterStream(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.diag.StatementCache.getString(int);org.apache.derby.impl.sql.GenericStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.createFinished();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getFloat();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compressSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorByName(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrictForReordering();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.openSortScan(boolean, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNString(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.SavepointConstantAction.toString();org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.init();org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.implicitVarcharComparison();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.setClause(int);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectAllocActions.actionCompressSpaceOperation(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateColumnDescriptor(boolean, int[], java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.toString();org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(boolean, boolean, boolean, boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.setPageStatus(int, long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.isCurrentPositionDeleted();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.castArgToNationalString(org.apache.derby.iapi.sql.compile.TypeCompiler, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getResultSet(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createBlob();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.updateTargetLockMode();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericExecutionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getNumJoinArguments();org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.doAllTheWork();org.apache.derby.impl.load.ImportReadData;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createTriggerDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.GenericDescriptorList);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.TriggerEvent;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getRowTemplate(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.makeResultDescription();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nopProjection(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnConstraint(boolean, java.lang.String, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(boolean, java.lang.Object[], java.util.Hashtable);org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.size();org.apache.derby.iapi.store.access.DiskHashtable;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReplaceJarConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.JarUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubCheckConstraint(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.purgeAtSlot(boolean, int, int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.io.FormatableIntHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CharConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.invalidate(long, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionAllocatePage(int, int, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.D_Xact.diag();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.orderable(org.apache.derby.iapi.services.loader.ClassFactory);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.initPage(int, long);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnReferenceFromName(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.setResultType(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.setString(int, int, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.CollectNodesVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int, java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addTableDescriptorToOtherCache(org.apache.derby.iapi.services.cache.Cacheable, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.setWidth(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DropDependencyFilter.execute(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.complete(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.iapi.services.classfile.ClassMember, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getTableNumber();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.getSQLAllowedInProcedure();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getCorrelationTables(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductVersion();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.services.reflect.ClassLoaderLock.unlockEvent(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getString();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.io.InputStreamFile.getParentDir();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.checkObject(org.apache.derby.iapi.services.io.Formatable);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.validate(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.compressPages(int, int);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.setURL(int, java.net.URL);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getEntry();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, int, long);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.close(org.apache.derby.iapi.error.StandardException);org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTriggerDescriptor(org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.initializeScalarAggregation(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.CardinalityCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.optimize();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.removeOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getFirstLog();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameIndex(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getDecimalValuePrecision();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.depend.DepClassInfo.getNewInstance();org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getSystemProperty(java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(boolean);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isCloneable();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.getLength();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(java.lang.String, long, long, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.io.FormatableProperties;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resetToSourceRC();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.cloneMe();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.iapi.types.XML.getString();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.nationalGetDate(java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.OrNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.findModule(boolean, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.sql.CursorInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckConstraints(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnDescriptor(java.lang.String, org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.search(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.JoinResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genEqualsFalseTree();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.setPredicatesAndProperties(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.parseDate(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.close();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedSimpleDataSource.findDriver();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.dropSort(long);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsCode();org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.parseTimestamp(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.types.DateTimeParser;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.getClassBytecode();org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(boolean, java.lang.String, java.lang.String);org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(java.lang.String[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberAsBest(int, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getRowPositionFromRowLocation(org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getTableNumber();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.finish();org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.legalJoinOrder(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.LanguageDbPropertySetter.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.findParentResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(boolean, boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherProvider.decrypt(byte[], byte[], int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getLogRecordEnd();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.startXATransaction(byte[], byte[], int, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.store.access.RAMTransaction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.verifyTargetProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.impl.sql.compile.NewInvocationNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.isCheckpointInLastLogFile();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.resize(long);org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.fillIndex(int, long, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateAllCheckConstraints(java.util.Hashtable, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.isInOrderPrefix(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.deleteCurrentRow();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.writeExceptions();org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getDouble();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectGeneratedClass.getMethod(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.hashCode();org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.positionInLastFetchedRow();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.getClassBytecode();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.destroy();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtDoneScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.decryptKey(byte[], int, java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getServiceName(java.lang.Object);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getEmptyExecRow(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.isCurrentPositionDeleted();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getSubString(int, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getIsRoot();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.lockAnObject(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassEnumeration.findFieldReferences(java.util.Enumeration, java.util.HashSet);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.close();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getRowLocation();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getEstimatedRowCount(int);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.uniqueJoin(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.checkSufficientData();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.addColumn(int, org.apache.derby.iapi.services.io.Storable, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.next();org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.pageValid(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(java.lang.Object, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backupAndEnableLogArchiveMode(boolean, boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.getOrderByColumn(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.delete(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToExistsJoin(boolean, int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection.getRealConnection();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.timestampAdd(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.handlePreparedXacts(org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(java.io.InputStream, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.catalog.types.IndexDescriptorImpl.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.RememberBytesInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.latchObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.isIsolationLevelSetUsingSQLorJDBC();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.toString();org.apache.derby.impl.sql.execute.IndexConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addEntry(java.lang.Object, org.apache.derby.iapi.services.classfile.ConstantPoolEntry);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.log.D_FlushedScan.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.checkConsistency(java.lang.Object, org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.LanguageDbPropertySetter.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.update(java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.read();org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInsert(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredRoutinePriv(org.apache.derby.iapi.sql.dictionary.AliasDescriptor);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.setCurrentRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.findColumnName(java.lang.String);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.removeConstantColumns(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDataDictionary();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(boolean, boolean, boolean, boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConstraintDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.impl.store.access.RAMTransaction;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.setValue(java.sql.Date, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.init(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredRoutinePriv(org.apache.derby.iapi.sql.dictionary.AliasDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.legalJoinOrder(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.reclaimPrepareLocks(org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.finish();org.apache.derby.impl.sql.execute.VTIResultSet;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextImpl.popMe();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean, boolean, int, java.lang.String, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getPrimaryKey();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.dup();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getSeconds(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(java.lang.String);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.notifyModifyJar(boolean);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.reclaim_deleted_rows(long, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.propertyDefaultIsVisible(java.lang.String);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.rollbackToSavePoint(java.lang.Object, java.lang.String);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.checkValidity();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.mod(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.getUUIDFactory();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setShort(java.lang.String, short);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.openFlushedScan(int, org.apache.derby.iapi.store.access.DatabaseInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.notAnException();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.finish();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.assignResultSetNumber();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.startWriting(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.hasNonBlankChars(int, int, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTablePermDescriptor(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDeclaredGlobalTemporaryTablesSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageIdAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(byte[], long);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantConstraints(boolean, boolean[], int, int[], org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTime(int, java.sql.Time, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.usesParameters(int, int, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.checkHoldCursors(int);org.apache.derby.jdbc.EmbedXAConnection;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.dumpAllocationCache();org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.pullUpOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortScan.fetchWithoutQualify(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.GenericTriggerExecutor;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.addLock(java.lang.Object, java.lang.Object, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTableDescriptor(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveAddedColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactId.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.checkConsistency();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceTableName();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getSubString(int, long);org.apache.derby.impl.jdbc.UTF8Reader;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.toString();org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.iapi.types.UserType.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.removeTruncationLWM(org.apache.derby.catalog.UUID);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.clearDirty();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.access.RllRAMAccessManager.bootLookupSystemLockLevel(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.findCached(java.lang.Object);org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object, org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getOrderableVariantType();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.hasPreparedXact(boolean);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.execute.CursorActivation.setCursorName(java.lang.String);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.getSPSName();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.remove(org.apache.derby.iapi.services.cache.Cacheable);org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextDecoratedPermutation();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.iapi.types.DateTimeParser.parseChoice(java.lang.String[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.verifyPutAndsOnTop();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateRowId(java.lang.String, java.sql.RowId);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCurrentAccessPath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogDirectory();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getDate(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.setLeftChildPageno(long);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.findRecordById(int, int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.deallocatePage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.containsAllParameterNodes();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.containsColumnName(java.lang.String);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkForSupportedDataType(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.setParameterDescriptor(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeLogRecord(byte[], byte[], int, int, int, int, long);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.setValue(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.newCacheable(org.apache.derby.iapi.services.cache.CacheManager);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getUnfilledPageNumber(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.depth(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.openCore();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getInputStream();org.apache.derby.impl.io.JarStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getNestedConnection(boolean);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getAtMostOneResultColumn(java.lang.String, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.transferBatch(org.apache.derby.impl.jdbc.EmbedStatement);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.getSQLAllowedInProcedure();org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addTableDescriptorToOtherCache(org.apache.derby.iapi.services.cache.Cacheable, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.rollback(javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.cleanUp();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.preprocessSourceRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getPageSize();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorList(boolean);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.scan(org.apache.derby.iapi.util.Matchable, org.apache.derby.iapi.util.Operator);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.upCast(java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNString(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.hasConsistentTypeInfo();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSYSCOLPERMSforAddColumnToUserTable(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getLanguageConnectionContext();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flush(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int, int[], org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.reached(int, int, java.lang.Object, java.lang.Object, java.util.Enumeration);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getTransitiveSearchClause(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.heap.Heap;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindDateTimeArg(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int);org.apache.derby.iapi.types.SQLDecimal;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.XML.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.NOPStatementNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.encryptContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.prepareForBulkLoad(int, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.diag.SpaceTable.getConglomInfo(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.makeAllocPage(int, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(int, int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.XML.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStreamInternal(boolean, int, java.io.InputStream, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowLocation();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setForUpdateIndexScan(org.apache.derby.iapi.sql.execute.CursorResultSet);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getMonth(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.hashJoinSpecified();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getScanArgs(boolean, int, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.compile.BaseJoinStrategy;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.serviceNow(int);org.apache.derby.impl.services.daemon.ServiceRecord;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateTriggerDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.prepareCommit(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkTopPredicatesForEqualsConditions(boolean, boolean[], int, int[], org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement.createDuplicateStatement(java.sql.CallableStatement, java.sql.Connection);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getMaximumWidthInBytes();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.putAndsOnTop();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordHeaderOnDemand(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setValue(short);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.toString();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getBaseTableName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(java.io.ObjectInput);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentRollbackFirstTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(int, long, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startGlobalTransaction(byte[], byte[], int, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.addFromTable(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.doSpecialMaxScan();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTime(java.lang.String, java.sql.Time, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedSPSDescriptor(org.apache.derby.impl.sql.catalog.TableKey);org.apache.derby.impl.sql.catalog.TableKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getURL(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex2Scan(java.lang.String);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.diag.Performance;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeScan();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.delete(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealStatement();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.doPreAllocatePages(int, long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flush(long, long);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.booleanSelectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.close();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection.checkIfClosed();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getRightPredicateList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getStorageFactoryClassName(java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextService.resetCurrentContextManager(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.unlockRecordAfterRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getAttributes(java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ConstraintInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.finishBindExpr();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.OIDTDCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.setWidth(boolean, int, int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeRowPieces(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.classFileSize();org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.addValueNode(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.FromBaseTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.cleanUp();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBigDecimal(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getNewJoinCondition(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.compatible(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.createExtent(int, int, int, long);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.setActivationClass(org.apache.derby.iapi.services.loader.GeneratedClass);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.wrapStatement(java.lang.Object, java.lang.String, java.sql.PreparedStatement);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.propagateDCLInfo(java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.setSavepoint();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getVTIName();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.rollback(javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.getColumnSortOrderInfo();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getRef(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.initialize(java.io.File);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.unlockRowAfterRead(boolean, boolean, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getScale(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdate(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.populate(int[], org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.reopenIndexScanController(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.buildRCL();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.setArrays(int, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.statisticsExist(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.start(int, javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.throwReliabilityException(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.getPageNumber();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.getNode(int, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.loader.ClassInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.optimizeDomainValueConversion();org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getScale(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.addFromTable(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.addXmlOpMethodParams(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(boolean, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(int, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.addThrownException(java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.load.Import.doImport();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getByte(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logOverflowField(int, int, long, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getXAResource();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLVTIResultSet.open();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(boolean[], int, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(java.util.Properties);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.hashJoinSpecified();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getSQLXML(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.locks.D_ActiveLock.diag();org.apache.derby.impl.services.locks.D_Lock;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.putAndsOnTop();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateSchemaNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.finish();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.initializeVectorAggregation(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.services.classfile.MemberTable.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.setIdent(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.isNullable(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.addPermittedColumns(boolean, java.lang.String, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.parseDate(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.types.DateTimeParser;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(java.util.Properties, org.apache.derby.io.StorageFile);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.UpdateConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.changeAccessPath();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.verifyUniqueColumnList(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeBatchElement(java.lang.Object);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEqualityPredicate(boolean, int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyListAndObjects();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.markRowAsDeleted();org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.grantPublicAccessToSystemRoutine(char, java.lang.String, java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.initialize(org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.registerOutParameter(int, int, int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.close();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(boolean, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.throwIfClosed(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(java.io.Reader, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getTargetVTI();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getBoolean();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.next();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(int, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.read();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(int, long, long, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateStartStopKey(boolean, boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogRecord.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getObjectTypeName(org.apache.derby.iapi.types.JSQLType);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.compressContainer(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.prepareForBulkLoad(int, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isStrictlyOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.doDeferredInsert();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.add(java.io.InputStream);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.execute.SumAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(java.lang.Object, org.apache.derby.iapi.types.UserDataValue);org.apache.derby.iapi.types.UserType;0;0;0;0;0
org.apache.derby.impl.services.locks.LockList.nextElement();org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.finish();org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.bind();org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.finish();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow(byte, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(boolean, boolean, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.decrementLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.grant(org.apache.derby.impl.services.locks.Lock);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLVTIResultSet.cleanUp();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.loadGeneratedClass();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getSeconds(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasSelfReferencingFK(int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getColumnType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.next();org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(boolean, boolean, boolean, boolean, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeRowPosition, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getAutoincrementValue(java.lang.String);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getForeignKeyConstraints(int);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.init(int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.OpenConglomerate);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.add(java.io.InputStream);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.setAfterLastRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.canTruncate();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findAllocPageForAdd(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.next();org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPermissionDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getUserSpecifiedJoinStrategy();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTime(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSYSCOLUMNSHeapConglomerateNumber();org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTimestamp(int, java.sql.Timestamp, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.orPermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.runFkChecker(boolean);org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.flushAll();org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSchemaDescriptor(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.checkConsistency();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getJarReader();org.apache.derby.iapi.services.loader.ClassFactoryContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ReferencedTablesVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.printTree(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logOverflowRecord(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getTransitiveSearchClause(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.postBindFixup();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.orderedOnColumn(int, int, int, int);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.zeroDurationLockRecordForWrite(boolean, boolean, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkHoldCursors(boolean, int);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableNumber();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.catalog.DDColumnDependableFinder;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.bootPasswordChange(java.io.Serializable, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getIsParam();org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getSpaceInfo(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs2(boolean, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.getStorableValue();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setAsciiStream(java.io.InputStream, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapRowLocation.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.findTransactionContextByGlobalId(org.apache.derby.impl.store.raw.xact.GlobalXactId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.tableHasAutoincrement();org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferScan.close();org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getSQLXML(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.pushPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.close();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkCorrupt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementTablePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(long);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AggregateSortObserver.insertNonDuplicateKey(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.sql.execute.BasicSortObserver;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.generateReceiver(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.JavaValueNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(byte, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.validate();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.notInSoftUpgradeMode();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.releaseResource(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.preAllocate(int);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.writeInProgress();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(int, long);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getShort(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.addBatch(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.LanguageDbPropertySetter.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.toString();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.stop();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterType(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.reOrder(int[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateXXX(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.PrivilegeInfo.checkOwnership(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.userType();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedBinaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.doDelete();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateTargetLockMode();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getFetchSize();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(java.io.PrintStream, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.rejectParameters();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIsolationLevel(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(boolean[], int, org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.verifyEliminateNots();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.moveToInsertRow();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setRowId(int, java.sql.RowId);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.fetch(boolean, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(java.lang.String, java.sql.NClob);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkAsciiStreamConditions(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.firstUpdateInstant();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.resetVirtualColumnIds();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.startSubMethod(int, int, java.lang.String, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.toString();org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeColumn(java.lang.Object);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.hashCode();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntry(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllDependencyDescriptorsList();org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.execute.OnceResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.optimizeDomainValueConversion();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlock(java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allExpressionsAreColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.constantColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.compactRecord(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.fetchNumFieldsAtSlot(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaxMinAggregator.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getRowId(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.addBatch();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(java.lang.String);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.assignResultSetNumber();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.deleteAtSlot(boolean, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasSelfReferencingFK(int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogCounter.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getTime(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.readPositionedPage(byte[], long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.setArrays(int, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.GenericTriggerExecutor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.getNewCostEstimate();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(byte[]);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getNegation(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.open(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.getSortAggregators(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.execute.NoPutResultSet, org.apache.derby.impl.sql.execute.AggregatorInfoList);org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderQualifiers();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.writeExceptions();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointCommandIsAllowed();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getUserCreateConglomPropList();org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateSQLValue(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.configureDatabaseForEncryption(java.util.Properties, org.apache.derby.iapi.services.crypto.CipherFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isPushableOrClause(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.numberConvertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterClassName(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setBeforeFirstRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDate(int, java.sql.Date, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.categorize();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.drop(boolean);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntry(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.eliminateBooleanTrueAndBooleanTrue();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.impl.store.raw.data.PageVersion;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanPreviousRow(int, int, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.LeafControlRow;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkRequiresCallableStatement(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.checkType(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.getJBMSMinorVersionNumber();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRecordHandle(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.getTypeMap();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.startResetMethod();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.columnTypesAndLengthsMatch();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(boolean[]);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.recreateServiceRoot(java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.postTermination();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.isWrapperFor(java.lang.Class<?>);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionCopyRows(int, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.encryptContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.setPosition(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics.setNames();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(int, java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.getLanguageConnectionContext();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.currentTimeStamp();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(int[], java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.bootLogFactory(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.printErrorStack(java.lang.Throwable);org.apache.derby.iapi.services.context.ErrorStringBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubCheckConstraint(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.compareWithKnownConstant(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.setValue(java.sql.Date, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.endOfRoundCleanup();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.eliminateNots(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.drop(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.store.access.sort.MergeInserter;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.optimize();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.next();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getCursorStatement();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.merge(org.apache.derby.iapi.sql.execute.ExecAggregator);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBlob(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_split(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getStoreCostController(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.convertIdCase(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bindPrivilegesForView(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableName();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.validateChecksum(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.moveSavedDataToPage(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexConglomerate(int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isJoinPredicate();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getNewVarchar();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.buildRCL();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addString(java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getRowTemplate(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.notInSoftUpgradeMode();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.read(byte[], int, int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.decrementLevel(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementTablePermission.oneAuthHasPermissionOnTable(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(int, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.objectNull(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getChildren();org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForCompress(int, long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getTransactionId();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(int, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.boot(boolean, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getLevel();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.reached(int, int, java.lang.Object, java.lang.Object, java.util.Enumeration);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.uniqueColumnPositionArray(int[]);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.statisticsExist(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.lockTableForCompilation(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.checkRowReservedSpace(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(boolean, boolean, java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addCodeUtf8(java.lang.String);org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getCorrelationTables(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.removeConstantColumns(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.setNodeType(int);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.setLeftChild(org.apache.derby.impl.store.access.btree.ControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getTrulyTheBestAccessPath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.insertRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(java.lang.String, java.math.BigDecimal);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.freeze();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getrightSiblingPageNumber();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getGroup();org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getRowTemplate(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootClassFactory(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.mapToTypeID(org.apache.derby.iapi.types.JSQLType);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isOneRowResultSet();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDouble(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkRowPosition(int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(java.lang.String, long, long, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.iapi.sql.StatementUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean, boolean, int, java.lang.String, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getClob(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.canSupport(java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getStreamStorableColIds(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setClob(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnToExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(org.apache.derby.iapi.jdbc.BrokeredStatementControl);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.close();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.writeHeaderToArray(byte[]);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarchar.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setAsciiStream(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.authenticateUser(java.lang.String, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.openForwardsFlushedScan(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBoolean(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.isKeyed();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.setNewTransactionId(org.apache.derby.iapi.store.raw.xact.TransactionId, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeColumn(java.lang.Object);org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getDataDictionary();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.putAndsOnTop();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.testLogFull();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.getMatchingNationalCharTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getTableScanResultSet(long);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.next();org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.isCurrentPositionDeleted();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.addRCForRID();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableLongHolder.readExternal(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_bindResultColumns(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.checkActive();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOrderableVariantType(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentPreparedRecoveredXact(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.rollback(javax.transaction.xa.Xid);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.getString(int);org.apache.derby.vti.VTITemplate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.startOptimizing(org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.complete(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.iapi.services.classfile.ClassMember, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.currentInstant();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.iapi.types.DataType.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getTransactionInfo();org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.setEstimatedRowCount(int, long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.countScanFlags();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBytes(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.genSQLJavaSQLTrees();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredColumnPriv(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.locate(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.StringDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getCorrelationTables(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.reopenCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setCoreValue(double);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.startServices(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.update();org.apache.derby.jdbc.EmbeddedDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.Driver40.boot(boolean, java.util.Properties);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getDynamicResults();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.implicitVarcharComparison();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowCore();org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInvalidatePage(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.length();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.isConstantExpression();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(boolean, boolean, boolean, boolean, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeRowPosition, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.OrNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.setFetchSize(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBytes(int, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.timestampDiff(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.close();org.apache.derby.impl.store.access.btree.BTreeForwardScan;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.completeConditional();org.apache.derby.impl.services.bytecode.Conditional;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.catalog.types.TypesImplInstanceGetter.getNewInstance();org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.addColumnToOrdering(int, org.apache.derby.iapi.services.io.FormatableArrayHolder);org.apache.derby.iapi.services.io.FormatableArrayHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.iapi.services.locks.ShExLockable.requestCompatible(java.lang.Object, java.lang.Object);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.toString();org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getFileName(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isOrList();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBlob(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.dataTypeConversion(int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.setOptimizable(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.maxCapacity(double, int, int);org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.setColumnListToNotNull(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getScale(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNString(java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNCharacterStream(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.buildTableNumList(boolean, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(boolean, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UserTypeConstantNode;0;0;0;0;0
org.apache.derby.impl.load.Export.doExport();org.apache.derby.impl.load.ExportAbstract;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.compressPage(int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getBaseColumnNode();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSQLColumnName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(java.lang.Object);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.readJarFile(java.lang.String, java.lang.String);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableProperties.readExternal(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMajorVersion();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(double);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.numberStorable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getAbsoluteRow(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnNames();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeRowPosition.toString();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setValue(java.lang.Number);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object, org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.close();org.apache.derby.impl.store.raw.xact.XactContext;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.finish();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.forget(javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SqlXmlUtil.evalXQExpression(boolean, int[], org.apache.derby.iapi.types.XMLDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.removeWaiter(java.lang.Object, java.util.List, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.XML.returnStream();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDate(java.lang.String, java.sql.Date);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateNOPProjectRestrict();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getSpaceInfo(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.SpaceInformation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.hashJoinSpecified();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.load.Import.getImportReadData();org.apache.derby.impl.load.ImportAbstract;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.splitCodeIntoSubMethod(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.makeAllocPage(int, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalPageOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.getAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.add(java.io.InputStream);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(boolean, boolean, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerKey.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNodesFromParameters(java.lang.Class);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.isNullable();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.remapScopedPred();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.expandAll(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdateField(int, int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.prepareSPS(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateArray(int, java.sql.Array);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.restoreLogs(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getEmptyHeapRow(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.create(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionCopyRows(int, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.createDependency(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.getCacheStats();org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkReliability(int, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.updateEstimatedRowCount(int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnDefault(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentRowLocationNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.markForDistinctScan();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectParameters();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getTransitiveSearchClause(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.unlockPositionAfterRead(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getDouble();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePage(org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.validColumnNumber(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.clearIdentity();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.close();org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindParameter();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.load.ImportReadData.realOpenFile();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeRowPosition.init();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.setBytes(byte[], long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeOptionalDataToBuffer(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.AggregateSortObserver.insertDuplicateKey(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.addTableElement(org.apache.derby.impl.sql.compile.TableElementNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setString(java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.initialize(org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.toString();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.prepareCommit(int);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.IndexInfoImpl.isIndexUnique();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(boolean);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.unlockRecordAfterRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getString(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.writeExternal(java.io.ObjectOutput);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getRowMap(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeBatch();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBinaryStream(java.io.InputStream, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read();org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isNotExists();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(float);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getLastValidPage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.impl.store.access.heap.Heap;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptorIndex1Scan(java.lang.String, java.lang.String);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.equals(java.lang.Object);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(java.lang.String, org.apache.derby.iapi.services.stream.PrintWriterGetHeader);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepareStorable(boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.PreparedStatement);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IMaxScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.store.raw.ContainerKey.requestCompatible(java.lang.Object, java.lang.Object);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getStrings();org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.PrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(java.lang.Object, java.lang.String, java.sql.PreparedStatement);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutineList(char, java.lang.String, java.lang.String);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.defragmentConglomerate(boolean, int, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptorIndex1Scan(java.lang.String, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSFILESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameMembers(java.util.Enumeration, java.util.Hashtable, java.util.Hashtable);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubKeyConstraint(int, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLConstantNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getFloat(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.OIDTDCacheable.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.getPrecision(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.reclaimPrepareLocks(org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.unfreeze();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLSerialize(int, int, org.apache.derby.iapi.types.StringDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.wasNull();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(int[], java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.toString();org.apache.derby.impl.store.raw.data.EncryptContainerOperation;0;0;0;0;0
org.apache.derby.iapi.types.SqlXmlUtil.compileXQExpr(java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.setArrays(int, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.getFreePageNumber(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.pageHeaderToString();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericRIChecker.isAnyFieldNull(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.lockAttributes(int, java.util.Hashtable);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.isQualifier(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.repositionScanForUpateOper();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.reflectionNeededForProjection();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQueryUsingSystemTables(boolean, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateCharacterStream(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.setupContextStack();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScan(boolean, int, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(org.apache.derby.impl.sql.catalog.TableKey);org.apache.derby.impl.sql.catalog.TableKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.divide(int, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.checkXAActive();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.accumulateScalarAggregation(boolean, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameClassElements(java.util.Hashtable, java.util.Hashtable);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setTargetVTI(java.sql.ResultSet);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericExecutionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.moveToCurrentRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop();org.apache.derby.iapi.util.CheapDateFormatter;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.impl.sql.compile.TablePrivilegesNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOneColumnChain(int, long);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateLockGranularity(char, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateIndex(int, long, long[], org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(boolean, int, org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.readExtent(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.rotateClock(float);org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedUnaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.createPage(int[], org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getLevel();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findService(java.lang.String, java.lang.String);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getParentDir(int);org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.clean(boolean);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.getUpdateLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.abort();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageIdAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkOnRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.defaultTypeIsValid(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isUpdated();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getScratchCostEstimate(org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.invalidateAllSPSPlans();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.updateOverlaps(int[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScanRowSource.next();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableIntHolder.readExternal(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkStatus();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.drop(boolean);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.determine_locking_policy(int, int);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextService.setCurrentContextManager(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.getScanInfo();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag_detail(java.util.Properties);org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(java.lang.Throwable, org.apache.derby.iapi.sql.conn.StatementContext);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(java.lang.String, java.sql.ResultSetMetaData, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootStore(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.verifyOrderable();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.findGroupingColumn(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setAutoincrementValue(boolean, java.lang.String, long, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromProp(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.isGrantable(boolean, java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetchWithoutQualify(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkIfInMiddleOfBatch();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getGenericConstantActionFactory();org.apache.derby.impl.sql.execute.GenericExecutionFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setLong(int, long);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNString(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.checkTableDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.optimizeSubqueries(double, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDouble(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.services.io.FormatableArrayHolder;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.findIndexIndex(int, int, int);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.truncatePages(long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_RowLock.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.incrementReusableRecordIdSequenceNumber();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogFactoryProperties(org.apache.derby.iapi.services.property.PersistentSet);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.getTableProperties(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.toString();org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.close();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.materializeResultSetIfPossible(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getMember(java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.methodReturn();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.SavepointNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.propagateDCLInfo(java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSingleQualifierCode(boolean, int, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.RelationalOperator);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeConstraintDependenciesOnPrivileges(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.StatementColumnPermission;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindTargetExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.DataType.isNullOp();org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnNames();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCurrentAccessPath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropJDBCMetadataSPSes(boolean, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkOwnership(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.PrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexRowFromHeapRow(org.apache.derby.iapi.sql.dictionary.IndexRowGenerator, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.clean(boolean);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getAllocPage(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.prepareForBulkLoad(int, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.projectResultColumns();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.markAffectedIndexes(java.util.Vector);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU2U1U1(int, short, short, short);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.shouldWeCheckRowCounts();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.setParameterAsObject(int, java.lang.Object);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.find(javax.transaction.xa.Xid);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.close();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.delete(org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(boolean, int, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAutoincIncrementArray();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkCommit();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.removeSlotEntry(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setCharacterStream(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredPage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageHeader();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSYSCOLPERMSforAddColumnToUserTable(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getNextValidPage(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionTypeString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.bootModule(boolean, java.lang.Object, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setResultSetNumber(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(java.util.Properties);org.apache.derby.impl.store.raw.data.RecordId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointArg(java.sql.Savepoint);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredTablePriv(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.getRawStream(java.io.InputStream, java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(org.apache.derby.iapi.services.compiler.LocalField);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraint();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(boolean, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getRelativeRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.repositionScanForUpateOper();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.unlockRowAfterRead(boolean, boolean, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraints(int, int, org.apache.derby.catalog.UUID);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLExists(org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateRef(int, java.sql.Ref);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdatableByCursor();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentRowLocationNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraints(int, int, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.find(java.lang.Object);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.J2SEDataValueFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setRowId(int, java.sql.RowId);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkIsBoolean();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveAddedColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTimestamp(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.services.classfile.AttributeEntry.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableArrayHolder.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setValue(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.isPersistent();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getForeignKeys(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.getFilePath(boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.optimize();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.verifyOrderable();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSCS_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStreamInternal(boolean, int, java.io.InputStream, java.lang.String, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(java.lang.Object, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.findHashKeyColumns(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.compressTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.checkUserCredentials(org.apache.derby.jdbc.EmbedXAResource);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowArrayFromHashTable(int);org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.prepConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.restoreContextStack();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(java.io.InputStream, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.getClientInfo();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getBoolean();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJSQLType();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEqualityPredicate(boolean, int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.close();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getPageStatus(long);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getFloat(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.toHexString();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkColumnUpdateability(java.lang.String, java.lang.String[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.dropConglomerateDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.getGlobalTransactionId();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getNewNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadCatalogs(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.impl.sql.catalog.TabInfoImpl[]);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsString();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewStart(java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.initStream();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerKey.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNCharacterStream(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregator.getAggregatorInstance();org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(int, int, java.lang.Object, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getJoinColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addDistinctAggregatesToOrderBy();org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_1_system_procedures(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getIndexConglomerateNumber();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initialize();org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.compareWithKnownConstant(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.setIdentity(java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.getUnfilledPageCount();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.toString();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStopKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(java.lang.Throwable);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.IndexInfoImpl.getColumnCount();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setNullability(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInitPage(int, int, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.readExternal(java.io.ObjectInput);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.add(boolean, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNString(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.AccessPathImpl.initializeAccessPathName(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setInto(int, java.sql.PreparedStatement);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getRowPositionFromRowLocation(org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int, long);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.LastIndexKeyResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.equals(java.lang.Object);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdate(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.accumulateScalarAggregation(boolean, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapPostCommit.purgeCommittedDeletes(long, org.apache.derby.impl.store.access.heap.HeapController);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConstraintDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.store.raw.ContainerKey.match(java.lang.Object);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_bindResultColumns(boolean);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.CheckpointOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.prepare(javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setup();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraint();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.dumpConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(int, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLParse(boolean, java.lang.String, org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.types.SqlXmlUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsIndexes(int[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.getCurrentSetup();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableBitSet.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTimestamp(java.lang.String, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getForUpdateIndexScan();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getRowFromSorter();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.chainNewAllocPage(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchRow.setPageNumber(long);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.initializeVectorAggregation(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getScale(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.ReclaimSpace;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptors(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowFromHashTable(int);org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(long);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.execute.ConstantActionActivation.execute();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.deallocatePage();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isCaseSensitive(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.getSeparatorChar();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getSystemDiagSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.print();org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nopProjection(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.setType(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allTopCRsFromSameTable();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberSortAvoidancePath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.unwrap(java.lang.Class<T>);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeField(int, int, java.io.ObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.addInternal(int, int, org.apache.derby.iapi.types.SQLTimestamp);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getIndexColMapping();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeInserter.initialize(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.impl.store.access.sort.MergeSort);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.equals(java.lang.Object);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.IndexConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.getLength();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.generateKey(byte[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(java.lang.Object);org.apache.derby.impl.services.bytecode.BCLocalField;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getSchemaName();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.purgeAtSlot(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.invalidOperandType();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.createOutStreams();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaIndex(boolean, int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TransactionStatementNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameClassElements(java.util.Hashtable, java.util.Hashtable);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.makeIndexTemplate(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.reportException(java.lang.Throwable);org.apache.derby.iapi.services.context.ErrorStringBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDouble(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireBeforeTriggers(java.util.Hashtable);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.doInsert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.heap.Heap;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.verifyUniqueColumnList(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.normalize(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.parseTime(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.startElse(org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk, org.apache.derby.impl.services.bytecode.Type[]);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getDate(java.util.Calendar);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.areLocksHeld(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQuery(boolean, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isScopedToSourceResultSet();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getTableName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.isPotentialService(org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassData(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.close();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getInt(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.monitor.UpdateServiceProperties.saveServiceProperties();org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.equalsComparisonWithConstantExpression(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.generateReceiver(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.JavaValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQueryUsingSystemTables(boolean, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getFullName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnDescriptor(java.lang.String);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.typeToBigDecimal();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScan(boolean, int, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropAllDeclaredGlobalTempTables();org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.modifyJar(boolean);org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.isValid(int);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getTrulyTheBestAccessPath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.open(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.load(org.apache.derby.iapi.store.access.RowSource);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.updateMaps(boolean[], int, int, int[], org.apache.derby.iapi.util.JBitSet[], org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSystemProcedureOrFunction(int, int, java.lang.String, java.lang.String[], org.apache.derby.catalog.TypeDescriptor, org.apache.derby.catalog.TypeDescriptor[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController, short);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getReturnRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.EncryptContainerOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRecordHandleAndSetLocks(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.setActivationClass(org.apache.derby.iapi.services.loader.GeneratedClass);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.VTIDeferModPolicy;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnDescriptor(int);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(int);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.getAndApply(boolean, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.checkTopPredicatesForEqualsConditions(boolean, boolean[], int, int[], org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finishAggregation(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addCodeUtf8(java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.rewindJoinOrder();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.ageOut();org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.DropConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveAddedColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.StatementPermission;0;0;0;0;0
org.apache.derby.iapi.types.DataType.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privRestoreDataDirectory();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(boolean, boolean, boolean, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeRowPosition, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.index.B2IRowLocking3;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int, long);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.OIDTDCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.sql.execute.WriteCursorConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.defaultTypeIsValid(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByPosition(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyBulkInsert();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.canWeCacheResults();org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.openContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStartKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setObject(java.lang.Object);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int, java.lang.Object);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.enableLogArchiveMode();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.close();org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalog(org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.minus(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo.getNewInstance();org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.estimateCost(double, org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.addSlotEntry(int, int, int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getLatchedPage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(boolean, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getOptimizable(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.rollback(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.splitCodeIntoSubMethod(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTime(int, java.sql.Time, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.bindTargetExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(boolean, boolean, boolean, int);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.getDependable(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJSQLType();org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore();org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.getDate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(java.lang.Object);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.toString();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.IndexConstantAction;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(boolean);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.getString();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getColumnMax(java.lang.String, long, long, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.close();org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTriggerDescriptor(org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.addColumnToConglomerate(int, long, org.apache.derby.iapi.services.io.Storable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.getLocaleFinder();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readPageHeader();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.monitor.FileMonitor.PBapplicationPropertiesStream();org.apache.derby.iapi.services.io.FileUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getDataDictionary();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getEmbedParameterSetMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.setTruncationLWM(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.copy(org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addAttribute(java.lang.String, org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.Attributes;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateRefActionDependentTableScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRow.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMajorVersion();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getCharacterStream(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.localReadExternal(java.io.ObjectInput);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getRef(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getNextPage(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteDataAbstract.loadPropertiesInfo();org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.initRequiredPriv();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(java.lang.String, java.sql.Clob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.fkSetupArrays(boolean[], int, int[], java.lang.String[], long[], org.apache.derby.catalog.UUID[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.pushPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getParameter(int);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.JoinResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredRecordHeader.read(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.openCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.init(boolean, boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.BTreeController;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.initialize(org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.renameGeneratedResultNames();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.UniqueIndexSortObserver.insertDuplicateKey(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.printPosition(int, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getMaxDynamicResults();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceSchemaName();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionPurge(boolean, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getCostEstimate();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.getParameterTypes();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getTableScanResultSet(long);org.apache.derby.impl.sql.execute.BulkTableScanResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeRowPosition.unlatch();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setNull(int, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLSerialize();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.sqrt(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.addUpdateTransaction(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getDouble();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.validate(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getShort(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.restrictionIsTrue();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.close();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUDTs(int[], java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.preAllocatePage(int, int, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.canEncryptDatabase(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.commit(boolean, javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.checkTopPredicatesForEqualsConditions(boolean, boolean[], int, int[], org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraintId();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.clearTableNames();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getMinutes(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.getConnection();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.impl.store.raw.log.CheckpointOperation;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForGet(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.access.heap.D_HeapController.diag();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateAllCheckConstraints(java.util.Hashtable, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.doShrink(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.resetProbeVariables();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getForCreateTable();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.exportNames(java.lang.String[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.decrementLevel(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.GroupedAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFile.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.blockBackup(boolean);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.bind();org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.GClass.writeClassFile(boolean, java.lang.String, java.lang.Throwable);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.decrementLevel(int);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.run();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsCode();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.verifyPutAndsOnTop();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getNestedConnection(boolean);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.inService(java.lang.Object);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.findFreeItem();org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newTablePermsDescriptor(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(java.lang.String);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.invalidate();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getArrayElement(int);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBuiltinSchemaNames();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.getSlotNumber(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlock(java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNString(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.resetStream();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.load.Export.doExport();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubCheckConstraint(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.bind();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.diag.SpaceTable.getSpaceInfo(int);org.apache.derby.diag.ConglomInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.addXmlOpMethodParams(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.setValue(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.getScanArgs(boolean, int, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.getContainer();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.performWork(boolean);org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.findHashKeyColumns(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.toString();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.init(boolean, boolean, java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.doPreAllocatePages(int, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkStatus();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getUserPageNoWait(long);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.getClassBytecode();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.lockTableForCompilation(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.printPosition(int, org.apache.derby.iapi.services.loader.GeneratedMethod, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SyncOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(java.lang.String, java.sql.ResultSetMetaData, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.addOrderedColumn(int, int, int);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.services.stream.SingleStream.makeHPW(org.apache.derby.iapi.services.stream.PrintWriterGetHeader);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.createStatement(int, int, int);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setDeleteStatus(boolean, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getleftSiblingPageNumber();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNCharacterStream(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getConnectionContext();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableName.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.grow(int);org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.catalog.DDdependableFinder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.removePushedCode(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.close();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.openContainerAndDoIt(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ContainerActionOnCommit;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.StatementUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.hashCode();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.checkSufficientData();org.apache.derby.iapi.services.io.LimitReader;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getGid();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getAffectedIndexes(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.addInstrCPE(int, short);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_2_system_procedures(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(short);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.getShrinkKey(int, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.PassThroughException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.findUtf8(java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getNullIndexRow(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateAsciiStream(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.isNullable();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntry(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(int, java.lang.String, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.ProjectRestrictResultSet;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.D_Lock.diag();org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.setDynamicResultSet(org.apache.derby.impl.jdbc.EmbedStatement);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.returnConnectionToResource(org.apache.derby.iapi.store.access.xa.XAXactId, org.apache.derby.jdbc.XATransactionState);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getAction();org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.getDataValueFactory();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeViewTriggerDependenciesOnPrivileges(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.RawField;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkAutoCommit(boolean);org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.writeData(boolean[], java.lang.String[]);org.apache.derby.impl.load.ExportWriteDataAbstract;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getStrings();org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.getInt(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.toString();org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.heap.D_HeapController.init(java.lang.Object);org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.debugConglomerate();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.compareRowsOnSiblings(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.catalog.types.StatisticsImpl.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(boolean, int, int, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.initPage(boolean, boolean, int[], long, org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.drop(boolean);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.concatenate(org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEqualityPredicate(boolean, int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedUnaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDate(java.lang.String, java.sql.Date);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyResultColumnNames(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.bootModule(boolean, java.lang.Object, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowScan();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.modifyAccessPaths();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.isNullNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLockingRR.getUpdateLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.stringCompare(org.apache.derby.iapi.types.SQLChar, org.apache.derby.iapi.types.SQLChar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getSystemUtilSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.throwInvalidOutParamMap(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBytes(byte[], int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getRefCols();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.setLeftChildPageno(long);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getStopOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.run();org.apache.derby.iapi.services.io.FileUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateColumnDescriptor(boolean, int[], java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.findDriver();org.apache.derby.jdbc.AutoloadedDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDate(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.validateStatement(org.apache.derby.iapi.sql.execute.ConstantAction);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTime(java.lang.String, java.sql.Time);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.skipField(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.growStack(org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateRecordPortionLength(int, int, int);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.isSelfReferencingFK();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.InternalXact.doComplete(java.lang.Integer);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.FailedProperties40;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.runFkChecker(boolean);org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.toString();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.io.DirStorageFactory.newPersistentFile(java.lang.String, java.lang.String);org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParseException.getMessage();org.apache.derby.impl.sql.compile.Token;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flush(long, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flushBuffer(long, long);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.toString();org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.addEntry(boolean, java.lang.Object, java.lang.Object, org.apache.derby.impl.services.cache.CachedItem);org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genCreateRow(int, java.lang.String, java.lang.String, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.makeVirtualLockTable();org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJavaTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLVTIResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SavepointNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.catalog.types.StatisticsImpl.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.checkChildOrderAgainstRowOrder(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.convertConstant(int, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(double);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setArray(int, java.sql.Array);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.statusForBeginXactLog();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBoolean(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.getTypeCompiler(org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapPostCommit.purgeCommittedDeletes(long, org.apache.derby.impl.store.access.heap.HeapController);org.apache.derby.impl.store.access.heap.HeapController;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexConglomerate(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getByte();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericColumnDescriptor.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getObjectTypeName(org.apache.derby.iapi.types.JSQLType);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(boolean, int, java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.addXmlOpMethodParams(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.catalog.types.IndexDescriptorImpl.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getVariantTypeOfParams();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.markRowAsDeleted();org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindParameter();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealStatement();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startNestedTopTransaction(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.removeRedundantPredicates();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.jdbc.AutoloadedDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromProp(java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateSQLXML(int, java.sql.SQLXML);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.toString();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getCharacterStreamAtPos(java.lang.Object, long);org.apache.derby.impl.jdbc.UTF8Reader;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU2(int, short);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericExecutionContext.getResultSetStatisticsFactory();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.addGroupByColumn(org.apache.derby.impl.sql.compile.GroupByColumn);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setByte(byte, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getCompilerContext();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.services.monitor.FileMonitor.PBinitialize(boolean);org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.bindOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.init(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.xorReferencedSet(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.getString();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.restrictionIsTrue();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.D_BTreeController.diag();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getAllocatedRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.init(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.compactColumns(boolean, boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClass(boolean, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition();org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(org.apache.derby.iapi.services.compiler.LocalField);org.apache.derby.impl.services.bytecode.BCLocalField;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeField(int, int, java.io.ObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByName(int, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isStrictlyOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(boolean[], int, org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.apply(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getLong();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getDataValueFactory();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getU2(int);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.cleanUp();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.commitIfAutoCommit();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.deallocatePage();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.getAsStream(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.implementedInterfaces();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.LockTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaIndex(boolean, int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.start(int, javax.transaction.xa.Xid);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.convertConstant(int, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkVersion(int, int, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.pointsToColumnReference();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLRef.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.spsCacheEntryAdded(org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isScopedToSourceResultSet();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.GlobalXactId.readExternal(java.io.ObjectInput);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.VTIDeferModPolicy;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getLong(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generateConstructor(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkRowPosition(int, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getLeftOptPredicateList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.orderable(org.apache.derby.iapi.services.loader.ClassFactory);org.apache.derby.catalog.types.UserDefinedTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getCursor();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.initAccessPaths(org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.minus(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getRowId(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.checkReliability();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logtest_appendPartialLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isNullable(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getReferencedFormatableBitSet(boolean, boolean, boolean);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.jdbc.ResourceAdapterImpl.stop();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.getClassBytecode();org.apache.derby.impl.services.bytecode.GClass;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setInt(int, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.setPropertyDefault(java.io.Serializable, java.lang.String);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.isQualifier(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.processCodeAttribute(org.apache.derby.iapi.services.classfile.AttributeEntry, org.apache.derby.iapi.services.classfile.ClassMember);org.apache.derby.iapi.services.classfile.ClassInput;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getMaxPagenum();org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getConstantValueAsObject();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.lockAttributes(int, java.util.Hashtable);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.catalog.types.DecimalTypeIdImpl.setNumericType();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.getAllocatedPageCount();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.isMaterializable();org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNCharacterStream(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int);org.apache.derby.impl.jdbc.EmbedCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(double);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.isTemporaryContainer();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameMembers(java.util.Enumeration, java.util.Hashtable, java.util.Hashtable);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.iapi.jdbc.JDBCBoot.boot(java.io.PrintStream, java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrement(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(org.apache.derby.impl.sql.compile.OrderedColumnList);org.apache.derby.impl.sql.compile.OrderedColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.initContainerHeader(boolean);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBytes(int, long);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.dropContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getLeftPredicateList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.PrivilegeInfo.checkOwnership(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.fetchBaseRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJavaTypeName();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.getEstimatedRowCount();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.hashCode();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.qualifyRecordFromSlot(int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getPrimaryKey();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getAllRelevantTriggers(boolean, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateIndex(int, long, long[], org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.execute.CardinalityCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBoolean(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.initializeResultField(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object, org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.readDbProperties(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.UserType;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.assignableTo(java.lang.String);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getTime(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privRestoreDataDirectory();org.apache.derby.iapi.services.io.FileUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.splitCodeIntoSubMethod(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectLoaderJava2.findClass(java.lang.String);org.apache.derby.impl.services.reflect.DatabaseClasses;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.cloneMe();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pushIndexName(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.checkColumnOrdering(org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.encryptContainer(java.lang.String);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateFieldOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.countConstraints(int);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropStreamContainer(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeResultSets();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.typeCompare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateSchemaNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealJoinResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.getClientInfo(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.optimize();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.commit(boolean, javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.NameTDCacheable.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getContextManager();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferNonQualifiers(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.toString();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.remove(boolean, java.lang.String, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.clearOrderableCache(org.apache.derby.iapi.store.access.Qualifier[][]);org.apache.derby.impl.sql.execute.GenericQualifier;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.verifyPutAndsOnTop();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSCS_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_bindResultColumns(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.sortRequired(org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.dumpDependencies();org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getSQLXML(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.io.DirStorageFactory.doInit();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getLeftOptPredicateList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameString(java.util.Hashtable, org.apache.derby.iapi.services.classfile.CONSTANT_Index_info);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.clearBatch();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.getNextWaiter(boolean, org.apache.derby.impl.services.locks.ActiveLock, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.ActiveLock;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.invalidateAllSPSPlans();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.services.context.ErrorStringBuilder.stackTrace(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.available();org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getMaximumColumnSize();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(int, java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultSet(int[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setup();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.padFile(long, org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.markUpdated(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.CurrentOfNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.reopenCore();org.apache.derby.impl.sql.execute.ScalarAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setScale(int, int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getCostEstimate(org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.compactRecord(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getConnection();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(java.util.Properties, org.apache.derby.io.StorageFile);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.resetIsolationLevelFlag();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.startElseCode();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.DropTriggerConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.addWarning(java.sql.SQLWarning);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(java.lang.String, java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.getAllRuntimeStats(java.util.Properties);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.setCostEstimate(org.apache.derby.iapi.sql.compile.CostEstimate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doRollback(boolean, boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMajorVersion();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewAggregatorResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.setFetchSize(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getRowLocationTemplate(int);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.GlobalXactId.getBranchQualifier();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.load.ImportReadData.loadMetaData();org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getRowLocation();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkNotOnInsertRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorById(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getDate(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.finish();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.InListOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.getMinutes(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getSpaceInfo();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.getTimestamp(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.findIndexEntry(int, int, int);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.updatableByCursor();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropAllColumnDefaults(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getByte(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.iapi.services.loader.ClassInspector.resolveMethod(boolean, boolean, boolean[], java.lang.Class, java.lang.Class[], java.lang.Class[], java.lang.reflect.Member[], java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.mapTableAsVTI(java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.deleteAtSlot(boolean, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.copyFields(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(int, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.setupQualifierRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.HasNodeVisitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(boolean, boolean, org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.getValue();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.lockRow(boolean, int, int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.canAddFreePage(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getConstraintId(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaHeap(java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferAllPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.unlockReference(java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.classFromIdentifier(int);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterTypeName(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getFloat();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.store.raw.PageKey.hashCode();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.doAllTheWork();org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getExclusiveTableLock();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getContextManager();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFileOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.switchToMultiInsertPageMode(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getInternalTablePropertySet(java.util.Properties);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.insertIntoSorter(int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.LOJgetReferencedTables(int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.doProjection();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.positionInLastFetchedRow();org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.genGroupedAggregateResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageNoWait(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindDateTimeArg(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.typeUntypedNullExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.toString();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.comparable(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.getConnection();org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.resultSetClosing(org.apache.derby.impl.jdbc.EmbedResultSet);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(boolean[], int, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.impl.sql.compile.CreateViewNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.removeOrphanedColumnChain(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.impl.store.raw.data.ReclaimSpace);org.apache.derby.impl.store.raw.data.ReclaimSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.iapi.types.XML.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionCopyRows(int, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.getConnection();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.openForwardsScan(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.generateReceiver(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.JavaValueNode);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchRow.toString();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.uniqueJoin(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.ensurePredicateList(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.modifyAccessPaths();org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.addScopedPredicatesToList(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getIntProperty(java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.debugPage(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScanFromClose(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.cast(java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.expandAll(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.reflect.ClassLoaderLock.unlockEvent(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.iapi.services.locks.ShExLockable;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setup();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getConnection();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.encryptKey(byte[], byte[]);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logErrMsg(java.lang.Throwable);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.getTableProperties(java.util.Properties);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startGlobalTransaction(byte[], byte[], int, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressionsWithTables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getExclusiveTableLock();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.CurrentOfNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writeExtent(int);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.markUpdatableByCursor(java.util.Vector);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(java.lang.String[]);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.addPermittedColumns(boolean, java.lang.String, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTableDescriptor(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.setFirstUnflushed();org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.addLimitExceeded(int, int, java.lang.String, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.execute.PrivilegeInfo.checkOwnership(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.mergeVectorAggregates(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setScale(int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.bindParameter();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.InternalXact.doComplete(java.lang.Integer);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.ActiveLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getleftSiblingPageNumber();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.heap.HeapController;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.updateTargetLockMode();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(java.lang.Object);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.finishBindExpr();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getPrimitiveSignature(boolean);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getDominantTypeServices();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongVarbit.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.appendOverflowFieldHeader(org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllDependencyDescriptorsList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCJava.vmType(org.apache.derby.impl.services.bytecode.BCMethodDescriptor);org.apache.derby.impl.services.bytecode.BCMethodDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeConstraintDependenciesOnPrivileges(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getRightOptPredicateList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getProperty(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.notFlattenableJoin();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.length();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.resize(long);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.lockAnObject(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doRollback(boolean, boolean);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.services.bytecode.BCMethodDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.optimize();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.getReceiverInterfaceName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.addBatch();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.sortRefs(boolean, java.util.Vector);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.getBoundTableID();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getOpcode(int);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getLocale(java.lang.Object);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.resetRecordHandle(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.end(int, javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setAsciiStream(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.getAndNameTransaction(java.lang.String, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.verifyUniqueColumnList(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.isWrapperFor(java.lang.Class<?>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans();org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getDate(int, java.util.Calendar);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.toString();org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.AggregateNode;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.readProperty(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.UserType;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsString();org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getUpdateSchemaName();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getIndexColMapping();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.catalog.types.DefaultInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.ExternalSortFactory.createSort(boolean, int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.SortObserver, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.getFromList();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.group();org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(java.lang.Object);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.EmbedCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.booleanSelectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.getPrimitiveTypeName();org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.BulkTableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.normExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionShrinkReservedSpace(int, int, int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.generateNormalizationResultSet(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.ResultDescription, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.catalog.types.DefaultInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.mapTableAsVTI(java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.cancel();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.catalog.types.DefaultInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.restoreContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.generateHolder(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getDominantType(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.startModule(boolean, java.lang.Object, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.jdbc.Driver20.boot(boolean, java.util.Properties);org.apache.derby.jdbc.AutoloadedDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(java.lang.String);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.hashCode();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.markUpdatableByCursor(java.util.Vector);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getExposedName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedSavepoint30.sameConnection(org.apache.derby.impl.jdbc.EmbedConnection);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.sameStartStopPosition();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openStoreCost(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.heap.HeapCostController;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.isMaterializable();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.jdbc.Driver20.boot(boolean, java.util.Properties);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.checkPosition(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaIndex(boolean, int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.yield();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openStoreCost(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.diag.LockTable.next();org.apache.derby.iapi.sql.conn.ConnectionUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nopProjectRestrict();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.setMaxFieldSize(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.ensurePredicateList(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getIndexedCols();org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.isCurrentPositionDeleted();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isExactTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.isActive();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.heap.HeapController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMinorVersion();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.readDbProperties(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerLock.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.toString();org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedRoutinePermsDescriptor(org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.open(boolean);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.JDBCBoot.boot(java.io.PrintStream, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrementUnion(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.open(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.index.B2IController;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.toString();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.createPage(int[], org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalPageOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(byte[]);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.iapi.types.SQLRef.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.VTIDeferModPolicy;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.addPage(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.hashCode();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createClob();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getMajorVersion();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.boot(boolean, java.util.Properties);org.apache.derby.impl.services.monitor.UpdateServiceProperties;0;0;0;0;0
org.apache.derby.diag.StatementCache.getString(int);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isDeleted();org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDate(java.lang.String, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateObject(int, java.lang.Object);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.setParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetSavepoints();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.isJoinPredicate();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.buildJoinOrder(boolean, int, int[], java.lang.String);org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRecordHandle(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.setLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.addPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.ruleBasedCostOptimizable(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropStatisticsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.readAllocPageHeader();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.isClosed();org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getNewNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.dropConglomerateDescriptorByUUID(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.findLogicalPage(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.getJBMSMinorVersionNumber();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRowLocationTemplate(org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.initializeFromClassPath(java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.finishExecuteMethod(boolean);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getNullIndexRow(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.diag.StatementDuration.setupColumn(int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.putAndsOnTop();org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.isWrapperFor(java.lang.Class<?>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setCharacterStream(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.fetchSet(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.findCheckpoint(long, org.apache.derby.impl.store.raw.log.FileLogger);org.apache.derby.impl.store.raw.log.FileLogger;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.available();org.apache.derby.iapi.services.io.LimitReader;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.isPersistent();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDouble(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.clearCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.jdbc.Driver20.stop();org.apache.derby.jdbc.AutoloadedDriver;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.isLeftmostLeaf();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.AccessPathImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.convertConstant(int, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.makePrivilegeInfo();org.apache.derby.impl.sql.compile.TablePrivilegesNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.genColumnInfo();org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markAllPredicatesQualifiers();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.DD_Version);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.decrementLevel(int);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.execute(java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.performMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.checkStatementValidity();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedColPermsDescriptor(org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentTransactionForRollback(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.jdbc.Driver20.getPropertyInfo(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.dumpTimeStats(java.lang.String, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex1Scan(java.lang.String, java.lang.String);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.genSQLJavaSQLTree();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.optimizeDomainValueConversion();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(java.lang.String, java.sql.NClob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.addResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openScanController(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.setString(java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameString(java.util.Hashtable, org.apache.derby.iapi.services.classfile.CONSTANT_Index_info);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecord(int, int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getDBName();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setLeftSibling(org.apache.derby.impl.store.access.btree.ControlRow);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentPreparedRecoveredXact(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalog(org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.loadClass(boolean, java.lang.String);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBinaryStream(int, java.io.InputStream, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getTypes(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.fetchMaxOnBTree(int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.index.B2IMaxScan;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBytes(byte[], java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getTime(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.setNames();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowed(int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.clearIdentity();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestSortAvoidancePath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RISetChecker.close();org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getDDLTableDescriptor();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getForUpdateColumnList();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.io.CPFile.getInputStream();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.createDuplicateStatement(java.sql.CallableStatement, java.sql.Connection);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.init(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.setupEncryptionEngines(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.types.DataType.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.checkLoaded(boolean, java.lang.String);org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.getTableProperties(java.util.Properties);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.SystemColumnImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.reprepare(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genEqualsFalseTree();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getEntry();org.apache.derby.impl.io.JarStorageFactory;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(boolean, int, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCMethodDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.objectifyStream(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.flushAll();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.discard(org.apache.derby.iapi.util.Matchable);org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.transactionIsIdle();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(int, java.util.Map);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.printErrorStack(java.lang.Throwable);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllTableDescriptorsByTableId(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.newRowLocationTemplate();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getEstimatedPageCount(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLWriteResultSet.makeDeferredSparseRow(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setRedundant();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setActiveState();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.flush(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindDateTimeArg(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getExecutionContext();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.cleanUp();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.sql.compile.UntypedNullConstantNode.convertDefaultNode(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans();org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.containsAllParameterNodes();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setEstimatedRowCount(long);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(java.io.PrintStream, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.modifyClasspath(java.lang.String);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(long);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysColumnNames();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysResultsetMode();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.getCreateAliasNode(char, java.lang.Boolean, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.Like;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isNotExists();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.compactRecord(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isUpdated();org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.removeOrphanedColumnChain(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.impl.store.raw.data.ReclaimSpace);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.printPosition(int, org.apache.derby.iapi.services.loader.GeneratedMethod, org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.XML.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getServiceList(java.lang.String);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.setArrayElement(int);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.JDBCBoot.boot(java.io.PrintStream, java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLWriteResultSet.getIndexNameFromCID(long);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.times(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberSortAvoidancePath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropViewDescriptor(org.apache.derby.iapi.sql.dictionary.ViewDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.cleanup();org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logField(int, int, java.io.OutputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBytes(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.resetProbeVariables();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setNullability(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.rejectParameters();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.columnAlwaysOrdered(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privGetJBMSLockOnDB();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.decrementLevel(int);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.performWork(boolean);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.ageOut();org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.mapSourceColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.toString();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.toString();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.CursorInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptors(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.openDroppedContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.LockingPolicy);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getForeignKeyConstraints(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.swap();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.binaryRelOpColRefsToString();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.isClosed();org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.isTemporary();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.findColumnName(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.shutdownDatabaseException();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.setNodeType(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(java.lang.String[]);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.assignableTo(java.lang.String);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(int, int, int, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromSubquery;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.openSortCostController(java.util.Properties);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.getContainerid();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int, java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isExactTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getLastPreallocPagenum();org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag();org.apache.derby.impl.store.raw.data.D_DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.isRedundantPredicate(int);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(short);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.CurrentOfNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getRowId(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdate(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.removeOptimizable(int);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.needCommit();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.appendResultColumns(boolean, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.reopen();org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getAtMostOneResultColumn(java.lang.String, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateExpressionOperand(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getCreateIndexProperties(int);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.LeafControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnReferenceMap();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.iapi.store.access.DiskHashtable.nextElement();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.getTraceString();org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int, int, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getStreamStorableColIds(int);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(boolean, int, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.isUnaryMinusOrPlusWithParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.treePrint(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.add(java.io.InputStream, java.lang.String);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restorePredicates();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.UpdateServiceProperties.update();org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getLastPageNumber(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finishAggregation(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.jdbc.EmbedSQLWarning;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushThis();org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJSQLType();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findAllocPageForAdd(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.init(boolean, boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(boolean, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.setOutParameter(int, int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyCreateConstraintColumnList(org.apache.derby.impl.sql.compile.TableElementList);org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.rejectParameter();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement.checkIfClosed();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.rejectParameters();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.findCached(java.lang.Object);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.execute();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.UserType.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.rowDeleted();org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.changeToCorrespondingExpressionType();org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getRef(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.unlockRowAfterRead(boolean, boolean, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.createContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(boolean, boolean, org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.MaterializedResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(int, java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.doIt(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.getTypeServices();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.getObject();org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.toString();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionIdString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.resetPageNumber(long);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.toString();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(boolean, boolean);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(short);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.delete(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ReclaimSpace;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.find(java.lang.Object);org.apache.derby.impl.services.cache.ClockFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.init(boolean, boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getFirstRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.getSQLTypeName();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.getDeferredIndexRowTemplate(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.optimize();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.handlePreparedXacts(org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromLog(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setSQLXML(int, java.sql.SQLXML);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getOptPredicate(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.startOptimizing(org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(int);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.close();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNodeVector.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateStartStopKey(boolean, boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.generateHolder(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(boolean, java.lang.String);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.setReadOnlyConnection(boolean, boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptorsScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.fillIndex(int, long, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.getJarName();org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.stringCompare(org.apache.derby.iapi.types.SQLChar, org.apache.derby.iapi.types.SQLChar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropJarConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.JarUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.getClientInfo();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesAndCommit();org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getMetaData();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.UTF8Reader.fillBuffer();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.close();org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.isInstanceOf(java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findLastAllocPage(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.bindOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.XML.estimateMemoryUsage();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegationNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IMaxScan.close();org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(boolean[], int, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setInt(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getExpressionOperand(int, int, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.findLogicalPage(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.addOrderByColumn(org.apache.derby.impl.sql.compile.OrderByColumn);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.RemapCRsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.toString();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScanInfo.getAllScanInfo(java.util.Properties);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.set(int, int, int);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSchemaAuth(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(java.sql.Statement);org.apache.derby.jdbc.XAStatementControl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.logCreateContainerInfo();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearResultSet();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.bind();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(boolean, java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.remove(org.apache.derby.iapi.services.cache.Cacheable);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getForUpdateColumnList();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.makeConstantAction();org.apache.derby.impl.sql.compile.PrivilegeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.unlink(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.forget(javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewAggregatorResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.catalog.types.DecimalTypeIdImpl.readExternal(java.io.ObjectInput);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int, java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.jdbc.Driver20.getPropertyInfo(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.addNewNodes();org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.MemberTable.addEntry(org.apache.derby.iapi.services.classfile.ClassMember);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.setAfterResultSet(org.apache.derby.iapi.sql.execute.CursorResultSet);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getIsOverflow(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStartKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.getStorageFactoryInstance(boolean, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AllResultColumn.cloneMe();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.feasibleJoinStrategy(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.generateParameterValueSet(org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.xorReferencedSet(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMinorVersion();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getFromTableByResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.setupEncryptionEngines(boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.slotTableToString();org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getPreviousRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.DefaultNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.writePage(boolean, byte[], long);org.apache.derby.impl.store.raw.data.RAFContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getCursorName();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableActions.doAction(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getSubString(int, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordHeaderOnDemand(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerOperation;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDate(int, java.sql.Date, java.util.Calendar);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.hasPreparedXact();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getTrueNode();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.renameClassElements(java.util.Hashtable, java.util.Hashtable);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.readExtent(int);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.rejectParameters();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStoredDependency(org.apache.derby.iapi.sql.dictionary.DependencyDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.Timeout.dumpLock();org.apache.derby.impl.services.locks.TableNameInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLockingRR.unlockRecordAfterRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getArrayElement(int);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.bootModule(boolean, java.lang.Object, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.deleteRow();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropAllColumnDefaults(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findModule(java.lang.Object, java.lang.String, java.lang.String);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getSavePointPosition(boolean, java.lang.Object, java.lang.String);org.apache.derby.impl.store.raw.xact.SavePoint;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(java.lang.String, java.sql.Clob);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.NOPStatementNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(int, int, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getInternalTransaction();org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.canSupport(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOverflowAtSlot(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getClasses(java.util.Enumeration, java.util.Enumeration);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.getUnfilledPageNumber(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getScale(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.setWidth(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setDefaultLockingPolicy(org.apache.derby.iapi.store.raw.LockingPolicy);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.iHoldTheUpdateLock(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.setDeleteStatus(boolean, int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.getRow();org.apache.derby.impl.load.ImportReadData;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.requestCompatible(java.lang.Object, java.lang.Object);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(long);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setRedundant();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement40.isWrapperFor(java.lang.Class<?>);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean);org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateIndex(int, long, long[], org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.printSubNodes(int);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.rollback(javax.transaction.xa.Xid);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.StatementUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.multiStageMerge(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChildPageno();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.unlockGroup(java.lang.Object, org.apache.derby.iapi.util.Matchable, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.getFileFormat();org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.countConstraints(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SqlXmlUtil.evalXQExpression(boolean, int[], org.apache.derby.iapi.types.XMLDataValue);org.apache.derby.iapi.types.XML;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking2.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyRow();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setFloat(float, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getExpressionType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.getMatchingNationalCharTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissionsCache();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeResultSets();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactId.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.rollback(javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.toString();org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkStatementValidity(java.sql.SQLException);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.UnionResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getQueryPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getPrimitiveSignature(boolean);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.stopOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.mapTableAsVTI(java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.equalTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.LeafControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.stubbify(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeOptionalDataToBuffer(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.printRecursive(int, org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.catalog.types.RoutineAliasInfo.readExternal(java.io.ObjectInput);org.apache.derby.catalog.types.MethodAliasInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.add(java.io.InputStream, java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(java.io.Reader, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericStatementContext.getSQLAllowed();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.insertIntoVTI(java.sql.ResultSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.OrNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(java.lang.String, org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.DataType.isNotNull();org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.next();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsIndexes(int[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeController;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getNullIndexRow(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.generateParameterValueSet(org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheInit();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.exportNames(java.lang.String[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.close();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isSigned(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.reopenCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.DeleteConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.verifyTargetProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.reclaim_deleted_rows(long, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.writePage(boolean, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderedColumnList.getColumnOrdering();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableName();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.resetPosition(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DropOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.trackUnfilledPage(boolean, long);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.isPoolable();org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getJarReader();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.addCursorPositionCode();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.jdbc.XATransactionState.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.openScan(boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.index.B2IForwardScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.getCreateAliasNode(char, java.lang.Boolean, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.rememberCursor(org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.writeExceptions();org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.buildTableNumList(boolean, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int, int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown();org.apache.derby.impl.services.monitor.AntiGC;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.findGroupingColumn(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.validateChecksum(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.impl.sql.compile.CharConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getObject(java.lang.String, java.util.Map);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.UpdateOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(boolean, int, org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.services.reflect.LoadedGeneratedClass.newInstance(org.apache.derby.iapi.services.context.Context);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setClob(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.substring(int, org.apache.derby.iapi.types.ConcatableDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyListAndObjects();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.blockBackup(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.parseCheckConstraint(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getURL(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNormalizeResultSetNode(boolean, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.commitIfNeeded();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getParameterValueSet();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.getContainerId();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.upCast(java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScanInfo.getAllScanInfo(java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNString(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.skipChildren(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getConglomerateUUID(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(long, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.updateBestPlanMaps(java.lang.Object, short);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsToExpressions();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.closeStream();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.dumpAllocationCache();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.checkSufficientData();org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.parseDefault(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(boolean, boolean, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.ClassLoaderLock.unlockEvent(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.removeJoinColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.setPageStatus(int, long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DropTriggerConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.UserType.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.diag.Performance;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.removeUpdateTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.fetchFieldFromSlot(int, int, java.lang.Object);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.boot(boolean, java.util.Properties);org.apache.derby.impl.store.access.RAMTransaction;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.setUUIDOfThePassedDescriptor(org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFileOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.latchPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.DataType.setObjectForCast(boolean, java.lang.Object, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkIsBoolean();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getDropSchemaName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConglomerateDescriptor(long, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.updateAICounters();org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createClob();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(boolean, int, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getSubList(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.equals(java.lang.Object);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics.setNames();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.commit(boolean, javax.transaction.xa.Xid);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getPropertyDefault(java.lang.String);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.SystemColumnImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getFloat(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(boolean, int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.trace(double, int, int, int, java.lang.Object);org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getMergedRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(int, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.doPreAllocatePages(int, long);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.statementToString();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.runFkChecker(boolean);org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.updateTargetLockMode();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getArrayElement(int);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.encryptContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setAsciiStream(int, java.io.InputStream, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkSavepoint();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateTriggerDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.checkExecStatus();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.handleException(java.lang.Throwable);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.setLimit(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Limit);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.addFromTable(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerActionOnCommit.equals(java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.comparable(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.findLogicalPage(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.getLanguageConnectionContext(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setLong(int, long);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getBytes();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(java.lang.Object);org.apache.derby.impl.services.bytecode.BCMethodCaller;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition(org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.getConnectionSynchronization();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.notifyModifyClasspath(java.lang.String);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.setRowLocationArray(int, org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.expandAll(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.doShrink(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.getConnection(boolean, java.lang.String, java.lang.String);org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.defragmentConglomerate(boolean, int, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.OIDTDCacheable.clearIdentity();org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setRecordOffset(int, int);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.generatedColumnPositionsArray();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getLong();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genEqualsFalseTree();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStreamInternal(boolean, int, java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.ConstraintInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.DataType.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.getCharacterStream(long, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.containsAllConstantNodes();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getNewJoinCondition(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.cloneMe();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.resetPosition(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.setClause(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(boolean[], int, org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntryBackward(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateOrDelete(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedBinaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isOrderedResult(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_setNullability(boolean, int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getForeignKeys(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.FromSubquery;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.setSharedState(java.io.Serializable, java.lang.String);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantNodeLength();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.open();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootAuthenticationService(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBoolean(boolean, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLWriteResultSet.makeDeferredSparseRow(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.CreateConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setDeleteStatus(boolean, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getProperties();org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.prepareTransaction();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewExpressionResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.addAttribute(java.lang.String, org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNull(java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.encryptContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.clearContextInError();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.load.ColumnInfo.initializeColumnInfo(java.lang.String);org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.findTransactionContextByGlobalId(org.apache.derby.impl.store.raw.xact.GlobalXactId);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.shrinkFor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.removeDupColumns();org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.removeAttributes();org.apache.derby.iapi.services.classfile.AttributeEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.use(boolean, boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.processCodeAttribute(org.apache.derby.iapi.services.classfile.AttributeEntry, org.apache.derby.iapi.services.classfile.ClassMember);org.apache.derby.iapi.services.classfile.AttributeEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.preAllocatePage(int, int, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDouble(double, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.runFkChecker(boolean);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.openContainerAndDoIt(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBoolean(boolean, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.SystemColumnImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.jdbc.ReaderToAscii.read(byte[], int, int);org.apache.derby.impl.jdbc.UTF8Reader;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement30.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int, long);org.apache.derby.impl.sql.execute.InsertConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nopProjectRestrict();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.getAction();org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getTypeServices();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(java.lang.Object, java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeInsert();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getPrimitiveSignature(boolean);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.property.PropertyValidation.validateSingleProperty(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getContainerProperties(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.saveScanPositions(org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable();org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.addPropertySetNotification(org.apache.derby.iapi.services.property.PropertySetCallback, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToExistsJoin(boolean, int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection40.addStatementEventListener(javax.sql.StatementEventListener);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.PageKey.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBuiltinSchemas();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.prepareSPS(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableArrayHolder.readExternal(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewAggregatorResultColumn(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.getHours(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getStatementContext();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.compressContainer();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.isPotentialService(org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMinorVersion();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getRightPredicateList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.conn.ConnectionUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowFromHashTable(int);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.equals(java.lang.Object);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getTableNumbers();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.throwNoMethodFound(java.lang.String, java.lang.String[], java.lang.String[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.openCore();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_row_for_export();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.checkRowOrder(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.finish();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(java.lang.Throwable, org.apache.derby.iapi.sql.conn.StatementContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addMember(int, java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValue(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.fixLengths(int, int, int, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getSpecialTriggerVTITableName(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.nodeName(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setScale(int, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getCursor();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.allExpressionsAreColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.transfer(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.ConstraintInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.group();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_2_system_procedures(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.prepareTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.reprepare(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.findContainerForRedoRecovery(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.refreshRow();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getDefaultBulkFetch();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.replace(boolean, java.io.InputStream, java.lang.String, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.execute(boolean, long, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.compile.CursorNode;0;0;0;0;0
org.apache.derby.impl.services.locks.D_Lock.diag();org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerSortAvoidancePath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getCharacterStream(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getOriginalSQL();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.writeColumnDefinitionOptionally(java.lang.String[], java.lang.String[]);org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.modifyAccessPaths();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getTableName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setPoolable(boolean);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getString(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.setFetchDirection(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, int, long);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertLongColumn(byte, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.LongColumnException);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.getLock(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ErrorStringBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.parseDate(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.makeSystemCatalog(org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBootParameter(boolean, java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.setParameterDescriptor(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.checkInvalidTriggerReference(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean, boolean, int, java.lang.String, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateSchemaNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.end(int, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk, org.apache.derby.impl.services.bytecode.Type[]);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getArray(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getUnicodeStream(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.bootDataDictionary(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getLogInstant();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(boolean, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.StreamFileContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markInitialSize();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.run();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.getInternalTablePropertySet(java.util.Properties);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(boolean, boolean, org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParameterSQLType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.openCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedRoutinePermsDescriptor(org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor);org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexConglomerate(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SpecialFunctionNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setCursorName(java.lang.String);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getDefaultBulkFetch();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setParentResultSet(java.lang.String, org.apache.derby.iapi.sql.execute.TemporaryRowHolder);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.load.ExportResultSetForObject.getMetaDataInfo();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.containsAllResultColumn();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutineList(char, java.lang.String, java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyInto(int, int, int, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.equalsComparisonWithConstantExpression(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptorScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.getConnection(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeys(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRecordHandleAndSetLocks(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.iapi.services.loader.ClassFactoryContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.store.raw.data.RAFContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.reserveSpaceForChecksum(int, long, long);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.projectResultColumns();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.allSamePrecendence(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.checkSlotTable(java.io.PrintStream);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByPosition(int, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferAllPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.stop();org.apache.derby.iapi.services.diag.Performance;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.InsertResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.getResult();org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.compactRecord(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genIsNullTree();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.setNullParameterInfo(java.lang.String[]);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.create(int, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantConstraints(boolean, boolean[], int, int[], org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.CardinalityCounter;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setValue(double);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(int, long, long, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.putOptimizableEqualityPredicateFirst(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.LOJgetReferencedTables(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.getNewNullResultExpression();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.updateSYSSTATEMENTS(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.setEstimatedRowCount(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateChecksum();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.createDuplicateStatement(java.sql.CallableStatement, java.sql.Connection);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(boolean, boolean, int, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.toString();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeInserter.close();org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.initFromContext(org.apache.derby.iapi.services.context.Context);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(int, int, java.util.Properties, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ContainerOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageIdAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(char, java.lang.String, java.lang.String);org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.getRowPositionFromRowLocation(org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.D_BTreeController.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.objectifyStreamingColumns();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.bootModule(boolean, java.lang.Object, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.finishBindExpr();org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.init(int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.OpenConglomerate);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(java.io.Reader, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.isRedundantPredicate(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.pullVirtualIsReferenced();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.init(boolean, boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.hashCode();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getMergedRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.createPage(int[], org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getUserPageWait(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.drop(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedSavepoint30.getSavepointId();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getMethodParameterClasses();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.addWaiter(java.util.List, org.apache.derby.impl.services.locks.Lock, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.reopen();org.apache.derby.impl.sql.execute.TriggerInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferences();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInsert(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.updateVTI(java.sql.ResultSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.isAtomic();org.apache.derby.impl.sql.compile.HasNodeVisitor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCJava.type(java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.releaseResource(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.removePermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(int, int, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.RefTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.io.CPFile.getURL();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getReservedCount(int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBinaryStream(int, java.io.InputStream, long);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.constantColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getDouble();org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealStatement();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.openIndexScanController(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.adjustVirtualColumnIds(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.add(java.io.InputStream);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.getDeallocLock(boolean, boolean, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindParameter(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(long, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setTransactionId(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.BeginXact;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.commitIfAutoCommit();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.io.JarDBFile.getURL();org.apache.derby.impl.io.JarStorageFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readPageHeader();org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.IndexInfoImpl.getBaseColumnPosition(int);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.compactColumns(boolean, boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initSystemIndexVariables(int, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.trackUnfilledPage(boolean, long);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.toString();org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getSpecialTriggerVTITableName(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.plus(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromProp(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.trimBind();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAllocPage(long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.clean(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(long, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.CacheableConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.stringCompare(org.apache.derby.iapi.types.SQLChar, org.apache.derby.iapi.types.SQLChar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.getBytes(int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSortInfo.getAllSortInfo(java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.makePrivilegeInfo();org.apache.derby.impl.sql.compile.RoutineDesignator;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setInt(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.useStream(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.setLevel(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateFieldAtSlot(int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(long);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.restoreContextStack();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createArrayOf(java.lang.Object[], java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newRoutinePermsDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.AliasDescriptor);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(boolean, int, java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.fetchMaxOnBTree(int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeMaxScan;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptor(long);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.releaseSavePoint(java.lang.Object, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.removeUpdateTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageHeader();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.flushAll();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(boolean, int, org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(java.io.File, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getDominantTypeServices();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.putField(java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.DataType.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getContainerProperties(java.util.Properties);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.addRCForRID();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.genSQLJavaSQLTrees();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.ContainerLocking3.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isExactTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.forUpdate();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.ageOut();org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.openContainerAndDoIt(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getIndexedCols();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getSQLstring();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.forUpdate();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.processCodeAttribute(org.apache.derby.iapi.services.classfile.AttributeEntry, org.apache.derby.iapi.services.classfile.ClassMember);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getBaseColumnNode();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getLastRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PhysicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getBoolean();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertConstantAction.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getSQLXML(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.doPreAllocatePages(int, long);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.truncate(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getDate(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJSQLType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection.setState(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.verifyKey(boolean, java.util.Properties, org.apache.derby.io.StorageFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResults(int, java.sql.ResultSet[][]);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createBlob();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.referencesSessionSchema(org.apache.derby.impl.sql.compile.QueryTreeNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getSQLXML(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.optimize();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.sortRefs(boolean, java.util.Vector);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.catalog.IndexInfoImpl.getIndexName();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setSingleExecution();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameTableBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.getShrinkKey(int, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealJoinResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(byte, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.toString();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.impl.sql.compile.TableElementList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.addField(int, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNCharacterStream(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getRef(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScanFromClose(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResults(int, java.sql.ResultSet[][]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.getNextParentRow();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.getScale(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJgetNPReferencedTables(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.diag.SpaceTable.getConglomInfo(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.getFetchFromRowLocationCost(int, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getForUpdateColumnList();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.setWidth(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(boolean, boolean, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setNullability(boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.splitZeroStack(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.sortRequired(org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getLanguageConnection();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_split(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getParamColumnTypes(org.apache.derby.iapi.types.DataTypeDescriptor[], org.apache.derby.impl.sql.compile.RowResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createStruct(java.lang.Object[], java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.findUserTransaction(java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.impl.store.raw.xact.XactContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.oneRowRightSide(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.getFromList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.getRecordHandle();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredPage);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.toString();org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.updateRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.types.SQLInteger;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(boolean[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.setRawStoreFactory(org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.optimize();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.throwReliabilityException(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.run();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(float);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getClob(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.conn.TempTableInfo.matches(java.lang.String);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.syncLogAccessFile();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.setCacheHolder(org.apache.derby.iapi.services.cache.Cacheable);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdateField(int, int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterMetaData40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkClobConditions(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.putOptimizableEqualityPredicateFirst(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.CreateIndexConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.addDeclaredGlobalTempTable(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.hasNonBlankChars(int, int, java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.validate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setIndexConglomerateNumber(long);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.legalJoinOrder(int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.dictionary.ViewDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.run();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.services.io.FileUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getExposedTableName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrement(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.UpdateConstantAction;0;0;0;0;0
org.apache.derby.impl.services.cache.CachedItem.remove(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFileOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeInserter.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateFieldOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyColumnsToNewList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.isPoolable();org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.jdbc.XATransactionState.end(boolean, int, org.apache.derby.jdbc.EmbedXAResource);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getCharacterStream(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(long);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeViewTriggerDependenciesOnPrivileges(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.StatementPermission;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.getEstimatedMemUsage(java.lang.Object[]);org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getAbsoluteRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointArg(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getStatisticsDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ValueRow.getClone(org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTime(java.lang.String, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.defaultTypeIsValid(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.nationalGetTime(java.util.Calendar);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.selectivityForConglomerate(int, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking1.lockRecordForRead(boolean, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.xact.RowLocking2;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTypeId();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getStrings();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.update();org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(int, java.lang.String, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.descriptorExistsException(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privGetJBMSLockOnDB();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getEstimatedPageCount(int);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.executeStatementName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointInRFR(long, org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableName.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.writeControlFile(long, org.apache.derby.io.StorageFile);org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.getNewCurrentConnectionHandle();org.apache.derby.jdbc.Driver20;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.performTransitiveClosure(int);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.writeColumnDefinitionOptionally(java.lang.String[], java.lang.String[]);org.apache.derby.impl.load.ExportWriteDataAbstract;0;0;0;0;0
org.apache.derby.impl.services.locks.D_ActiveLock.diag();org.apache.derby.impl.services.locks.ActiveLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.normalize(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(boolean, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.canWeCacheResults();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInsert(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.optimize();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.newInstanceFromIdentifier(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getString();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getFloat();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getContextManager();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.getPooledConnection();org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markAllUnreferenced();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaHeap(java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getInt(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.markOrderingDependent();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowChanger(int[], org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.finish();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.removeOldVersionOfContainers(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.MiscellaneousStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCJava.type(java.lang.String);org.apache.derby.impl.services.bytecode.VMTypeIdCacheable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.shrinkFor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BranchRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.add(java.io.InputStream, java.lang.String);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getMinorVersion();org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.compile.OptimizerFactoryImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.getPageStatus(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.setWidth(boolean, int, int);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantConstraints(boolean, boolean[], int, int[], org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.usePageBuffer(byte[]);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.uniqueColumnPositionArray(int[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.delete();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.getString();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildColumnList();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBlob(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.useContainer();org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.userTypeStorable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.mod(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnDefault(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(int, int, int, org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getTypeServices();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.setBeforeFirstRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalPageOperation.generateUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.UserType.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(java.lang.Object, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.deleteRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getBytes();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setDDLTableDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestAccessPath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setValue(double);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.LogicalUndoable, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.generateDataValue(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableHashtable.getInt(java.lang.Object);org.apache.derby.iapi.services.io.FormatableIntHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.truncate(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.RAFContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.pullVirtualIsReferenced();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.doDelete();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockControl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBytes(byte[], int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowFromSource();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.firstLogInstant();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateLockGranularity(char, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selfComparison(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromProp(java.util.Properties);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compressSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setResultSetHoldability(boolean);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.Driver40.boot(boolean, java.util.Properties);org.apache.derby.jdbc.Driver20;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerActionOnCommit.hashCode();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.SumAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.clearTableNames();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.setSavepoint(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.moveToInsertRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.put(boolean, java.lang.Object[]);org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.cleanUp();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.openIndexes(int);org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.isExactTypeAndLengthMatch(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getForeignKeyConstraints(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.propertyDefaultIsVisible(java.lang.String);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.memory.LowMemory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.times(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.startModule(boolean, java.lang.Object, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(boolean, boolean, boolean, boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableName.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericRIChecker.getScanController(long, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.markUpdatableByCursor(java.util.Vector);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.removePage(org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.getTypeId();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressionsWithTables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.UnionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrict();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.jdbc.ResourceAdapterImpl.stop();org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getMaximumColumnSize();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSYSCOLPERMSforAddColumnToUserTable(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getParameterValueSet();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.compressContainer(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getTableDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptorIndex1Scan(java.lang.String, java.lang.String);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.feasible(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnType(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateBigDecimal(java.lang.String, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.allSamePrecendence(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(java.lang.String, org.apache.derby.iapi.services.stream.PrintWriterGetHeader);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkHoldCursors(boolean, int);org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.findAndAssumeTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantTriggers(int, int[], org.apache.derby.iapi.sql.dictionary.GenericDescriptorList);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(java.lang.String, java.lang.String[]);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SPSNameCacheable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRowListImpl(boolean, org.apache.derby.iapi.sql.execute.ExecRow[], org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.cast(java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getTransactionId();org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.setCalendar(java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkRollback();org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.flushContainer();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(java.lang.Object);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.getNumberOfControlRowColumns();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.makeConstantAction();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.populateSYSDUMMY1(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getMaximumWidth();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(java.lang.String);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(java.io.Reader, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.startOptimizing(org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNCharacterStream(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setPageArray(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getFirstRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.performMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.makeConstantAction();org.apache.derby.impl.sql.compile.PrivilegeNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.LoadedGeneratedClass.newInstance(org.apache.derby.iapi.services.context.Context);org.apache.derby.iapi.services.loader.ClassInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.rememberAsBest(int, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapPostCommit.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.open(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.recover(int);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.times(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setSQLXML(int, java.sql.SQLXML);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.removePage(org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNString(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.prepareCommit(int);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getFirstPage();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getSortedByPosition();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterClassName(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(int, java.util.Map);org.apache.derby.impl.jdbc.EmbedCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.mod(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int, java.io.Reader, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.addBatch();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.setProperties(java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnConstraint(boolean, java.lang.String, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.reportError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropDeclaredGlobalTempTable(java.lang.String);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.toString();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNString(int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.getPageArray();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.length();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.eliminateNots(boolean);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdatableByCursor();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.VTIResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.moveRecordForCompressAtSlot(int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle[], org.apache.derby.iapi.store.raw.RecordHandle[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getVersion();org.apache.derby.impl.store.access.StorableFormatId;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.drop(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findAllocPageForAdd(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropAllColumnDefaults(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.start(int, javax.transaction.xa.Xid);org.apache.derby.iapi.store.access.xa.XAXactId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.toString();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.fetchNumFieldsAtSlot(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getNewSubMethod(boolean, java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getByte(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkVersion(int, int, java.lang.String);org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(java.lang.String[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.findParentResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getArray(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.toString();org.apache.derby.impl.sql.execute.ConstraintInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.putAndsOnTop();org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.setHoldability(int);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.searchLeft(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRecordHandleAndSetLocks(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.setCacheHolder(org.apache.derby.iapi.services.cache.Cacheable);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.D_FlushedScan.diag();org.apache.derby.impl.store.raw.log.FlushedScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.decrementLevel(int);org.apache.derby.impl.sql.compile.ProjectRestrictNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.makeAllocPage(int, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.getFromTableByResultColumn(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowFromRowSource();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyRow();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.setURL(java.lang.String, java.net.URL);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlatch(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableHashtable.getLong(java.lang.Object);org.apache.derby.iapi.services.io.FormatableLongHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setByte(byte, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.unlock(int, org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.addPermittedColumns(boolean, java.lang.String, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.setBaseCC(org.apache.derby.iapi.store.access.ConglomerateController);org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLQuery(org.apache.derby.iapi.types.SqlXmlUtil, org.apache.derby.iapi.types.XMLDataValue);org.apache.derby.iapi.types.SqlXmlUtil;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(int, java.lang.Object, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConglomerateDescriptor(long, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.setArrays(int, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bind(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.getColumnName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.blockBackupBlockingOperations(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.releaseSavepoint(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameIndex(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.execute();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.getActivationClass();org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaxMinAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.updateTargetLockMode();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.readExtent(int);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintTableDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBoolean(boolean, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.DataType.throwLangSetMismatch(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.commitIfNeeded();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowNumber();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.getNumberInUse();org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.unlockRowAfterRead(boolean, boolean, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.btree.D_BTreeController.init(java.lang.Object);org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addProviderToAuxiliaryList(org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.depend.ProviderList;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.classFromIdentifier(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.estimateCost(double, org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.OrderedColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOrderableVariantType(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.findNextRecordById(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setForCreateTable();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.implicitVarcharComparison();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptors(long);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildColumnList();org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.throwExceptionIfSQLSavepointNotAllowed(java.lang.Object);org.apache.derby.impl.store.raw.xact.SavePoint;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.deadlockCount(int);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pop();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.mapSourceColumns();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.changeToCNF(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getTableName();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.logMsg(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.isQualifier(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.transferDataValues(org.apache.derby.iapi.sql.ParameterValueSet);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.add(boolean, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.popStack();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.close();org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogRecord.skipLoggable();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.btree.BTreeController;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.toString();org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.readApplicationProperties();org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.checkObject(org.apache.derby.iapi.services.io.Formatable);org.apache.derby.iapi.services.io.FormatIdInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getOptionalData();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.removePushedCode(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.sql.Clob, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateStartStopKey(boolean, boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getEmptyExecRow(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getCompactRow(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegation(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getPageStatus(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.rollback(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedSavepoint30;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking1.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.index.B2IRowLocking2;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ColumnInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.chainNewAllocPage(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.dup();org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropViewConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.addScopedPredicatesToList(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.setProperty(boolean, java.io.Serializable, java.lang.String);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.initialize();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.IndexConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resetToSourceRC();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionDelete(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.validateApplyAndMap(boolean, java.io.Serializable, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.validateChecksum(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLSerialize();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.unlockGroup(java.lang.Object, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.delete(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.changeBootPassword(java.lang.String, java.util.Properties, org.apache.derby.iapi.services.crypto.CipherProvider);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.sortRequired(org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.run();org.apache.derby.iapi.services.io.FileUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.catalog.DDdependableFinder;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.getDescriptor();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropDependentsStoredDependencies(boolean, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.timestampAdd(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.doIns(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUserName();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.addXmlOpMethodParams(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.toString();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setClause(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.generatedColumnPositionsArray();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU1(int, short);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.waitUntilQueueIsEmpty();org.apache.derby.impl.services.daemon.ServiceRecord;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(char, java.lang.String, java.lang.String);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropAllDeclaredGlobalTempTables();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageIdAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getPrimaryKey();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedSavepoint30.sameConnection(org.apache.derby.impl.jdbc.EmbedConnection);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeEndMarker(int);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.compareWithKnownConstant(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(boolean, int, java.lang.String);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.getFormatId();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getYear(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getMetaData();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.saveLastCusorKey(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bind(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setCharacterStream(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.times(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.activationKind();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowFromHashTable(int);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.access.sort.NodeAllocator.freeNode(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int, int[], org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.setMessageLocale(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getDatabaseProperty(java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.optimize();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.setValue(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.cast(java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.search(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFile.readData(java.io.InputStream, java.lang.String, java.util.zip.ZipEntry);org.apache.derby.iapi.services.io.InputStreamUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.readPage(byte[], long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllConglomerateDescriptorsByNumber(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.io.DirStorageFactory.newPersistentFile(java.lang.String);org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(org.apache.derby.iapi.services.compiler.LocalField);org.apache.derby.impl.services.bytecode.BCLocalField;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.setColumnListToNotNull(org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStreamInternal(boolean, int, java.io.Reader, long);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag();org.apache.derby.impl.store.raw.data.RecordId;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getRowFromResultSet(boolean);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setUnicodeStream(int, int, java.io.InputStream);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.setEstimatedRowCount(long);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.changeToCorrespondingExpressionType();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.toString();org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.guaranteeColumnName();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setActiveState();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnType(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.genSQLJavaSQLTrees();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeSubqueryNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLSerialize();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getStreamStorableColIds(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.getScanCost(boolean, boolean, int, int, int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.StoreCostResult, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.encrypt(boolean, byte[], byte[], int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCJava.vmType(org.apache.derby.impl.services.bytecode.BCMethodDescriptor);org.apache.derby.impl.services.bytecode.VMTypeIdCacheable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs2(boolean, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getParentPageNumber();org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.updateTargetLockMode();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.getSpaceInfo();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.openRealConnection();org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genEqualsFalseTree();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getFirstRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.reopen();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.close();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.mod(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.remove(java.lang.Object);org.apache.derby.iapi.store.access.DiskHashtable;0;0;0;0;0
org.apache.derby.iapi.types.ReaderToUTF8Stream.read();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getAllPageCounts(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.adjustVirtualColumnIds(int);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int, java.sql.NClob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowFromTempTable();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.categorize();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.rewindJoinOrder();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SyncOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit;0;0;0;0;0
org.apache.derby.impl.store.access.CacheLock.unlockEvent(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTimestamp(java.lang.String, java.sql.Timestamp, java.util.Calendar);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.constantColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.setValue(java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addIndexReference(int, int, int);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.xorReferencedSet(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarchar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.tempTableSchemaNameCheck(java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.switchLogFile();org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.isSingleExecution();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getShort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.io.DirFile4.releaseExclusiveFileLock();org.apache.derby.impl.io.DirFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(boolean, boolean, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.userOnAccessList(java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getDefaultBulkFetch();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.setNodeType(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.defragmentConglomerate(boolean, int, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.doProjection();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getMaxColumnWidth(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNodeVector.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getQualifiedName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDataDictionary();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.getSQLAllowedInProcedure();org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowFromResultSet();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.release(org.apache.derby.iapi.services.cache.Cacheable);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkRollback();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DecryptInputStream.fillByteHolder();org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.createOutStreams();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getRelativeName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.hashCode();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForSet(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.iapi.types.XML.restoreToNull();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.letGo(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.genScalarAggregateResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.popFrontWaiter(java.util.List, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setRightSibling(org.apache.derby.impl.store.access.btree.ControlRow);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.isMultipleDeletePathsExist();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(java.lang.String, java.sql.ResultSetMetaData, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(long);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassEnumeration.findMethodReferences(java.util.Enumeration, java.util.HashSet);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.unlockGroup(java.lang.Object, org.apache.derby.iapi.util.Matchable, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getTransactionController();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(double);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropAllDeclaredGlobalTempTables();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_setNullability(boolean, int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.authenticateUser(java.lang.String, java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(boolean, boolean, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getLastPreallocPagenum();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Deadlock;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.verifyAndGetUniqueNames();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.updateTargetLockMode();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.complete(int, int, org.apache.derby.iapi.services.classfile.ClassHolder, org.apache.derby.iapi.services.classfile.ClassMember, org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.allocPage(long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassData(boolean, java.io.InputStream, java.lang.String, java.util.zip.ZipEntry);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.init(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.BTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.hasActiveUpdateTransaction();org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.isDirty();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.timestampDiff(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.setValue(double);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.checkTopPredicatesForEqualsConditions(boolean, boolean[], int, int[], org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.diag.LockTable.next();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getNestedConnection(boolean);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.add(java.io.InputStream, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.cleanUp();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.like(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getEstimatedPageCount(int, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.internalNonDeletedRecordCount();org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.uniqueJoin(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateNOPProjectRestrict();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.bind();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nopProjection(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkUpdatableCursor(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(java.lang.String[]);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.load.ExportAbstract.resultSetForEntity();org.apache.derby.impl.load.ExportResultSetForObject;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.initializeFromClassPath(java.lang.String);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.equalsComparisonWithConstantExpression(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.addUpdateTransaction(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.estimateCost(double, org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.getTablesReferenced();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.generateDataValue(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.lockAnObject(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.adjustNumberOfRowsReturned(org.apache.derby.iapi.sql.compile.CostEstimate);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissionsCache();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.backupContainer(java.lang.String);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getObject();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.startNestedTopTransaction();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.setObjectForCast(boolean, java.lang.Object, java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.getAction();org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllDependencyDescriptorsList();org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.XML.readExternal(java.io.ObjectInput);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.getShrinkKey(int, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.encryptContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.openCore();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeResultDescriptors();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductVersion();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.dropAllJDBCMetaDataSPSes();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getFirstLogInstant();org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getInt();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.CLOBTypeCompiler.getCastToCharWidth(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource, org.apache.derby.impl.store.access.heap.Heap);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.getClasspath(java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.group();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.multiStageMerge(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int, java.sql.NClob);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(int, int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromSubquery;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getExecutionContext();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getObject(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.load(org.apache.derby.iapi.store.access.RowSource);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.AddJarConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.JarUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.singleFromBaseTable(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.CachedStatement.setIdentity(java.lang.Object);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorsScan(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.findPublicMethod(boolean, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeInserter.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.ExternalSortFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bind(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.execute.TablePrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(int[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.selfComparison(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getMaxColumnID();org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRecordHandleAndSetLocks(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.setField(org.apache.derby.iapi.services.compiler.LocalField);org.apache.derby.impl.services.bytecode.BCLocalField;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateNewAutoincrementColumn(java.lang.String, long, long, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.autoincrementCreateCounter(int, java.lang.Long, java.lang.String, java.lang.String, java.lang.String, long);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.setNumSubqueries();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkColumnUpdateability(java.lang.String, java.lang.String[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.UserType.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.preprocessSourceRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getPrimitiveSignature(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.handlePreparedXacts(org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nameAllResultColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.bind();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.truncate(long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow(byte, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.DataType.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.deleteLeftmost(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.isInUse();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getPreviousRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(boolean, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScanRowSource.getNextRowFromRowSource();org.apache.derby.impl.store.access.sort.MergeScan;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getObject(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassFormatOutput.getData();org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.openScanController(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootResourceAdapter(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getFields();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.openCore();org.apache.derby.impl.sql.execute.HashScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.hasCheckConstraints(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutineList(char, java.lang.String, java.lang.String);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.addRowToHashTable(boolean, int, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.clearDependency(java.util.Vector);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckConstraints(org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(java.io.Reader, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSchemaAuth(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.apply(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.OrderableAggregator.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setAsciiStream(int, java.io.InputStream, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.invalidateConglomerateCache();org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getByte();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.compareRowsOnSiblings(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.close();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.reprepare(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNString(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.printQualifiers();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.isLockHeld(java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.LockSpace;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.collectAffectedRows(boolean);org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.io.URLStorageFactory.doInit();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.CountAggregator.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkSavepoint();org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.markAllRCsInChainReferenced();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.rejectParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getByte(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getOriginalSQL();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.checkSlotOnPage(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(boolean, boolean, boolean, boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTimestamp(java.lang.String, java.sql.Timestamp);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.hasConsistentTypeInfo();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.catalog.types.RoutineAliasInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.catalog.types.MethodAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.bindOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveAddedColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.IndexLister;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(java.lang.Object, java.lang.String, org.apache.derby.iapi.jdbc.BrokeredStatementControl);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.checkTableDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnPermDescriptor(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.autoincrementCheckRange(java.lang.String, long, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.getResourceAsStream(java.lang.String);org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.reusableResult();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setByte(byte, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.handleServiceType(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.load.ImportReadData.loadPropertiesInfo();org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScanRowSource.closeRowSource();org.apache.derby.impl.store.access.sort.MergeScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.generatedColumnPositionsArray();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getProperty(java.lang.String);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextService.addToThreadList(java.lang.Thread, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.AllResultColumn.cloneMe();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.releaseSavepoint(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedSavepoint30;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.legalJoinOrder(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.removeTruncationLWM(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.isSigned(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.NormalizeResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getProjectedColList();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.fillIn(int, int, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk);org.apache.derby.impl.services.bytecode.BCMethod;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStartKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setLong(java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.throwExceptionIfSQLSavepointNotAllowed(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.setTarget(org.apache.derby.impl.sql.compile.QueryTreeNode);org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.close();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.lockProperties(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScanResultSet.getNextRowCore();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(org.apache.derby.iapi.services.context.Context);org.apache.derby.impl.services.reflect.LoadedGeneratedClass;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BranchControlRow;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMinorVersion();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.dumpEstimatedCosts(java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.repositionScanForUpateOper();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.getService();org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.SortResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logtest_appendPartialLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(int, java.lang.StringBuffer, org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.access.sort.ExternalSortFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactId.getMaxStoredSize();org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.reopenCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.legalJoinOrder(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.readPage(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.undoCompressSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int, long);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkTopPredicatesForEqualsConditions(boolean, boolean[], int, int[], org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.createXATransactionFromLocalTransaction(byte[], byte[], int);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ProjectRestrictNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.removeXATransaction(org.apache.derby.iapi.store.access.xa.XAXactId);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(int, int, int, org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.RawToBinaryFormatStream.read(byte[], int, int);org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.setJNDIProviderProperties();org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setInt(int, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getFloat();org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.addAction(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.newDate(java.util.Calendar);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.AccessPathImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogCounter.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(java.lang.String, java.sql.CallableStatement);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getTableId(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.moveRecordForCompressAtSlot(int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle[], org.apache.derby.iapi.store.raw.RecordHandle[]);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.setExclusiveNoWait(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.clearTableName();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.startElseCode();org.apache.derby.impl.services.bytecode.Conditional;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(boolean, java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.notFlattenableJoin();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.CursorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareCall(int, int, int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.search(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNodesFromParameters(java.lang.Class);org.apache.derby.impl.sql.compile.CollectNodesVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.tempTableSchemaNameCheck(java.lang.Object);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setCharacterStream(int, java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.limitHit(java.io.IOException);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.iapi.store.raw.ContainerKey.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IController.init(boolean, boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.updateTargetLockMode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.typeCompare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.resetPosition(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.getStream(java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.setPropertyDefault(java.io.Serializable, java.lang.String);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getRowMap(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.impl.store.raw.data.ContainerActionOnCommit;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.projectResultColumns();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.compactRecord(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getParentResultSet(java.lang.String);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.use(boolean, boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callMethod(int, java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForRead(boolean, boolean, org.apache.derby.impl.store.access.conglomerate.RowPosition, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.pageHeaderToString();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RemoveFileOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(java.io.InputStream, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenAfterEndTransaction();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.readExternal(java.io.ObjectInput);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3Escalate.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeViewTriggerDependenciesOnPrivileges(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.StatementColumnPermission;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.services.context.ContextManager.flushErrorString();org.apache.derby.iapi.services.context.ErrorStringBuilder;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValue(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCostEstimate();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.close();org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStatisticsDescriptors(org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateJavaValue(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropFileInfoDescriptor(org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor);org.apache.derby.impl.sql.catalog.SYSFILESRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnReferenceMap();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.changeBootPassword(java.lang.String, java.util.Properties, org.apache.derby.iapi.services.crypto.CipherProvider);org.apache.derby.impl.services.jce.JCECipherProvider;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getDate(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptorsScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.switchLogBuffer();org.apache.derby.impl.store.raw.log.ChecksumOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(int, long, long, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setParameters(org.apache.derby.iapi.sql.ParameterValueSet, org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.parseTime(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.types.DateTimeParser;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(boolean, boolean, org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getLong(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.getScanCost(boolean, boolean, int, int, int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.StoreCostResult, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.checkVersion(int, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantConstraints(boolean, boolean[], int, int[], org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.preComplete(java.lang.Integer);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.validate(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.commonSetSavepointCode(boolean, java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PageBasicOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.doInsert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.optimize();org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptors(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.lockTableForCompilation(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getShort(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTypeServices();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.feasibleJoinStrategy(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.getClassLoaderVersion();org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag_detail(java.util.Properties);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.plusNN(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.clean(boolean);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addAttribute(java.lang.String, org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.setWidth(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.countNumberOfSimpleColumnReferences();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeField(int, int, java.io.ObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.createPage(int[], org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.rejectParameters();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(int, org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.reopen();org.apache.derby.impl.sql.execute.GenericExecutionFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.addField(int, java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.constantColumn(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.allSamePrecendence(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.cache.CachedItem.use();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.setFullTypeInfo();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setValue(byte);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(java.io.InputStream, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setAutoincrementValue(boolean, java.lang.String, long, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.clearScanState();org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.getCloseActivationMethod();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.deleteRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.prepareTransaction();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.group();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeLogRecord(byte[], byte[], int, int, int, int, long);org.apache.derby.impl.store.raw.log.ChecksumOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.syncFile(org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameTable(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.referencesSessionSchema();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.reclaimSpace(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.services.daemon.Serviceable);org.apache.derby.impl.store.raw.data.ReclaimSpaceHelper;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.allPushable();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getLong(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(java.util.Properties);org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.LongColumnException;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarbit.setWidth(boolean, int, int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeToFile();org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.VarbitConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.BitConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.rejectParameters();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.buildRCL();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNClob(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getPreviousRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.iapi.sql.execute.CursorResultSet, org.apache.derby.impl.sql.execute.TriggerEvent);org.apache.derby.impl.sql.execute.GenericTriggerExecutor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getString(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setURL(int, java.net.URL);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.findTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int, java.sql.NClob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.delete(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.prepConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getBaseColumnPosition(int, int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.setRowLocationArray(int, org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearWarnings();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowFromRowSource();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int, int, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.drop(boolean);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.genResultColList(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.getOrderableVariantType();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.postBindFixup();org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.GroupByNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getResultSet(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.shrinkPage(int, int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logField(int, int, java.io.OutputStream);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.getInternalTablePropertySet(java.util.Properties);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTime(java.lang.String, java.sql.Time);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.getCompilationSchema();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.toString();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getReferencedFormatableBitSet(boolean, boolean, boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.locateBind();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.useTransactionTable(org.apache.derby.iapi.services.io.Formatable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.openCore();org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction;0;0;0;0;0
org.apache.derby.iapi.types.XML.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.RAFContainer;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalog(org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.setupExecutors(org.apache.derby.impl.sql.execute.TriggerInfo);org.apache.derby.impl.sql.execute.TriggerEvent;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getServiceList(java.lang.String);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConstraintDescriptor(int[], org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.daemon.SingleThreadDaemonFactory.createNewDaemon(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.DataType.in(boolean, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int, int, int, java.lang.Object);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextPermutation();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.commonCodeForUpdatableByCursor(boolean, java.util.Vector);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getNewRowSet();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealCallableStatement();org.apache.derby.jdbc.EmbedXAConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.MergeScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getLastPagenum();org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredColumnPriv(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPageForInsert(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition(org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNormalizeResultSetNode(boolean, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(boolean, java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DD_Version;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.openScanController(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.close();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.getScanCost(boolean, boolean, int, int, int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.StoreCostResult, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(java.lang.String, java.sql.Blob);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.hasUnPushedPredicates();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRow(boolean, int, int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lastAutoincrementValue(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.fkSetupArrays(boolean[], int, int[], java.lang.String[], long[], org.apache.derby.catalog.UUID[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameter(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.mapSourceColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBigDecimal(java.lang.String, java.math.BigDecimal);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.comparable(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.openIndexScan(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(java.lang.Object, java.lang.String);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getMonth(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement30.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.generateMaterialization(java.lang.String, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.like(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.iapi.types.UserType.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.isPrimitiveType();org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericRIChecker.setupQualifierRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(java.lang.Object, java.lang.Object, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.UTF.compare(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.UserType;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(java.lang.String, java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.toString();org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.closeSource();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.getLocalColumnDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.getHeight();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.execute(boolean, long, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.addFromTable(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(int, java.lang.String, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.modifyJar(boolean);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.GlobalXactId.getFormat_Id();org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.getDeallocLock(boolean, boolean, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.getDataDictionary();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restorePredicates();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getDependentTableNode(int, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.throwInvalidOutParamMap(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentPreparedRecoveredXact(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.startOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(java.util.Properties);org.apache.derby.iapi.jdbc.FailedProperties40;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.abort();org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(java.io.InputStream, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compressSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.iapi.types.SQLVarchar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.splitMethod();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.close();org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(int, java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyReferencedColumnsToNewList(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeToFile();org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(int, int, java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getActiveStateTxIdString();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.reclaim_deleted_rows(long, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.addInstr(short);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.truncate(long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.getClone();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.findPublicMethod(boolean, java.lang.String);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getConnection();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getPrecision(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getParams();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.checkReliability(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNClob(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.FetchDescriptor.setMaxFetchColumnId();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromLog(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.toString();org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getArray(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.reCreatePageForRedoRecovery(int, long, long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getNull();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(boolean, byte[], java.io.DataOutput);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getSystemSchemaName();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.XML.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDriver.getDriverModule();org.apache.derby.jdbc.AutoloadedDriver;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.OrderableAggregator.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.SystemAggregator;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerKey.diag_detail(java.util.Properties);org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.store.access.heap.D_HeapController.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.iapi.services.loader.ClassFactoryContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getShort(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.startXATransaction(byte[], byte[], int, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.execute.OnceResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.openForUpdate(boolean, boolean[], int);org.apache.derby.impl.sql.execute.IndexSetChanger;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkAutoCommit(boolean);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatableHashtable.readExternal(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.handleMyExceptions(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeScan();org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.ensureProperContext();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.fetchMaxOnBTree(int, int, int, long, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.vmNameDeclaringClass(java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.executeQuery();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.error.StandardException.getMessage();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.timestampAdd(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPermissionDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.purgeCommittedDeletes(long, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrictForReordering();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.debugConglomerate();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getObject(int, java.util.Map);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.setJNDIProviderProperties();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredRoutinePriv(org.apache.derby.iapi.sql.dictionary.AliasDescriptor);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.createFinished();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.checkSlotTable(java.io.PrintStream);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.writeData(boolean[], java.lang.String[]);org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.doRenameString(int, java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResults(int, java.sql.ResultSet[][]);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.diag.SpaceTable.next();org.apache.derby.iapi.sql.conn.ConnectionUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking2.unlockScanRecordAfterRead(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.index.B2IRowLocking3;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.optimizeDomainValueConversion();org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.addPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearHeapConglomerateController();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getFirstLogInstantString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(boolean, java.lang.String);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getObject(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.reprepare();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(java.util.Properties, org.apache.derby.io.StorageFile);org.apache.derby.iapi.services.info.ProductVersionHolder;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking1.unlockRecordAfterRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking2;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.close();org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropJDBCMetadataSPSes(boolean, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyUniqueNames(boolean);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderQualifiers();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionCompressSpaceOperation(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.setValue(java.lang.String);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.spsCacheEntryRemoved(org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.compactRecord(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getDate(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.close();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getResultDescription();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.rollback(javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.pushableToSubqueries();org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.check();org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getRowTemplate(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.getAsFile(long);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.initRequiredPriv();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSystemSps(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(long);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getDominantType(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.handleIncompleteDatabaseEncryption(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.setState(double, double, org.apache.derby.impl.sql.compile.CostEstimateImpl);org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.delete();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.reflectionNeededForProjection();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.isInOrderPrefix(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.log.D_LogToFile.diag();org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.countNumberOfSimpleColumnReferences();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addClassReference(java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getParameter(int);org.apache.derby.impl.services.bytecode.BCLocalField;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.getLogBuffer();org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.AliasDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.determineUpdateMode(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(java.lang.Object[], java.lang.String);org.apache.derby.impl.sql.compile.ParseException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.run();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.checkConsistency(boolean, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.putAndsOnTop();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.services.classfile.Attributes.addEntry(org.apache.derby.iapi.services.classfile.AttributeEntry);org.apache.derby.iapi.services.classfile.AttributeEntry;0;0;0;0;0
org.apache.derby.impl.services.locks.TableNameInfo.getTableName(java.lang.Long);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.defaultTypeIsValid(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentTransactionForRollback(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericRIChecker.setupQualifierRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.ValueRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(long, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getInt(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLockingRR.getWriteLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logtest_appendPartialLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MaterializeResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.Scan;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.pageValid(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getAffectedIndexes(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.IndexLister;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flush(long, long);org.apache.derby.iapi.services.diag.Performance;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.addParms(java.util.Vector);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConglomerateDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.create(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getHeapConglomerateId();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.checkPosition(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDate(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.resolveConcatOperation(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.putAndsOnTop();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.lang.String, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.createSort(boolean, int, java.util.Properties, long, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.store.access.SortObserver, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.checkVersion(int, java.lang.String);org.apache.derby.impl.sql.catalog.DD_Version;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.updateFieldAtSlot(int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setIndexScanController(org.apache.derby.iapi.store.access.ScanController);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeOldVersionOfContainers(boolean);org.apache.derby.impl.store.raw.data.EncryptData;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DropOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.impl.store.raw.data.ContainerActionOnCommit;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(float);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getMinutes(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.getInt(int);org.apache.derby.vti.VTITemplate;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropViewNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ViewDescriptor.dropViewWork(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.DependencyManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Timeout;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.getOptimizer(org.apache.derby.iapi.sql.compile.OptimizableList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.RequiredRowOrdering, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindToBuiltIn();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addTableDescriptorToOtherCache(org.apache.derby.iapi.services.cache.Cacheable, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.tempTableSchemaNameCheck(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.insert(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.insertAtSlot(byte, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeRowHolders(java.util.Hashtable);org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generateConstructor(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getTotalColumnSize();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.setValue(java.sql.Time, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(int, java.util.Map);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.getString(int);org.apache.derby.vti.VTITemplate;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.generateAuthorizeCheck(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.finishBindExpr();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.getDependencyDescriptorList(java.util.List, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.DependencyDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.removePage(org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(java.io.Reader, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getTraceString();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.dumpTimeStats(java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.rowUpdated();org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredColumnPriv(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor);org.apache.derby.iapi.sql.dictionary.StatementColumnPermission;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.removeRedundantPredicates();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.compatible(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.writePage(boolean, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.addOptPredicate(int, org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getPageStatus(long);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.setDataTypeServices(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.dropConstraintDescriptorById(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getImplementations(boolean, java.util.Properties);org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapRowLocation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPageForInsert(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.forUpdate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setReadOnly(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConglomerateDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.apply(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentPreparedRecoveredXact(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.lessOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.close();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getMaximumColumnSize();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeRecord(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionShrinkReservedSpace(int, int, int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(boolean, int, java.lang.String);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.Scan;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnToExpression();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.getNString(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BooleanConstantNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder();org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(java.lang.String, org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.singleFromBaseTable(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.setRowLocationArray(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.initPage(boolean, boolean, int[], long, org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantTriggers(int, int[], org.apache.derby.iapi.sql.dictionary.GenericDescriptorList);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.getAsStream(long);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.startWriting(org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.services.locks.ShExQual;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getTypeServices();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.find(java.lang.Object);org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.end(int, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk, org.apache.derby.impl.services.bytecode.Type[]);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.getItemSize(org.apache.derby.impl.services.cache.CachedItem);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.beginExecuteMethod();org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameTableBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSIBM_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.subqueryReferencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageHeader();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.castArgToNationalString(org.apache.derby.iapi.sql.compile.TypeCompiler, org.apache.derby.iapi.types.TypeId, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.resolveLogicalBinaryOperator(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(boolean, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getDate(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.toString();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.searchLeftAndLockPreviousKey(int, int, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.LeafControlRow;0;0;0;0;0
org.apache.derby.iapi.types.DataValueFactoryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.skipRecord(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.addNewNodes();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privGetFileName(boolean, boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.setValue(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.equals(java.lang.Object);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.close();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getTableId();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.timestampAdd(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.D_Xact.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.transfer(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getTableName();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.RISetChecker.doPKCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.catalog.types.RoutineAliasInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(java.lang.String, long, long, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.isSessionSchema(java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.estimatedMemoryUsage();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.compactRecord(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.updateRow(boolean, boolean[], int, int[], org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ExecRow[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.getTableName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBoolean(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(org.apache.derby.impl.sql.compile.OrderedColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSCS_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setRowId(int, java.sql.RowId);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getBID(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(int, java.lang.String, java.util.Properties, org.apache.derby.iapi.store.access.ColumnOrdering[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(java.lang.String);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DropDependencyFilter.getDataValueFactory();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.fetchNextGroup(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericColumnDescriptor.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.updateRow();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createArrayOf(java.lang.Object[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.uniqueJoin(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.makeResultDescription();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeField(int, int, java.io.ObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.unlockScan(long);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.add(boolean, org.apache.derby.impl.store.raw.xact.Xact);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setWidth(boolean, int, int);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.comparable(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectAllocActions.actionChainAllocPage(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(int, long, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.heap.HeapScan;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getRowTemplate(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowFromSorter();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.noActiveUpdateTransaction();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.load(org.apache.derby.iapi.store.access.RowSource);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.updateUnfilledPageInfo(org.apache.derby.impl.store.raw.data.AllocExtent);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SetOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getSchemaDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.hasOuterJoins();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(org.apache.derby.impl.services.daemon.ServiceRecord);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(java.lang.String);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getRowId(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.nopProjection(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitTypeCompiler.dataValueMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SyncOnCommit.doIt(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getExecutionFactory();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(java.sql.Blob, long);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.assumeGlobalXactIdentity(org.apache.derby.impl.store.raw.xact.TransactionTableEntry);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.rotateClock(float);org.apache.derby.impl.services.cache.CachedItem;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(java.io.Reader, java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.InListOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking1.lockScanRow(boolean, boolean, boolean, int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeRowPosition, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.index.B2IRowLocking3;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getLong();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.divideNN(int, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.RISetChecker.doRICheck(boolean, int, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericRIChecker;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.getCurrentRecordHandleForDebugging();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(boolean, byte[], byte[], long);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getJoinStrategy(java.lang.String);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.btree.index.B2IController;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.length();org.apache.derby.impl.jdbc.BinaryToRawStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.DMLVTIResultSet.finish();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int, java.sql.NClob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.create(int, int, int, java.util.Properties, long, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(int, org.apache.derby.iapi.services.classfile.ClassHolder);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericStatementContext.pleaseBeOnStack();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowArrayFromHashTable(int);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptContainerOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isCurrency(int);org.apache.derby.iapi.types.DataTypeUtilities;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getLong(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLockingRR.unlockRecordAfterRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord();org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.makeDatabaseID(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.printSubNodes(int);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.isCurrentPositionDeleted();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtResumeScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.clearParameters();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanRow(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.flattenFromTables(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.changeBootPassword(java.io.Serializable, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChildPageno();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogRecord.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.DataType.outOfRange();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkAsciiStreamConditions(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.compareRowsOnSiblings(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.dropAllJDBCMetaDataSPSes();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.next();org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.compactRecord(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.setClause(int);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.lockAnObject(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getIntParameter(int, int, int, java.lang.String, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.property.PropertyValidation.doValidateApplyAndMap(boolean, java.io.Serializable, java.lang.String, java.util.Dictionary, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassMember.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getYear(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getObjectTypeName(org.apache.derby.iapi.types.JSQLType);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection.statementHoldabilityCheck(int);org.apache.derby.impl.jdbc.EmbedSQLWarning;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.invalidOperandType();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[]);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.SinglePool;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getNewRowSet();org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet;0;0;0;0;0
org.apache.derby.impl.io.JarStorageFactory.doInit();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantLength();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.putAndsOnTop();org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getResultSetMetaData();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.EmbedSQLWarning;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addUtf8(java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.needsToFire(int, int[]);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeInserter.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.sort.MergeSort;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.markUpdated(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.resolveConcatOperation(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logAction(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericTriggerExecutor.getWhenClause();org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.restoreContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.comparable(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.clearSection(int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.getClientInfo(java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassDataFromJar(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_2_system_procedures(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.iapi.types.CDCDataValueFactory.canSupport(java.util.Properties);org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.UnionNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logErrMsgForDurabilityTestModeNoSync();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.createDuplicateStatement(java.sql.Connection, java.sql.PreparedStatement);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyResultColumnNames(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedSimpleDataSource.findDriver();org.apache.derby.iapi.jdbc.JDBCBoot;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.unlockGroup(java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.D_LockControl;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getRowId(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.WriteCursorConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getResourceAsStream(java.lang.String);org.apache.derby.impl.services.reflect.JarLoader;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.prepare(javax.transaction.xa.Xid);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.NewInvocationNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.PrivilegeInfo.addWarningIfPrivilegeNotRevoked(boolean, boolean, java.lang.String, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.isNotNullNode();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(boolean, java.lang.String, java.lang.String);org.apache.derby.jdbc.EmbeddedDataSource;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(boolean, boolean, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.substring(int, org.apache.derby.iapi.types.ConcatableDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ParameterNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.createIdent(java.lang.Object, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.io.URLFile.getParentDir(int);org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.getConstantValueAsObject();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassData(boolean, java.io.InputStream, java.lang.String, java.util.zip.ZipEntry);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.FromVTI;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getRefCols();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.clearColumnReferences();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.handleMyExceptions(java.lang.Throwable);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLParse(boolean, java.lang.String, org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.wrapStatement(java.lang.String, java.sql.CallableStatement);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.data.RawContainerHandle, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.ContainerBasicOperation;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.unwrap(java.lang.Class<T>);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.readLogRecord(int, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getNumColumnsReturned();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.isValid(int);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.verifyOrderable();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openForwardsFlushedScan(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointInRFR(long, org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.isInstanceOf(java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.canSupport(java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getResultDescription();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDependableFinder();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.setSharedState(java.io.Serializable, java.lang.String);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.searchForEntryBackward(org.apache.derby.impl.store.access.btree.SearchParameters);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.logAndDo(org.apache.derby.iapi.store.raw.Loggable);org.apache.derby.impl.store.raw.xact.SavePoint;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insertToPositionIndex(int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setScale(int, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.getReferencedConstraintInfo();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.checkForDuplicateConstraintNames(java.lang.String, java.util.Hashtable, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findTopService(java.lang.Object);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getIndexRow(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.populate(int[], org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.invalidate(long, org.apache.derby.impl.store.raw.data.AllocPage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.useful(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScanFromClose(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.getConnection(boolean, java.lang.String, java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.checkStreamCols();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreLoggedRow(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.setFirstUnflushed();org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(int, java.math.BigDecimal);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.setTopModule(java.lang.Object);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyListAndObjects();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setSQLXML(java.lang.String, java.sql.SQLXML);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setFloat(float, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.toString();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.writePage(boolean, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(int, java.lang.String, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SyncOnCommit.doIt(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantNodeLength();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.multiStageMerge(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.MergeScan;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.getFloat();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getFileName(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.setTruncationLWM(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateStartStopKey(boolean, boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.start(int, javax.transaction.xa.Xid);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getNextRowCore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CoalesceFunctionNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.catalog.types.SynonymAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.handleException(java.lang.Exception, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.chainNextAllocPage(long, long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropDependentsStoredDependencies(boolean, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(int, java.lang.String);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyRow();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.forget(javax.transaction.xa.Xid);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.start(int, javax.transaction.xa.Xid);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.setParameterAsObject(int, java.lang.Object);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.stream.BasicGetLogHeader.getHeader();org.apache.derby.iapi.util.CheapDateFormatter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InitPageOperation.getPageForRedoRecovery(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.removePermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTimestamp(java.lang.String, java.sql.Timestamp);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.sort.NodeAllocator.reset();org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.bind();org.apache.derby.catalog.types.SynonymAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getClasspath();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking1.lockRecordForRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking2;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getFloat();org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextPermutation();org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.cleanUp();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.getNextPermutation();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getProvidersDescriptorList(java.lang.String);org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.flushDirtyBuffers();org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.handleException(boolean, java.lang.Throwable);org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.setValue(java.sql.Timestamp, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.getMatchingNationalCharTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setURL(java.lang.String, java.net.URL);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.addTableElement(org.apache.derby.impl.sql.compile.TableElementNode);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, java.lang.Object, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.replace(boolean, java.io.InputStream);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubCheckConstraint(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.truncatePages(long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSParams(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.catalog.types.TypeDescriptorImpl.getTypeName();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.typeUntypedNullExpression(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(float);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setRef(int, java.sql.Ref);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.load();org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.rowChangerFinish();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.run();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_setNullability(boolean, int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.parseCheckConstraint(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.setBeforeFirstRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.getNode(int, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.btree.SearchParameters.toString();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.toString();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushCompilerContext(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logLongColumn(int, int, java.lang.Object, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getRecordOffset(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.isInvariant();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.BeginXact.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.getHeight();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(byte[], int, int);org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateViewConstantAction.toString();org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecord(int, int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.areColumnsComparable(org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.getColumnNames(int[]);org.apache.derby.impl.sql.execute.InsertConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getConglom(int);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.jdbc.AutoloadedDriver.acceptsURL(java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setShort(java.lang.String, short);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptors(long);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getLastLog();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindColumnReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.backup(boolean, java.lang.String);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.InternalXact.setSavePoint(java.lang.Object, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNClob(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.disableLogArchiveMode(boolean);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.getProperty(java.lang.String);org.apache.derby.impl.store.access.PropertyConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateStopKey(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.AnyResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(int, long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getSparseRowAndMap();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.getMethodParameterClasses();org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getLength();org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.diag.StatementCache.getString(int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList();org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getColumnReferenceMap();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeInsert();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.unlockContainer(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapRowLocation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBinaryStream(java.io.InputStream, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.InternalXact.checkLogicalOperationOK();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.iapi.types.XML.setStream(java.io.InputStream);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.updateMaps(boolean[], int, int, int[], org.apache.derby.iapi.util.JBitSet[], org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.setSavePoint(java.lang.Object, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.lockAttributes(int, java.util.Hashtable);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.minus(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.sameStartStopPosition();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setCurrentRow(int, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.configureDatabaseForEncryption(java.util.Properties, org.apache.derby.iapi.services.crypto.CipherFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.checkSlotTable(java.io.PrintStream);org.apache.derby.iapi.services.io.CounterOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.addInternal(int, int, org.apache.derby.iapi.types.SQLTimestamp);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.start_xact_and_dosplit(boolean, int, long, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.getSigners(java.lang.String, java.util.zip.ZipEntry);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.Like;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(int, int[], int[], java.lang.Object[], org.apache.derby.iapi.services.io.ArrayInputStream, org.apache.derby.iapi.services.io.ErrorObjectInput, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getPreviousRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.readData(java.io.InputStream, java.lang.String, java.util.zip.ZipEntry);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.verifyTargetProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.backup(java.io.File, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag_detail(java.util.Properties);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.newEmbedResultSetMetaData(org.apache.derby.iapi.sql.ResultDescription);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.chainNextAllocPage(long, long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.addUpdateTransaction(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.verifyChangeToCNF();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.removePermissions(boolean[], org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getLastRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.setNodeType(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.replace(boolean, java.io.InputStream);org.apache.derby.impl.sql.execute.JarDDL;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setByte(byte, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(float);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.updateRef(java.lang.String, java.sql.Ref);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.isCursorActivation();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.initPage(int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedBinaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.CacheLock.unlockEvent(org.apache.derby.iapi.services.locks.Latch);org.apache.derby.iapi.services.locks.ShExLockable;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFile.getJarName();org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setString(int, java.lang.String);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.assignableTo(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.decrementLevel(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getPrecision(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.makeIndexTemplate(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setShort(int, short);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getExposedName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.setProperty(boolean, java.io.Serializable, java.lang.String);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnFromName(java.lang.String);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaterializedResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(int, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.boot_load_conglom_map();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.bindName(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptorArray(boolean, int, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor[], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.sqrt(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.toString();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.normExpressions();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.LoadedGeneratedClass.getJVMClass();org.apache.derby.iapi.services.loader.ClassInfo;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeRowPosition.unlatch();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getReturnRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.prepareMetaDataStatement(java.lang.String);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.foundInList(java.lang.String[]);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.equalTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.impl.store.raw.data.PageVersion;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.openContainer(org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(boolean, boolean, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getUpdateExposedTableName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getPreparedStatement();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs();org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.toString();org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.parseDefault(java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.resetTranId();org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EndXact.toString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getString();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.cleanUp();org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNCharacterStream(int, java.io.Reader);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.className(int);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getString();org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getClob(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.checkVersion(int, int, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateAliasNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.MemberTable.find(java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.MemberTableHash;0;0;0;0;0
org.apache.derby.impl.sql.compile.AccessPathImpl.initializeAccessPathName(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.equals(java.lang.Object);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.finish();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.estimateMemoryUsage();org.apache.derby.iapi.services.cache.ClassSize;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimeTypeCompiler.storable(org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByPosition(int, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.throwInvalidOutParamMap(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getCurrentContextManager();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionInsert(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnTypeName(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.getOptimizerImpl(int, org.apache.derby.iapi.sql.compile.OptimizableList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.RequiredRowOrdering, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.OptimizerFactoryImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNewStart(java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.addParms(java.util.Vector);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUUIDForCoreTable(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPermissionDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.services.cache.Clock.resetCacheStats();org.apache.derby.impl.services.cache.CacheStat;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.abort();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getFloat(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.setDataTypeServices(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJgetNPReferencedTables(int);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getArray(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.searchRight(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.catalog.types.TypeDescriptorImpl.getSQLstring();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setFloat(float, int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDependentsDescriptorList(java.lang.String);org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.adjustVirtualColumnIds(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(boolean, byte[], java.io.DataOutput);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalogDescription(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.makeResultDescription();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.unwrap(java.lang.Class<T>);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.findUserTransaction(java.lang.String, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.unlockReference(java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Lockable, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_initSystemTableCols(boolean, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.booleanSelectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.TableElementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropFileInfoDescriptor(org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.getUnfilledPageNumber(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(java.lang.Throwable, org.apache.derby.iapi.sql.conn.StatementContext);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.trackUnfilledPage(boolean, long);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.undo(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogToFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.locks.Timeout.buildLockTableString();org.apache.derby.iapi.util.CheapDateFormatter;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.store.access.DiskHashtable.rowMatches(java.lang.Object, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.setProperties(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ConstraintInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.getAllScanInfo(java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.anyoneBlocked();org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive();org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.getByte();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.convertConstant(int, org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.LOJgetReferencedTables(int);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharTypeCompiler.getMatchingNationalCharTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.load();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.setClause(int);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.transfer(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPUBLIClevelColPermsDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.StatementTablePermission;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealCallableStatement();org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.getHours(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.closeSource();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.deleteLogFileAfterCheckpointLogFile();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropSchemaNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.iapi.services.classfile.Attributes.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.AttributeEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.setIdentity(java.lang.Object);org.apache.derby.impl.store.raw.data.RAFContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.drop(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(int, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyCreateConstraintColumnList(org.apache.derby.impl.sql.compile.TableElementList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.getLocaleFinder();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.getAsFile(java.lang.String);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(long, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealJoinResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.setAfterLastRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.impl.store.raw.log.FileLogger;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.cleanUp();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.compactRecord(int, int, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.start_xact_and_dosplit(boolean, int, long, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getExecutionFactory();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.validateStatement(org.apache.derby.iapi.sql.execute.ConstantAction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.countScanFlags();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.vmNameDeclaringClass(java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.getTypeMap();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(double);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.removeAttributes();org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isPossibleDistinctScan(java.util.Set);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.genSQLJavaSQLTree();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BranchControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.setPrepareIsolation(int);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement40.unwrap(java.lang.Class<T>);org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getCompareValue(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.getAffectedIndexes(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStreamInternal(boolean, int, java.io.InputStream, long);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.initializeScalarAggregation(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.setTopModule(java.lang.Object);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(boolean, boolean, boolean, int);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.DD_Version);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getMinutes(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeToFile();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(int, int, int, org.apache.derby.iapi.store.raw.Page);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.checkRowOrder(org.apache.derby.impl.store.access.btree.ControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.position(byte[], long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IForwardScan.init(boolean, boolean, int, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.BTreeForwardScan;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.getString();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericTriggerExecutor.getAction();org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.setNullParameterInfo(java.lang.String[]);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getMethods();org.apache.derby.iapi.services.classfile.MemberTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.postTermination();org.apache.derby.impl.store.raw.xact.XactContext;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDouble(double, int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(java.util.Properties);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateSchemaNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.bindTables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.disablePrivilegeCollection();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getObject(int, java.util.Map);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.load.ImportReadData.readNextDelimitedRow(java.lang.String[]);org.apache.derby.impl.load.LoadError;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.bindUntypedNullsToResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.trackUnfilledPage(boolean, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredPage);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.FKInfo;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBytes(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealCallableStatement();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getColumnDescriptors();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getRowPositionFromRowLocation(org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_template();org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getClob(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.catalog.types.BaseTypeIdImpl.toString();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(int, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.deleteLeftmost(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getTotalColumnSize();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction();org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.reprepare(org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lookupStatement(org.apache.derby.impl.sql.GenericStatement);org.apache.derby.impl.sql.conn.CachedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.isOrderedOn(boolean, java.util.Vector, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.getReadLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNCharacterStream(int);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getOptionalData();org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.bind();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.setFetchSize(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int, int, java.io.OutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(boolean, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getInt();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.readJarFile(java.lang.String, java.lang.String);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScanFromClose(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeRecord(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getExposedTableName();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.accumulate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeRowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.setResultType(org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finishAggregation(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexSetChanger.close();org.apache.derby.impl.sql.execute.IndexChanger;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(boolean, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.AggregatorInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.recreateUUID(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindParameter(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.reflect.LoadedGeneratedClass.getName();org.apache.derby.iapi.services.loader.ClassInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.addBatch();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLockObject(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.optimize();org.apache.derby.impl.sql.compile.JavaToSQLValueNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findModule(java.lang.Object, java.lang.String, java.lang.String);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.returnConnectionToResource(org.apache.derby.iapi.store.access.xa.XAXactId, org.apache.derby.jdbc.XATransactionState);org.apache.derby.jdbc.XATransactionState;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnTypeName(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getLogStorageFactory();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getMaxFreeSpace();org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionCopyRows(int, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.iapi.jdbc.JDBCBoot.boot(java.io.PrintStream, java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentRollbackFirstTransaction(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(java.lang.Object, java.lang.Object);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.lang.String, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.debugConglomerate();org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.getProperty(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorByName(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(boolean, java.lang.String, java.lang.String, java.util.Properties, org.apache.derby.iapi.services.monitor.PersistentService);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.OpenHeap.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(long, org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointArg(java.sql.Savepoint);org.apache.derby.impl.jdbc.EmbedSavepoint30;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finishAggregation(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.impl.sql.execute.GenericAggregator;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.markOrderingDependent();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InvalidatePageOperation.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.fkSetupArrays(boolean[], int, int[], java.lang.String[], long[], org.apache.derby.catalog.UUID[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.forget(javax.transaction.xa.Xid, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getStreamStorableColIds(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanCommittedDeletedRow(int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.initialize();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.getNestedConnection(boolean);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addDirectEntry(org.apache.derby.iapi.services.classfile.ConstantPoolEntry);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getBinaryStream(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanRow(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.setFullTypeInfo();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.run();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(int[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.shrinkFor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.SearchParameters;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getLong();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.addInstrCPE(int, short);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setRowId(java.lang.String, java.sql.RowId);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPageOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRowLocation(org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.heap.HeapRowLocation;0;0;0;0;0
org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(boolean, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.findModule(boolean, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdInputStream.getClassFactory();org.apache.derby.iapi.services.loader.ClassFactoryContext;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateVTIResultSet.updateVTI(java.sql.ResultSet, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.OpenHeap.getFormatIds();org.apache.derby.impl.store.access.heap.Heap;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.getSigners(java.lang.String, java.util.zip.ZipEntry);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.parseDefault(java.lang.String);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAliasDescriptor(org.apache.derby.iapi.sql.dictionary.AliasDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConstraintDescriptor(org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.wrapResultSet(java.sql.ResultSet, java.sql.Statement);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.removeOrphanedColumnChain(org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.impl.store.raw.data.ReclaimSpace);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.toString();org.apache.derby.impl.sql.compile.StatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setAutoGeneratedKeysResultsetInfo(int[], java.lang.String[]);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TDCacheable.checkConsistency(java.lang.Object, org.apache.derby.iapi.services.stream.HeaderPrintWriter, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasSelfReferencingFK(int, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getTimestamp(int, java.util.Calendar);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.getDNFromUID(java.lang.String);org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.userOnAccessList(java.lang.String);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.getServiceProperties(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrement(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pullExpressions(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RevokeNode.bind();org.apache.derby.impl.sql.compile.PrivilegeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StatementNode.generate(org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.times(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(boolean, byte[], byte[], long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.toString();org.apache.derby.impl.sql.compile.TriggerReferencingStruct;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.jdbc.EmbedPooledConnection.getNewCurrentConnectionHandle();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTablePermDescriptor(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.isSourceRowResultSet();org.apache.derby.impl.sql.execute.NormalizeResultSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int, java.sql.NClob);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.getLastPagenum();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSIBM_procedures(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedSavepoint30.getSavepointName();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(boolean, int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.getLong();org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.lockObject(int, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.locks.Latch, org.apache.derby.iapi.services.locks.Lockable);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(java.lang.Object[], java.util.Hashtable);org.apache.derby.iapi.store.access.KeyHasher;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restorePredicates();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(java.util.Properties);org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(java.lang.String, java.util.Properties);org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.genSQLJavaSQLTree();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyColumnsToNewList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaHeap(java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.resolveArithmeticOperation(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.getDatabaseSecretKey(byte[], java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRelativeRow(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.concatenate(org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue, org.apache.derby.iapi.types.StringDataValue);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValue(java.lang.String);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.setIdentity(java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.end(int, javax.transaction.xa.Xid);org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.isDeletedOnPage(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DDUtils;0;0;0;0;0
org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getTransitiveSearchClause(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.iapi.jdbc.DRDAServerStarter.run();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.IndexLister.getAllIndexes();org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateFieldOverflowDetails(org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.descriptorExistsException(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getStatistics();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getNewRowSet();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageVersion();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.mergeVectorAggregates(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.forget(javax.transaction.xa.Xid);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setAsciiStream(java.io.InputStream, java.lang.String, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.runChecker(boolean);org.apache.derby.impl.sql.execute.RISetChecker;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logOverflowField(int, int, long, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateJavaValue(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.finishAndRTS();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.makeCatalog(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.rejectParameter();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.removeContainer(boolean, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionPurge(boolean, int, int, int[], org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(boolean, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesTarget(boolean, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.buildColumnList();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrict();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getNodeOn();org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(java.lang.String, java.sql.Blob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.jdbc.ResourceAdapterImpl.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getRelop();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireBeforeTriggers(java.util.Hashtable);org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.depend.BasicDependencyManager.addDependency(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.depend.Provider, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.enhanceRCLForInsert(int, int[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.FromVTI);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(long);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.isOneRowResultSet();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.setCharacterStream(long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.findGroupingColumn(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getUserSpecifiedIndexName();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterTypeName(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.doInsert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongvarchar.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.encryptAllContainers(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.EncryptData;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.projectResultColumns();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.map(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyListAndObjects();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.next();org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.restorePredicates();org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.mergeARow(int);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.setBigDecimal(java.lang.Number);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.JoinResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.getServiceName(java.lang.Object);org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(boolean);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.remove(boolean, java.lang.String, long);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.reopenCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.getSchemaDescriptor(boolean, java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.isInvariant();org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.putAndsOnTop();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getFirstLogNeeded(org.apache.derby.impl.store.raw.log.CheckpointOperation);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.toString();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(org.apache.derby.iapi.sql.depend.Dependent, org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.compatible(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.referencesSessionSchema();org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareToInvalidate(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.depend.Provider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredRecordHeader.size();org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.checkReliability(int, java.lang.String);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.getHours(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.get_left_nondeleted_rowcnt(int);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultColumn();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(java.lang.String, java.sql.ResultSetMetaData, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.addColumnToConglomerate(int, long, org.apache.derby.iapi.services.io.Storable);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.normalize(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropFileInfoDescriptor(org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor);org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(int);org.apache.derby.iapi.types.SQLDecimal;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(boolean, java.util.HashMap, java.util.List);org.apache.derby.impl.sql.compile.RoutineDesignator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.run();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getMetaData();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.informOfRowCount(long, org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindParameter();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.decrementLevel(int);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setAutoincrementValue(boolean, java.lang.String, long, org.apache.derby.catalog.UUID, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(org.apache.derby.iapi.store.raw.ContainerKey, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.ContainerOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.setValue(java.sql.Date, java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.checkOwner(java.lang.String);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.catalog.types.RoutineAliasInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.readPositionedPage(byte[], long);org.apache.derby.iapi.services.io.InputStreamUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getAbsoluteRow(int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaToSQLValueNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.VarbitConstantNode.init(java.lang.Object);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(java.lang.String, java.lang.String);org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredStatement.isClosed();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.AvgAggregator.getResult();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callSuper();org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.runChecker(boolean);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestAccessPath();org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUserName();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3.getWriteLockType();org.apache.derby.iapi.store.raw.RowLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.parseCheckConstraint(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.locks.TableNameInfo.getTableName(java.lang.Long);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(int, java.lang.String);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameter.getJDBCParameterNumberStr();org.apache.derby.impl.sql.GenericParameterValueSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.constantExpression(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.updateUnfilledPageInfo(org.apache.derby.impl.store.raw.data.AllocExtent);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.loadSorter();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ActivationClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.compareTo(java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int, java.io.Reader);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateFieldAtSlot(int, int, java.lang.Object, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.getEstimatedRowCount();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.createDuplicateStatement(java.sql.Connection, java.sql.PreparedStatement);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.legalJoinOrder(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalVarchar.hashCode();org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(int, long);org.apache.derby.impl.sql.execute.InsertResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.GrantRevokeConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.PrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.services.bytecode.Conditional.fillIn(int, int, org.apache.derby.impl.services.bytecode.BCMethod, org.apache.derby.impl.services.bytecode.CodeChunk);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByName(int, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SavepointNode.makeConstantAction();org.apache.derby.impl.sql.execute.GenericConstantActionFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.getSeconds(org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageHeader();org.apache.derby.iapi.services.io.ArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.close();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeRowPosition.toString();org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getString(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getLong(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.findLastAllocPage(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.timestampDiff(int, java.sql.Date, org.apache.derby.iapi.types.DateTimeDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify();org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(java.lang.Object);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.doProjection(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.store.raw.D_ContainerLock.diag();org.apache.derby.iapi.store.raw.ContainerLock;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.remapReferencedColumns(int[], org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.categorize();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.crashOnDebugFlag(boolean, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.cast(java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.AnyResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.getUpdateSchemaName();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getRowTemplate(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.SQLBinary.greaterThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FileLogger.redo(long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory, org.apache.derby.impl.store.raw.log.StreamLogScan);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getColumnSQLType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setupPositionBasedScan(long);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.getConnection();org.apache.derby.jdbc.EmbedXAResource;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.readJarFile(java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetSchemaNode.activationKind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.run();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(java.lang.String);org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorById(org.apache.derby.catalog.UUID);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDependableFinder();org.apache.derby.iapi.sql.dictionary.TupleDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(boolean, int, java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.getMethods();org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindParameter();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.MergeJoinResultSet.close();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(int, int, java.util.Properties, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.autoincrementFlushCache(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.undoCompressSpace(int, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateRowId(int, java.sql.RowId);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.getLong();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.switchLogFile();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TernaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.recreateServiceRoot(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanForReclaimSpace(org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.canSupport(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getSchemaDescriptor();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.catalog.types.DecimalTypeIdImpl.writeExternal(java.io.ObjectOutput);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setClause(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.createXATransactionFromLocalTransaction(byte[], byte[], int);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getVersion();org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getMajorVersion();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTypeId();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerVersion();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SPSNameCacheable.clearIdentity();org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.setEstimatedRowCount(int, long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.freezePersistentStore();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.positionAtStartPosition(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(java.lang.Object[]);org.apache.derby.iapi.services.io.FormatIdInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getInt(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.getDefaultAccessLevel();org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(java.io.Reader, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.latchPage(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnDefault(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.locateBind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.hasUnPushedPredicates();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.getLocalDriver();org.apache.derby.impl.jdbc.TransactionResourceImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getNodeOn();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptors(long);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.tellRowOrderingAboutConstantColumns(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.tempTableSchemaNameCheck(java.lang.Object);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.newRowLocationTemplate();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.checkIfThisActivationHasHoldCursor(java.lang.String);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.execute.FKInfo.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.diag.StatementCache.getTimestamp(int);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.getAndNameTransaction(java.lang.String, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.store.access.RAMTransactionContext;0;0;0;0;0
org.apache.derby.impl.sql.compile.NewInvocationNode.findPublicMethod(boolean, java.lang.String);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.resolveTableToSynonym(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.catalog.types.SynonymAliasInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.AutoincrementCounter.update();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.SavepointConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(int, java.io.Reader, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConstantNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkCharacterStreamConditions(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.makeInvalid(int, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.DropConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.close();org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.update(java.lang.Object, java.util.Observable);org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.isActiveService(org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ModuleInstance;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.writePage(boolean, org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocExtent.compress(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.AllocPage, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.verifyProperties(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.openSortCostController(java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getPrecision(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.setOuterRows(double);org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.load(org.apache.derby.iapi.store.access.RowSource);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTimestamp(java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.toString();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(long, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getNextHeadPage(boolean, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocationCache;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.toString();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.shutdown();org.apache.derby.impl.services.monitor.TopService;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.updateOverlaps(int[]);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.fillIndex(int, long, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericStatementContext.appendErrorInfo();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBinaryStreamConditions(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.findConglomerate(long);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBytes(byte[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.NormalizeResultSetNode.setRefActionInfo(boolean, int[], java.lang.String, long);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getFieldOffset(int, int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement();org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.HashScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.setNullParameterInfo(java.lang.String[]);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.updateRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.initFromData(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getPrimitiveTypeName();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.clearCurrentRow(int);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int, java.io.ObjectInput);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord();org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp();org.apache.derby.impl.sql.execute.TriggerEventActivator;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.end(int, javax.transaction.xa.Xid);org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.getContainerProperties(java.util.Properties);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.NameTDCacheable.clearIdentity();org.apache.derby.impl.sql.catalog.TDCacheable;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callSubMethod(org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassMember;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConglomerateDescriptor(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.add(java.io.InputStream);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isDeleted();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ActivationClassBuilder.rememberCursorTarget(org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.preprocessSourceRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.createPage(int[], org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(java.util.Properties, org.apache.derby.io.StorageFile);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.initPage(boolean, boolean, byte, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.markRowAsDeleted();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getInsertablePage(boolean, boolean, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassInvestigator.doRenameString(int, java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.write(int);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.eliminateNots(boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, java.lang.Object, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromStream(java.lang.Object[], org.apache.derby.iapi.services.io.LimitObjectInput);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.setBigDecimal(java.lang.Number);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.db.StoreClassFactoryContext.getPersistentSet();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.services.locks.SinglePool.apply(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowOrderingImpl.optimizableAlwaysOrdered(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnOrdering;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DropDependencyFilter.getUUIDFactory();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.generateDataValue(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.iapi.services.info.JVMInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.isInstanceOf(java.lang.String);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection40.createStruct(java.lang.Object[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexRowGenerator(int);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.readExternal(java.io.ObjectInput);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.flush(long, long);org.apache.derby.impl.store.raw.log.LogCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.mapSourceColumns();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.iapi.store.raw.PageKey.equals(java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.toDebugString();org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.parseDefault(java.lang.String);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getColumnType(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.getObjectTypeName(org.apache.derby.iapi.types.JSQLType);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(int, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.LeafControlRow;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.end(int, javax.transaction.xa.Xid);org.apache.derby.iapi.store.access.xa.XAXactId;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBinaryStream(int, java.io.InputStream);org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.open();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.enableLogArchiveMode();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.toString();org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetch(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.getPrecision();org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.setOurIndexRow(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.NotNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.addNewNodes();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int, java.io.ObjectInput);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getMaxRows();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.StoreCostController);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(org.apache.derby.impl.sql.compile.FromBaseTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.iapi.types.SQLBoolean.throwExceptionIfFalse(java.lang.String, java.lang.String, java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.rotateRight(org.apache.derby.impl.store.access.sort.Node);org.apache.derby.impl.store.access.sort.Node;0;0;0;0;0
org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.debugConglomerate();org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateConstantAction.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.makeConstantAction();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.setStore();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.setType(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.setFactory(org.apache.derby.impl.store.raw.data.BaseDataFileFactory);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.open();org.apache.derby.impl.sql.execute.TriggerInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking2.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.RowLocking3;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.recover(int);org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParameterJDBCType(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.OptimizerImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(java.lang.String);org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(int, int, int, int, int[], java.lang.String, java.lang.String[]);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean, java.util.Properties);org.apache.derby.iapi.util.CheapDateFormatter;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getGeneratedClass(org.apache.derby.iapi.util.ByteArray);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.resultSetClosing(org.apache.derby.impl.jdbc.EmbedResultSet);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.generateDataValue(org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(int);org.apache.derby.iapi.util.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.findContainerForRedoRecovery(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.services.reflect.DatabaseClasses.stop();org.apache.derby.impl.services.reflect.UpdateLoader;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(boolean, java.lang.String, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.getRawStream(java.io.InputStream, java.lang.String);org.apache.derby.iapi.services.io.LimitInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(int, int, java.lang.String, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.skip(long);org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.RowResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushThis();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.putOptimizableEqualityPredicateFirst(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.reached(int, int, java.lang.Object, java.lang.Object, java.util.Enumeration);org.apache.derby.impl.store.raw.xact.LockCount;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.init();org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.util.ByteArray;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealStatement();org.apache.derby.jdbc.EmbedXAConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getOldRowSet();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.cleanUp();org.apache.derby.impl.sql.execute.DeleteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.iapi.types.DataType.invalidFormat();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.shrinkPage(int, int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.makeResultDescription();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.hasRollbackFirstTransaction();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.getNewJoinCondition(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.putAndsOnTop();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.remove(boolean, java.lang.String, long);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.iapi.types.SQLNClob.getTimestamp(java.util.Calendar);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(java.lang.String, java.sql.NClob);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.types.NumberDataType;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.modifyAccessPath(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.repositionScanForUpateOper();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.trimBind();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.SQLDate.compare(boolean, boolean, int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.getFactoryFromConglomId(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.sortInAscendingOrder(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.create(int, int, int, java.util.Properties, long, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isStrictlyOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(int, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement();org.apache.derby.jdbc.EmbedXAConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForInsert(int);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.equals(java.lang.Object);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.prepareTransaction(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.countReferencedColumns();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindParameter();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.flattenableInFromSubquery(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserTypeConstantNode.init(java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.verifyEliminateNots();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.changeToCNF(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(boolean[], int, org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.D_Xact.diag();org.apache.derby.impl.store.raw.xact.XactId;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.getConglomDescs();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(int, java.lang.String, org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(int, long, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetOpResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DMLStatementNode, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.FromVTI, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.performTransitiveClosure(int);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNCharacterStream(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AlterTableNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.writeCompleteStream(int, java.io.InputStream);org.apache.derby.iapi.services.io.InputStreamUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.encryptContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStreamInternal(boolean, int, java.io.Reader, long);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getDominantTypeServices();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(boolean, boolean, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(boolean, int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(int, long, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnType(int);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.bind();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.rejectParameters();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLChar.like(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.Like;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.getTransactionInfo();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(boolean, boolean, org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.createXATransactionFromLocalTransaction(byte[], byte[], int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesAndRollback();org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.resetAICounters(boolean);org.apache.derby.impl.sql.execute.AutoincrementCounter;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(org.apache.derby.iapi.util.JBitSet[]);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.VirtualColumnNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysColumnIndexes();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortRowSource(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOrderableVariantType(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.setDataTypeServices(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.normExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectMethod.invoke(java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.clearScanState();org.apache.derby.impl.sql.execute.JoinResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAfterThisPage(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getDate(java.util.Calendar);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.io.InputStreamFile.getCanonicalPath();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getPrecision(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor);org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.setHeapConglomerateController(org.apache.derby.iapi.store.access.ConglomerateController);org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.boot_create(long, org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify();org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericCostController.getFetchFromFullKeyCost(int, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getBytes(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getExpressionOperand(int, int, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.CursorNode.determineUpdateMode(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.startOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(boolean, boolean, boolean, int);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.openContainerAndDoIt(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int);org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isCloneable();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getCallableStatement();org.apache.derby.iapi.jdbc.BrokeredStatement;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.resetToSourceRCs();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.resetToSourceRCs();org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.CharConstantNode.getString();org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.iapi.store.access.BackingStoreHashtable.get(java.lang.Object);org.apache.derby.iapi.store.access.DiskHashtable;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.setValue(java.lang.String);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnection.createStatement(int, int, int);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(boolean, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.DD_Version);org.apache.derby.impl.sql.catalog.DataDictionaryImpl;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.isActiveService(org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LogicalUndoOperation.releaseResource(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.parseTime(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getTimeSpent(int);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.chainNewAllocPage(long, long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUUIDForCoreTable(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.prepareCommit(int);org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeCostController.close();org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.JavaValueNode.mapToTypeID(org.apache.derby.iapi.types.JSQLType);org.apache.derby.iapi.types.JSQLType;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(java.lang.Object, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOneColumnChain(int, long);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexRowGenerator(int, org.apache.derby.iapi.sql.dictionary.IndexRowGenerator);org.apache.derby.impl.sql.catalog.IndexInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.init(boolean, int, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(boolean, int, org.apache.derby.iapi.services.compiler.LocalField, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.getApproximateLengthInBytes(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.next();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyUniqueNames(boolean);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryList.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.latchPage(boolean, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPaths();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getIndexScanController();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.AndNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getFieldOffset(int, int);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.QuantifiedBinaryOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getLength();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongint.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeResultDescriptors(org.apache.derby.iapi.sql.execute.ExecutionContext);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getArrayElement(int);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.catalog.types.RoutineAliasInfo;0;0;0;0;0
org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(java.util.Properties, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.removeOptPredicate(int);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferPredicates(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentRowLocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.isStrictlyOrdered(org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor, org.apache.derby.impl.sql.compile.ColumnReference[]);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyTypesAndLengthsToSource(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.createLogDirectory();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.transferNonQualifiers(org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.ModifyColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.GenericScanController;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateNewColumnToDefault(java.lang.String, java.lang.String, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.rowUpdated();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.preAllocate(int, long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logtest_appendPartialLogRecord(byte[], byte[], int, int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.generateConstant(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ConstantNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getParameterMode(int);org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.access.StorableFormatId.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(java.lang.String, java.lang.String[]);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_setNullability(boolean, int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.checkObject(org.apache.derby.iapi.services.io.Formatable);org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.getLocalColumnDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.handleBootPassword(boolean, boolean, java.util.Properties);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.CheckpointOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.setValue(int);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.load.ExportWriteData.writeNextColumn(boolean, java.lang.String);org.apache.derby.impl.load.ExportWriteDataAbstract;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestSortAvoidancePath();org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.pullUpOrderByColumns(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.verifyAllOrderable();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkSavepoint();org.apache.derby.jdbc.EmbedPooledConnection;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.reStartScan(long, long);org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.cleanUp();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.isOrderedResult(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseColumnNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSpace.mergeGroups(java.util.HashMap, java.util.HashMap);org.apache.derby.impl.services.locks.Lock;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.makeResultDescriptors();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.access.btree.OpenBTree.reopen();org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.addPage(long, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CountAggregateDefinition.getAggregator(java.lang.StringBuffer, org.apache.derby.catalog.TypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLLongVarbit.getTypeName();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getIndexColMapping();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.setExclusiveNoWait(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByName(int, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TruncateOnCommit.equals(java.lang.Object);org.apache.derby.impl.store.raw.data.ContainerActionOnCommit;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(boolean, boolean, boolean, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.getSemiRowCount(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScan.close();org.apache.derby.impl.store.access.sort.SortScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(boolean, boolean, java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setLong(java.lang.String, long);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDate(java.lang.String, java.util.Calendar);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(boolean, boolean, boolean, boolean, org.apache.derby.iapi.sql.dictionary.SPSDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setNull(int, java.lang.String, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.load.Import.doImport();org.apache.derby.impl.load.ImportAbstract;0;0;0;0;0
org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.getStartOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.checkCancellationFlag();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateJavaValue(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.decrementLevel(int);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(int, org.apache.derby.iapi.services.classfile.ClassHolder);org.apache.derby.iapi.services.classfile.CONSTANT_Index_info;0;0;0;0;0
org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.cloneMe();org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getPrimitiveMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnDescriptorCore(org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(java.lang.Object, java.lang.String);org.apache.derby.impl.services.monitor.ProtocolKey;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.doMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentTransactionForRollback(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(org.apache.derby.iapi.sql.execute.ExecIndexRow);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getField(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.iapi.types.UserType.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addMember(int, java.lang.String, java.lang.String);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.equals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.diag.ErrorMessages.next();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getObject(int);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(boolean, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraintId();org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compress(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.findDeclaredGlobalTempTable(java.lang.String);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.preprocess(int, org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.latchPageAndRepositionScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.generateUniqueBytes();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.getScale(java.lang.String, org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CharConstantNode;0;0;0;0;0
org.apache.derby.impl.io.URLFile.getInputStream();org.apache.derby.impl.io.InputStreamFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs2(boolean, int, int, int, int, int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.LOBConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.generateParameters(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateLockGranularity(char, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowed(int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.unlock(int, org.apache.derby.iapi.services.locks.Latch);org.apache.derby.impl.services.locks.Constants;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.setIdentity(java.lang.Object);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.iapi.types.BinaryDecimal.setValue(long);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(java.lang.String, long, long, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.impl.sql.execute.RIBulkChecker;0;0;0;0;0
org.apache.derby.impl.sql.compile.GrantNode.makeConstantAction();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.handleBootPassword(boolean, boolean, java.util.Properties);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.validate(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.DDLStatementNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUUIDForCoreTable(java.lang.String, java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.LogicalPageOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getFieldOffset(int, int);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Node.toString();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(long);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(int, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.SubqueryNode;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(java.lang.String);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isOneRowResultSet();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.init(boolean, int, int, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo, org.apache.derby.iapi.store.access.StaticCompiledOpenConglomInfo, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.BTree, org.apache.derby.impl.store.access.btree.BTreeLockingPolicy);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.load.ExportAbstract.getOneRowAtATime(java.sql.ResultSet);org.apache.derby.impl.load.ExportResultSetForObject;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(java.lang.String, java.util.Map);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.LOJgetReferencedTables(int);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.constantColumn(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.UnionNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTimestamp.addInternal(int, int, org.apache.derby.iapi.types.SQLTimestamp);org.apache.derby.iapi.types.SQLTime;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkForInvalidDefaults();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.rejectXMLValues();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.setWidth(boolean, int, int);org.apache.derby.iapi.types.BinaryDecimal;0;0;0;0;0
org.apache.derby.impl.store.raw.data.LoggableActions.doAction(org.apache.derby.iapi.store.raw.Loggable, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.writePage(org.apache.derby.iapi.store.raw.PageKey);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.iapi.types.UserType.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(int, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.isTemporary();org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.deleteDeferredRows();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.compile.CompilerContext, org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.getSchemaDescriptor();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InputStreamContainer.backupContainer(java.lang.String, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.getFirstLogNeeded(org.apache.derby.impl.store.raw.log.CheckpointOperation);org.apache.derby.impl.store.raw.log.CheckpointOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addDistinctAggregatesToOrderBy();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.informOfRowCount(long, org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.execGuts(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getLoggable();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.services.monitor.TopService.bootModule(boolean, java.lang.Object, java.util.Properties, org.apache.derby.impl.services.monitor.ProtocolKey);org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.backupLogFiles(java.io.File, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.logErrMsg(java.lang.String);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.appendOverflowFieldHeader(org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.GroupByList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.getParameter(int);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalChar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setSQLXML(java.lang.String, java.sql.SQLXML);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(int, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFinalCostEstimate();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.initStream();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.services.locks.Timeout.createException();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.EscalateContainerKey.match(java.lang.Object);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(java.lang.String, long, long, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.execute.FKInfo);org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.remapScopedPred();org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.getDefaultAccessLevel();org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.putOptimizableEqualityPredicateFirst(int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.setNullParameterInfo(java.lang.String[]);org.apache.derby.impl.sql.compile.SQLToJavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setEstimatedRowCount(long);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.openCore();org.apache.derby.impl.sql.execute.GenericAggregateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.validate(java.io.Serializable, java.lang.String, java.util.Dictionary);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLDecimal.getByte();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(boolean, int, int, int, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.ExecIndexRow, org.apache.derby.iapi.sql.execute.TupleFilter, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.generateConstructor(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.NewInvocationNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.openCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.completeCompile(org.apache.derby.impl.sql.compile.QueryTreeNode);org.apache.derby.impl.sql.CursorInfo;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int, int[], org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.truncate(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setRowId(java.lang.String, java.sql.RowId);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.D_FlushedScan.diag();org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherFactory.changeBootPassword(java.lang.String, java.util.Properties, org.apache.derby.iapi.services.crypto.CipherProvider);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.services.monitor.FileMonitor.run();org.apache.derby.impl.services.monitor.BaseMonitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.addOrderByColumn(org.apache.derby.impl.sql.compile.OrderByColumn);org.apache.derby.impl.sql.compile.OrderByColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compress(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.AllocExtent;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getTime(java.util.Calendar);org.apache.derby.iapi.types.SQLTimestamp;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(java.util.Vector, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.parseCheckConstraint(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.XMLTypeCompiler.nullMethodName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.padFile(long, org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.hasPreparedXact(boolean);org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.cptPut(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.fetch(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortScan.fetch(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(java.lang.Object[], java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.decrementLevel(int);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.finish();org.apache.derby.impl.sql.execute.DMLVTIResultSet;0;0;0;0;0
org.apache.derby.iapi.types.SQLInteger.setValue(float);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.checkpoint();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.ColumnDefinitionNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_bindResultColumns(boolean);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.iapi.types.DataTypeDescriptor.equals(java.lang.Object);org.apache.derby.catalog.types.TypeDescriptorImpl;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newColPermsDescriptor(java.lang.String, java.lang.String, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.RAMAccessManager.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.access.PC_XenaVersion.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.store.access.PropertyConglomerate);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.iapi.types.BigIntegerDecimal.divideNN(int, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(boolean, byte[], byte[], long);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.bind();org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getSchemaName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.clearResultSets();org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.catalog.types.DefaultInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RFResource.replace(boolean, java.io.InputStream, java.lang.String, long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateIndex(int, long, long[], org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IMaxScan.init(boolean, int, int, int, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.LockingPolicy, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.access.btree.index.B2I, org.apache.derby.impl.store.access.btree.index.B2IUndo);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.GenericPreparedStatement.completeCompile(org.apache.derby.impl.sql.compile.QueryTreeNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setArray(int, java.sql.Array);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.checkInvalidTriggerReference(java.lang.String);org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptorScan(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptorIndex2Scan(java.lang.String);org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.commit(boolean, javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.writeHeaderToArray(byte[]);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getConglom(int);org.apache.derby.iapi.store.raw.FetchDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection.setState(boolean);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.readExternalFromArray(org.apache.derby.iapi.services.io.ArrayInputStream);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.iapi.store.access.xa.XAXactId.equals(java.lang.Object);org.apache.derby.iapi.store.access.GlobalXact;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getJoinColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.setObject(java.lang.Object);org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.ResultColumn);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.doProjection(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(int, java.lang.StringBuffer, org.apache.derby.iapi.store.access.ConglomerateController, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.services.locks.Timeout;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScan(org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.getStopOperator(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.MethodCallNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getLogicalRightResultSet();org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.queueDeletePostCommitWork(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.bind(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openScanController(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(int, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredConnection40.createClob();org.apache.derby.iapi.jdbc.BrokeredConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.OptimizerImpl.rememberBestCost(int, org.apache.derby.iapi.sql.compile.CostEstimate);org.apache.derby.impl.sql.compile.CostEstimateImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.fetchNumFieldsAtSlot(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.getTypeCompiler();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.getUserPageNoWait(long);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.eliminateBooleanTrueAndBooleanTrue();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.toString();org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.delete();org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildIndexKeyRow(int, org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.impl.sql.execute.InsertConstantAction);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(boolean, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getLanguageConnectionContext();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.LockTableNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initSystemIndexVariables(org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.pushCurrentPrivType(int);org.apache.derby.iapi.util.ReuseFactory;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.setValidation();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScan.setCurrentLogFileFirstUnflushedPosition();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.execute.MaxMinAggregator.setup(java.lang.String);org.apache.derby.impl.sql.execute.OrderableAggregator;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.writePage(boolean, byte[], long);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.reposition(boolean, org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.markAffectedIndexes(java.util.Vector);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDouble(double, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderedColumnList.getColumnOrdering();org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.startLogBackup(java.io.File);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.pushableToSubqueries();org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionStatusString();org.apache.derby.impl.store.raw.xact.Xact;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.setup();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ConstantPoolEntry.put(org.apache.derby.iapi.services.classfile.ClassFormatOutput);org.apache.derby.iapi.services.classfile.ClassFormatOutput;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers();org.apache.derby.impl.sql.execute.TriggerEvents;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageAtSlot(int, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.isConstantExpression();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactXAResourceManager.recover(int);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.checkObserverException();org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.removeContainer();org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindUnaryOperator(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedBlob.setBytes(byte[], int, int, long);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.commit(boolean, javax.transaction.xa.Xid);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.isSigned(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(org.apache.derby.iapi.sql.execute.NoPutResultSet);org.apache.derby.impl.sql.execute.RowResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateAllCheckConstraints(java.util.Hashtable, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile();org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.generateHolder(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.PredicateList;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reopenCore();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean, java.util.Properties);org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnClassName(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.getJDBCTypeId();org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.next();org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(java.lang.String, java.util.Map);org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.getMoreResults(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.toString();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.NumericTypeCompiler.convertible(boolean, org.apache.derby.iapi.types.TypeId);org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.io.CPStorageFactory.doInit();org.apache.derby.impl.io.BaseStorageFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.TableName;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.replaceDeclaredGlobalTempTable(java.lang.String, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.conn.TempTableInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getSQLValueInterfaceName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasNonSelfReferencingFK(int);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.writePage(boolean, byte[], long);org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLStatementNode.makeResultDescription();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.validate();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.compress(org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.execute.ConstraintConstantAction[]);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.popSavePoints(boolean, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getTableUUID(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag();org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.pushNull(java.lang.String);org.apache.derby.impl.services.bytecode.BCJava;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement20.getInt(java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.PropertyConglomerate.saveServiceProperty(java.io.Serializable, java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addInvisibleColumns(int[], org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(int, int, java.util.Properties, long, long, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lookupStatement(org.apache.derby.impl.sql.GenericStatement);org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.iapi.types.XML.XMLExists(org.apache.derby.iapi.types.SqlXmlUtil);org.apache.derby.iapi.types.SqlXmlUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.bind();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(boolean, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindComparisonOperator();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCClass.addField(int, java.lang.String, java.lang.String);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.LeafControlRow.shrinkFor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLSerialize();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameTableBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(java.lang.String, java.sql.ResultSetMetaData, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.printSubNodes(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.toString();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.execute.ColumnInfo.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatableHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int, java.lang.String, org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(org.apache.derby.iapi.sql.execute.ExecRow, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockPreviousToFirstKey(int, int, org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.LeafControlRow);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.sql.execute.ValueRow.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.ArrayUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(org.apache.derby.iapi.util.JBitSet);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.CheckpointOperation.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.MiscResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.heap.Heap.writeExternal(java.io.ObjectOutput);org.apache.derby.iapi.services.io.FormatIdUtil;0;0;0;0;0
org.apache.derby.iapi.services.io.FormatIdInputStream.readObject();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery();org.apache.derby.iapi.types.SqlXmlUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.execute(int[], java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.lockRowAtSlotNoWaitExclusive(org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtDoneScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.run();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.store.access.sort.Scan.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.bind();org.apache.derby.impl.sql.compile.DMLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByColumn.toString();org.apache.derby.impl.sql.compile.OrderedColumn;0;0;0;0;0
org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.getNullAuthorizationID();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.store.raw.ContainerKey;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarFileJava2.getEntry(java.lang.String);org.apache.derby.impl.services.reflect.JarFile;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.recordExists(boolean, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.writeExternal(java.io.ObjectOutput);org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.recover(org.apache.derby.iapi.store.raw.data.DataFactory, org.apache.derby.iapi.store.raw.RawStoreFactory, org.apache.derby.iapi.store.raw.xact.TransactionFactory);org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.getColumn(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.decrypt(byte[], byte[], int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderQualifiers();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.compile.NodeFactoryImpl.canSupport(java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.callSubMethod(org.apache.derby.impl.services.bytecode.BCMethod);org.apache.derby.iapi.services.classfile.ClassHolder;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind();org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSParams(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.getTypeServices();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.purgeAtSlot(boolean, int, int);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CopyRowsOperation.readExternal(java.io.ObjectInput);org.apache.derby.iapi.services.io.CompressedNumber;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.setNames();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(org.apache.derby.iapi.sql.compile.NodeFactory, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.toString();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildEmptyIndexRow(int, org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortRowSource(org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.MergeScan;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.qualifyRecordFromSlot(int, java.lang.Object[], org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.iapi.store.access.RowUtil;0;0;0;0;0
org.apache.derby.iapi.types.NumberDataType.divide(org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.NumberDataValue);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.AggregateNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(boolean, int, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanCommittedDeletedRow(int, org.apache.derby.iapi.store.raw.FetchDescriptor, org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.LeafControlRow, org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.index.B2I;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.setParameters(org.apache.derby.iapi.sql.ParameterValueSet, org.apache.derby.iapi.types.DataTypeDescriptor[]);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BitConstantNode.init(java.lang.Object, java.lang.Object);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.GenericStatement.prepMinion(boolean, boolean, java.lang.Object[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows();org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.services.reflect.UpdateLoader.getClasspath();org.apache.derby.iapi.services.loader.ClassFactoryContext;0;0;0;0;0
org.apache.derby.impl.db.StoreClassFactoryContext.getLockSpace();org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.setIsRoot(boolean);org.apache.derby.iapi.types.SQLLongint;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.connect(java.lang.String, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.setExclusive(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateIndexNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.addOuterJoinArguments(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.startGlobalTransaction(byte[], byte[], int, org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.store.raw.RawStoreFactory);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimize(double, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.buildTableNumList(boolean, org.apache.derby.impl.sql.compile.FromTable);org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement30.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedPreparedStatement;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.hashCode();org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.getParameterMetaData();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.next();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.undoMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DistinctNode.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.getClassName(int);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.toString();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.treePrint(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager);org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.setExclusive(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.store.raw.log.FlushedScanHandle.getLoggable();org.apache.derby.impl.store.raw.log.LogRecord;0;0;0;0;0
org.apache.derby.catalog.GetProcedureColumns.getInt(int);org.apache.derby.vti.VTITemplate;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementTablePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindNonVTITables(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogAccessFile.writeInt(int);org.apache.derby.impl.store.raw.log.LogAccessFileBuffer;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.DDLConstantAction;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setPageStatus(byte, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.privRemoveFile(org.apache.derby.io.StorageFile);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.CastNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RecordId.toString();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(int[], long, org.apache.derby.iapi.store.access.BackingStoreHashtable, org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashTableResultSet.close();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(org.apache.derby.impl.sql.compile.ColumnReference, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.lang.String, long);org.apache.derby.impl.jdbc.UTF8Reader;0;0;0;0;0
org.apache.derby.iapi.types.SQLClob.normalize(org.apache.derby.iapi.types.DataTypeDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLVarchar;0;0;0;0;0
org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainer.writeToFile();org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getMaxColumnID();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryOperatorNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_RecordId.diag();org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow(byte, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.access.conglomerate.LogicalUndo);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.IndexToBaseRowNode.updateTargetLockMode();org.apache.derby.impl.sql.compile.FromBaseTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.check(boolean, java.lang.String, org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.updateRow();org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStreamInternal(boolean, int, java.io.Reader, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(boolean, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setRowId(int, java.sql.RowId);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.RowResultSet.close();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.setup();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.UpdateOperation.toString();org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.bootValidation(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.getTableName();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.jdbc.XATransactionState.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.InternalDriver.getMinorVersion();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.normalizeSynonymColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.logAndDo(org.apache.derby.iapi.store.raw.Loggable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScan(int, int, org.apache.derby.iapi.store.access.Qualifier[][], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAResource.commit(boolean, javax.transaction.xa.Xid);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(boolean, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.conn.CachedStatement.clearIdentity();org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.addBatch();org.apache.derby.impl.jdbc.EmbedStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getSchemaName();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.jdbc.EmbedXAConnection.checkRollback();org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getOldRowSet();org.apache.derby.impl.sql.execute.TableScanResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.usePageBuffer(byte[]);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setDeleteStatus(boolean, int, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.getRightOptPredicateList();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.copyColumnsToNewList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.services.io.FormatableBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptorIndex2Scan(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.catalog.SYSFILESRowFactory;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectGeneratedClass.getMethod(java.lang.String);org.apache.derby.impl.services.reflect.LoadedGeneratedClass;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorByName(java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(boolean, java.lang.String, java.util.Properties, org.apache.derby.io.StorageFactory);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(int, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.preprocessSourceRow(org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.impl.sql.execute.WriteCursorConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.InListOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getLastRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.newPage(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BaseContainerHandle, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.store.access.RllRAMAccessManager.bootLookupSystemLockLevel(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.store.access.RAMAccessManager;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getEmptyExecRow(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(boolean, java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.conn.LanguageConnectionContext, org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocationCache.invalidateLastExtent();org.apache.derby.impl.store.raw.data.FileContainer;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.ContainerBasicOperation.findContainer(org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.reopenCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.DMLWriteResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.pullVirtualIsReferenced();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.evaluateCheckConstraints();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getScanStatisticsText(int, java.lang.String);org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(org.apache.derby.iapi.sql.dictionary.SchemaDescriptor);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.addOptPredicate(org.apache.derby.iapi.sql.compile.OptimizablePredicate);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForRead(boolean, boolean, org.apache.derby.impl.store.access.conglomerate.RowPosition, org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedClob.position(java.sql.Clob, long);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.iapi.types.SQLReal.lessThan(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.transformOuterJoins(int, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.UnionResultSet.getCurrentRow();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(java.util.List, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ScanQualifier[][], org.apache.derby.impl.sql.catalog.TabInfoImpl);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.DateTypeCompiler.comparable(boolean, org.apache.derby.iapi.services.loader.ClassFactory, org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.store.access.RAMTransaction.openSort(long);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.impl.store.raw.data.ReclaimSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTableNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_setNullability(boolean, int, org.apache.derby.iapi.sql.dictionary.CatalogRowFactory, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.restoreDataDirectory(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.getReturnValueForSet();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTableNode.referencesSessionSchema();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.stream.SingleStream.stop();org.apache.derby.impl.services.stream.BasicHeaderPrintWriter;0;0;0;0;0
org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.ExpressionClassBuilderInterface, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.ContainerKey);org.apache.derby.impl.store.access.btree.ControlRow;0;0;0;0;0
org.apache.derby.impl.sql.execute.SortResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.flatten(org.apache.derby.impl.sql.compile.GroupByList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.ResultColumnList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SelectNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkForInvalidDefaults();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.iapi.util.JBitSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getStatisticsDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.GenericStorablePreparedStatement.toString();org.apache.derby.impl.sql.GenericPreparedStatement;0;0;0;0;0
org.apache.derby.impl.services.bytecode.GClass.writeClassFile(boolean, java.lang.String, java.lang.Throwable);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.remove(org.apache.derby.iapi.store.raw.xact.TransactionId);org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.visit(org.apache.derby.iapi.sql.compile.Visitable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateQualMethod(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.TempRAFContainer.writePage(boolean, byte[], long);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(java.lang.String, java.lang.String, java.lang.String, short);org.apache.derby.impl.services.bytecode.BCClass;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStreamInternal(boolean, int, java.io.InputStream, long);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(int, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.BinaryListOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedStatement.setMaxRows(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTree.createBranchTemplate(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraint();org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.TableOperatorNode;0;0;0;0;0
org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSystemSchemaAuthorization(java.lang.String, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.TablePrivilegesNode.addAll();org.apache.derby.impl.sql.execute.TablePrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.CallStatementResultSet.open();org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation, org.apache.derby.impl.sql.execute.TableScanResultSet);org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.allSamePrecendence(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.getAtMostOneResultColumn(java.lang.String, org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedCallableStatement.getShort(int);org.apache.derby.impl.jdbc.EmbedResultSet;0;0;0;0;0
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.readPage(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getStatementIsolationLevel();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTriggerDescriptor(org.apache.derby.iapi.sql.dictionary.TriggerDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.load(boolean, org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.access.RowLocationRetRowSource);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName();org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.initPage(boolean, boolean, int[], long, org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns();org.apache.derby.impl.sql.compile.GroupByColumn;0;0;0;0;0
org.apache.derby.impl.services.monitor.BaseMonitor.classFromIdentifier(int);org.apache.derby.iapi.services.io.FormatableInstanceGetter;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(org.apache.derby.impl.sql.compile.TableName);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.unblockBackup();org.apache.derby.impl.store.raw.xact.XactFactory;0;0;0;0;0
org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.iapi.services.classfile.ClassHolder.addIndexReference(int, int, int);org.apache.derby.iapi.services.classfile.ConstantPoolEntry;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrement(org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.setValueFromResultSet(boolean, int, java.sql.ResultSet);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterType(int);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.isLengthLess();org.apache.derby.iapi.types.SQLBinary;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(boolean, org.apache.derby.impl.sql.compile.SelectNode);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.eliminateNots(boolean);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.store.raw.data.OverflowInputStream.resetStream();org.apache.derby.impl.store.raw.data.ByteHolderInputStream;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateColumnDescriptor(boolean, int[], java.lang.String, org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.dictionary.ColumnDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.markCorrupt(org.apache.derby.iapi.error.StandardException);org.apache.derby.impl.store.raw.log.LogAccessFile;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeController.insert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.TemplateRow;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegation(org.apache.derby.impl.sql.compile.ValueNode, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.services.reflect.JarLoader.loadClassData(boolean, java.lang.String, java.lang.String);org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectName(java.lang.String);org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.sql.compile.ParameterNode.setType(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.iapi.types.DataTypeDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getStatementExecutionPlanText(int);org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics;0;0;0;0;0
org.apache.derby.impl.sql.compile.Predicate.selectivity(org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.copyPredicatesToOtherList(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.setClause(int);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.InsertResultSet.isSingleRowResultSet();org.apache.derby.impl.sql.execute.NormalizeResultSet;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(int, int, java.lang.Object[], org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.impl.store.raw.data.StoredRecordHeader);org.apache.derby.impl.store.raw.data.CachedPage;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(org.apache.derby.iapi.types.DataValueDescriptor[][], org.apache.derby.iapi.types.RowLocation[], org.apache.derby.iapi.types.RowLocation[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindComparisonOperator();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(boolean, boolean, org.apache.derby.io.StorageRandomAccessFile);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.services.jce.JCECipherProvider.encrypt(byte[], byte[], int, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.newEmbedResultSetMetaData(org.apache.derby.iapi.sql.ResultDescription);org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.raw.data.D_StoredPage.diag_detail(java.util.Properties);org.apache.derby.impl.store.raw.data.StoredPage;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DirectActions.actionUpdate(int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet, org.apache.derby.iapi.store.raw.RecordHandle, org.apache.derby.iapi.store.raw.xact.RawTransaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireBeforeTriggers(java.util.Hashtable);org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.makeRow(org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.dictionary.TupleDescriptor);org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.bindExpressions(org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getNodeName();org.apache.derby.iapi.services.i18n.MessageService;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.containsParameterNode();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.access.btree.ControlRow.getConglom(int);org.apache.derby.impl.store.access.btree.BTree;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.logAndUndo(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.Compensation, org.apache.derby.iapi.store.raw.log.LogInstant);org.apache.derby.impl.store.raw.xact.SavePoint;0;0;0;0;0
org.apache.derby.impl.store.raw.log.ReadOnly.getTruncationLWM(org.apache.derby.catalog.UUID);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(org.apache.derby.iapi.sql.Activation);org.apache.derby.iapi.sql.dictionary.SPSDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(java.lang.String);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.iapi.types.TypeId.toParsableString(org.apache.derby.iapi.types.DataTypeDescriptor);org.apache.derby.catalog.types.BaseTypeIdImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(int);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.undoMe(int, org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.log.LogToFile.disableLogArchiveMode();org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(org.apache.derby.impl.store.raw.data.OverflowInputStream);org.apache.derby.impl.store.raw.data.OverflowInputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableName();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.diag.SpaceTable.next();org.apache.derby.iapi.error.PublicAPI;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getIsOverflow(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.diag.TransactionTable.next();org.apache.derby.iapi.sql.conn.ConnectionUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setSQLXML(int, java.sql.SQLXML);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.isEquivalent(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(boolean, boolean, boolean, org.apache.derby.iapi.sql.compile.Optimizable, org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(long, org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.letGo(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainer;0;0;0;0;0
org.apache.derby.iapi.types.SQLTinyint.notEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUserName();org.apache.derby.impl.jdbc.EmbedConnection;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.generateCore(int, org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.SubqueryList, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.updatePageVersion();org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(org.apache.derby.catalog.UUID);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.getNewInstance();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction();org.apache.derby.impl.sql.compile.DMLModStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.NoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.data.InsertOperation.restoreMe(org.apache.derby.iapi.services.io.LimitObjectInput, org.apache.derby.iapi.store.raw.log.LogInstant, org.apache.derby.iapi.store.raw.Transaction, org.apache.derby.impl.store.raw.data.BasePage);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.raw.data.BaseContainer.letGo(org.apache.derby.impl.store.raw.data.BaseContainerHandle);org.apache.derby.impl.store.raw.data.BaseContainerHandle;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreePostCommit.performWork(org.apache.derby.iapi.services.context.ContextManager);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(org.apache.derby.impl.sql.execute.ColumnInfo[]);org.apache.derby.impl.sql.execute.ColumnInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.CallStatementNode.optimize();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.RawStore.restoreRemainingFromBackup(java.lang.String);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.HashScanResultSet.close();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(boolean, java.lang.String, java.lang.String, org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.CurrentRowLocationNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNode.genIsNullTree();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBlob.setWidth(boolean, int, int);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int);org.apache.derby.impl.sql.compile.JoinNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SQLToJavaValueNode.remapColumnReferencesToExpressions();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.resetOutputStream();org.apache.derby.iapi.services.io.FormatIdOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.compile.TernaryOperatorNode.accept(org.apache.derby.iapi.sql.compile.Visitor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.setTimeStamp(org.apache.derby.iapi.store.raw.PageTimeStamp);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.decrementLevel(int);org.apache.derby.impl.sql.compile.FromList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.methodReturn();org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateSchemaNode.toString();org.apache.derby.impl.sql.compile.DDLStatementNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.populateSYSDUMMY1(org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.impl.sql.catalog.TabInfoImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(org.apache.derby.iapi.services.context.Context);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.AndNode.postBindFixup();org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.purgeOverflowAtSlot(boolean, int, org.apache.derby.iapi.store.raw.RecordHandle);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(org.apache.derby.impl.sql.compile.FromBaseTable);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckConstraints(org.apache.derby.impl.sql.compile.ExpressionClassBuilder, org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.impl.sql.compile.ExpressionClassBuilder;0;0;0;0;0
org.apache.derby.impl.sql.compile.BooleanConstantNode.init(java.lang.Object);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.VTIResultSet.close();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableOperatorNode.updateBestPlanMap(java.lang.Object, short);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BranchControlRow.getRowTemplate(org.apache.derby.impl.store.access.btree.OpenBTree);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.isQualifier(boolean, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.closeForEndTransaction(boolean);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.close();org.apache.derby.iapi.store.access.BackingStoreHashtable;0;0;0;0;0
org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ColumnReference.getClone();org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.TransactionTable.hasRollbackFirstTransaction();org.apache.derby.impl.store.raw.xact.TransactionTableEntry;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.savePosition(org.apache.derby.iapi.store.access.conglomerate.Conglomerate, org.apache.derby.iapi.store.raw.Page);org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.PredicateList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtStartForForwardScan(org.apache.derby.impl.store.access.conglomerate.RowPosition);org.apache.derby.impl.store.access.conglomerate.GenericController;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int, int, int, java.lang.Object, org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream);org.apache.derby.impl.store.raw.data.StoredFieldHeader;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropTriggerNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.doInsert(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrNode.eliminateNots(boolean);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericAuthorizer.refresh();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(org.apache.derby.impl.sql.compile.ColumnReference);org.apache.derby.impl.sql.compile.ColumnReference;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.toTimestamp(java.sql.Date);org.apache.derby.iapi.types.SQLDate;0;0;0;0;0
org.apache.derby.iapi.types.SQLNationalLongvarchar.setFrom(org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLChar;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.compactColumns(boolean, boolean);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.IsNullNode.optimizableEqualityNode(boolean, int, org.apache.derby.iapi.sql.compile.Optimizable);org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedConnectionContext.cleanupOnError(java.lang.Throwable);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireAfterTriggers();org.apache.derby.impl.sql.execute.UpdateResultSet;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(boolean, boolean, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.iapi.types.NumberDataValue, org.apache.derby.iapi.types.RowLocation);org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromTable.isOneRowScan();org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.generateReceiver(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.JavaValueNode;0;0;0;0;0
org.apache.derby.impl.sql.GenericActivationHolder.getNumSubqueries();org.apache.derby.impl.sql.execute.BaseActivation;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bind();org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.pushExpressions(org.apache.derby.impl.sql.compile.PredicateList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.Xact.doComplete(java.lang.Integer);org.apache.derby.iapi.store.raw.xact.RawTransaction;0;0;0;0;0
org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initialize(boolean);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLDouble.greaterOrEquals(org.apache.derby.iapi.types.DataValueDescriptor, org.apache.derby.iapi.types.DataValueDescriptor);org.apache.derby.iapi.types.SQLBoolean;0;0;0;0;0
org.apache.derby.impl.store.access.btree.index.B2I.compressConglomerate(org.apache.derby.iapi.store.access.conglomerate.TransactionManager, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.access.btree.OpenBTree;0;0;0;0;0
org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(boolean, java.lang.String);org.apache.derby.iapi.services.loader.ClassInspector;0;0;0;0;0
org.apache.derby.impl.services.daemon.BasicDaemon.run();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSParams(java.util.Vector, org.apache.derby.iapi.sql.dictionary.SPSDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(java.lang.Object, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.catalog.TabInfoImpl.getCreateHeapProperties();org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.generate(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ActivationClassBuilder, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(boolean[], int, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.conn.LanguageConnectionContext);org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.printSubNodes(int);org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.logRow(boolean, byte, int, int, int, int, int, int, java.lang.Object[], org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream, org.apache.derby.iapi.services.io.FormatableBitSet);org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadGeneratedClassFromData(java.lang.String, org.apache.derby.iapi.util.ByteArray);org.apache.derby.impl.services.reflect.ReflectLoaderJava2;0;0;0;0;0
org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(boolean, int, java.lang.String);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.CastNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(java.util.Properties, org.apache.derby.iapi.store.access.TransactionController, org.apache.derby.impl.sql.catalog.DD_Version);org.apache.derby.iapi.util.IdUtil;0;0;0;0;0
org.apache.derby.iapi.types.SQLSmallint.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.execute.TableScanResultSet.getCurrentRow();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.bind();org.apache.derby.impl.sql.compile.ResultColumnList;0;0;0;0;0
org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.ValueNodeList.compatible(org.apache.derby.impl.sql.compile.ValueNode);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows();org.apache.derby.impl.sql.execute.RowUtil;0;0;0;0;0
org.apache.derby.impl.store.access.sort.SortBuffer.reset();org.apache.derby.impl.store.access.sort.NodeAllocator;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedDataSource.findDriver();org.apache.derby.jdbc.InternalDriver;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(org.apache.derby.iapi.types.DataValueDescriptor[]);org.apache.derby.impl.store.access.conglomerate.RowPosition;0;0;0;0;0
org.apache.derby.impl.sql.compile.SetOperatorNode.pullOptPredicates(org.apache.derby.iapi.sql.compile.OptimizablePredicateList);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.sql.compile.ExecSPSNode.bind();org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(org.apache.derby.iapi.sql.compile.CostEstimate, org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer, org.apache.derby.iapi.sql.compile.RowOrdering);org.apache.derby.impl.sql.compile.Predicate;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeScan.positionAtRowLocation(org.apache.derby.iapi.types.RowLocation);org.apache.derby.iapi.error.StandardException;0;0;0;0;0
org.apache.derby.jdbc.EmbeddedXADataSource.getXAConnection();org.apache.derby.jdbc.ReferenceableDataSource;0;0;0;0;0
org.apache.derby.impl.load.ExportAbstract.doAllTheWork();org.apache.derby.impl.load.ControlInfo;0;0;0;0;0
org.apache.derby.iapi.types.SQLTime.parseTime(boolean, java.lang.String, java.util.Calendar, org.apache.derby.iapi.services.i18n.LocaleFinder);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.log.D_LogToFile.diag();org.apache.derby.iapi.services.diag.DiagnosticableGeneric;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int);org.apache.derby.impl.store.raw.data.StoredRecordHeader;0;0;0;0;0
org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(org.apache.derby.iapi.sql.ResultSet);org.apache.derby.impl.sql.execute.NoRowsResultSetImpl;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(java.io.Reader, java.lang.String);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.RowResultSetNode.toString();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.getContainerProperties(java.util.Properties);org.apache.derby.impl.store.raw.data.StreamFileContainer;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(boolean, org.apache.derby.iapi.util.JBitSet, org.apache.derby.impl.sql.compile.FromList);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(org.apache.derby.iapi.services.context.ContextManager, org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor, org.apache.derby.iapi.store.access.TransactionController);org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor;0;0;0;0;0
org.apache.derby.iapi.types.UserType.getShort();org.apache.derby.iapi.types.DataType;0;0;0;0;0
org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBoolean(boolean, java.lang.String);org.apache.derby.iapi.jdbc.BrokeredCallableStatement;0;0;0;0;0
org.apache.derby.impl.sql.compile.DropAliasNode.bind();org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.addNewPredicate(org.apache.derby.impl.sql.compile.Predicate);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.OrderByList.removeDupColumns();org.apache.derby.impl.sql.compile.QueryTreeNodeVector;0;0;0;0;0
org.apache.derby.impl.db.BasicDatabase.getAllDatabaseProperties();org.apache.derby.iapi.services.context.ContextService;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.growStack(int, org.apache.derby.impl.services.bytecode.Type);org.apache.derby.impl.services.bytecode.Type;0;0;0;0;0
org.apache.derby.impl.sql.compile.TimestampTypeCompiler.compatible(org.apache.derby.iapi.types.TypeId);org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorByName(boolean, java.lang.String, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.iapi.sql.dictionary.TableDescriptor);org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.readAllocPageHeader();org.apache.derby.iapi.services.io.ArrayInputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.BaseActivation.getCurrentConnection();org.apache.derby.iapi.services.context.ContextManager;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(org.apache.derby.iapi.sql.dictionary.DataDictionary);org.apache.derby.impl.sql.compile.CollectNodesVisitor;0;0;0;0;0
org.apache.derby.impl.store.access.sort.MergeScanRowSource.getNextRowFromRowSource();org.apache.derby.impl.store.access.sort.SortBuffer;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumnList.isCloneable();org.apache.derby.impl.sql.compile.ResultColumn;0;0;0;0;0
org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int);org.apache.derby.impl.sql.compile.OrderByList;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedResultSet.findColumnName(java.lang.String);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultColumn.getTableNumber();org.apache.derby.impl.sql.compile.VirtualColumnNode;0;0;0;0;0
org.apache.derby.impl.services.locks.LockControl.removeWaiter(int, java.util.List, org.apache.derby.impl.services.locks.LockSet);org.apache.derby.impl.services.locks.LockSet;0;0;0;0;0
org.apache.derby.impl.sql.execute.DDLConstantAction.storeConstraintDependenciesOnPrivileges(org.apache.derby.catalog.UUID, org.apache.derby.iapi.sql.Activation, org.apache.derby.iapi.sql.depend.Dependent);org.apache.derby.iapi.sql.dictionary.StatementPermission;0;0;0;0;0
org.apache.derby.impl.sql.execute.JarUtil.replace(boolean, java.io.InputStream);org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;0;0;0;0;0
org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(org.apache.derby.impl.sql.compile.FromTable, org.apache.derby.impl.sql.compile.ResultColumnList);org.apache.derby.impl.sql.compile.QueryTreeNode;0;0;0;0;0
org.apache.derby.diag.TransactionTable.getString(int);org.apache.derby.iapi.util.StringUtil;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getProperty(java.lang.String);org.apache.derby.iapi.services.property.PropertyUtil;0;0;0;0;0
org.apache.derby.impl.sql.compile.ConditionalNode.categorize(boolean, org.apache.derby.iapi.util.JBitSet);org.apache.derby.impl.sql.compile.ValueNodeList;0;0;0;0;0
org.apache.derby.impl.store.raw.data.EncryptData.removeOldVersionOfContainers(boolean);org.apache.derby.impl.store.raw.data.BaseDataFileFactory;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.init(java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int, int, int, java.lang.Object);org.apache.derby.impl.jdbc.Util;0;0;0;0;0
org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.toString();org.apache.derby.impl.sql.execute.ConstraintConstantAction;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(org.apache.derby.iapi.services.compiler.MethodBuilder, org.apache.derby.impl.sql.compile.ExpressionClassBuilder);org.apache.derby.impl.sql.compile.FromTable;0;0;0;0;0
org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.boot(boolean, java.util.Properties);org.apache.derby.iapi.services.monitor.Monitor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ProjectRestrictNode.feasibleJoinStrategy(org.apache.derby.iapi.sql.compile.OptimizablePredicateList, org.apache.derby.iapi.sql.compile.Optimizer);org.apache.derby.impl.sql.compile.SingleChildResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.buildDescriptor(org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.TupleDescriptor, org.apache.derby.iapi.sql.execute.ExecRow);org.apache.derby.iapi.sql.dictionary.CatalogRowFactory;0;0;0;0;0
org.apache.derby.impl.store.access.conglomerate.GenericController.isTableLocked();org.apache.derby.impl.store.access.conglomerate.OpenConglomerate;0;0;0;0;0
org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean, boolean, int, java.lang.String, java.lang.String, java.lang.String[], org.apache.derby.iapi.sql.dictionary.DataDictionary, org.apache.derby.iapi.sql.dictionary.SchemaDescriptor, org.apache.derby.impl.sql.compile.ConstraintDefinitionNode);org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.RowLocking3Escalate.lockContainer(boolean, boolean, org.apache.derby.iapi.store.raw.ContainerHandle, org.apache.derby.iapi.store.raw.Transaction);org.apache.derby.impl.store.raw.xact.ContainerLocking3;0;0;0;0;0
org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getFromTableByName(boolean, java.lang.String, java.lang.String);org.apache.derby.impl.sql.compile.ResultSetNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredColumnPriv(org.apache.derby.iapi.sql.dictionary.ColumnDescriptor);org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.getCorrespondingPrimitiveTypeName();org.apache.derby.impl.sql.compile.BaseTypeCompiler;0;0;0;0;0
org.apache.derby.impl.load.ImportAbstract.next();org.apache.derby.impl.load.ImportReadData;0;0;0;0;0
org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(java.util.Vector, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.SubqueryList);org.apache.derby.impl.sql.compile.SubqueryList;0;0;0;0;0
org.apache.derby.impl.services.bytecode.BCMethod.push(double);org.apache.derby.impl.services.bytecode.CodeChunk;0;0;0;0;0
org.apache.derby.impl.store.raw.data.PurgeOperation.writeOptionalDataToBuffer(boolean, org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.impl.store.raw.data.PageBasicOperation;0;0;0;0;0
org.apache.derby.impl.sql.compile.FromVTI.preprocess(int, org.apache.derby.impl.sql.compile.FromList, org.apache.derby.impl.sql.compile.GroupByList);org.apache.derby.impl.sql.compile.NewInvocationNode;0;0;0;0;0
org.apache.derby.iapi.types.SQLBit.typePrecedence();org.apache.derby.iapi.types.TypeId;0;0;0;0;0
org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.setFullTypeInfo();org.apache.derby.impl.sql.compile.UnaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(org.apache.derby.iapi.store.raw.xact.RawTransaction);org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;0;0;0;0;0
org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TriggerEventActivator.setupExecutors(org.apache.derby.impl.sql.execute.TriggerInfo);org.apache.derby.impl.sql.execute.TriggerInfo;0;0;0;0;0
org.apache.derby.impl.sql.execute.DependentResultSet.finish();org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl;0;0;0;0;0
org.apache.derby.impl.store.raw.xact.XactFactory.resetTranId();org.apache.derby.impl.store.raw.xact.TransactionTable;0;0;0;0;0
org.apache.derby.impl.store.raw.data.AllocPage.canAddFreePage(long);org.apache.derby.impl.store.raw.data.BasePage;0;0;0;0;0
org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkForSupportedDataType(int);org.apache.derby.impl.jdbc.ConnectionChild;0;0;0;0;0
org.apache.derby.impl.store.raw.data.FileContainer.getEmbryonicPage(java.io.DataInput);org.apache.derby.impl.store.raw.data.AllocPage;0;0;0;0;0
org.apache.derby.impl.sql.GenericParameterValueSet.allAreSet();org.apache.derby.impl.sql.GenericParameter;0;0;0;0;0
org.apache.derby.impl.services.locks.LockSet.unlock(int, org.apache.derby.iapi.services.locks.Latch);org.apache.derby.iapi.services.diag.DiagnosticUtil;0;0;0;0;0
org.apache.derby.impl.store.raw.data.CachedPage.readPage(org.apache.derby.iapi.store.raw.PageKey, org.apache.derby.impl.store.raw.data.FileContainer);org.apache.derby.iapi.store.raw.PageKey;0;0;0;0;0
org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(org.apache.derby.iapi.types.DataValueDescriptor[], org.apache.derby.impl.store.access.btree.BTreeRowPosition);org.apache.derby.impl.store.access.btree.BTreeScan;0;0;0;0;0
org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getActivation();org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl;0;0;0;0;0
org.apache.derby.impl.sql.execute.TablePrivilegeInfo.executeGrantRevoke(boolean, java.util.List, org.apache.derby.iapi.sql.Activation);org.apache.derby.impl.sql.execute.PrivilegeInfo;0;0;0;0;0
org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.init(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object);org.apache.derby.impl.sql.compile.BinaryOperatorNode;0;0;0;0;0
org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction();org.apache.derby.iapi.sql.dictionary.TableDescriptor;0;0;0;0;0
org.apache.derby.impl.sql.compile.ResultSetNode.genNormalizeResultSetNode(boolean, org.apache.derby.impl.sql.compile.ResultSetNode);org.apache.derby.iapi.sql.compile.NodeFactory;0;0;0;0;0
