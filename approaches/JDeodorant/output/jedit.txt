org.gjt.sp.util.WorkThread	[org.gjt.sp.util.WorkThread::org.gjt.sp.util.WorkThreadPool pool, org.gjt.sp.util.WorkThread::java.lang.String status, org.gjt.sp.util.WorkThread::setStatus(java.lang.String):void, org.gjt.sp.util.WorkThread::int progressValue, org.gjt.sp.util.WorkThread::setProgressValue(int):void, org.gjt.sp.util.WorkThread::int progressMaximum, org.gjt.sp.util.WorkThread::setProgressMaximum(int):void]
org.gjt.sp.util.WorkThread	[org.gjt.sp.util.WorkThread::java.lang.Object abortLock, org.gjt.sp.util.WorkThread::boolean abortable, org.gjt.sp.util.WorkThread::boolean aborted, org.gjt.sp.util.WorkThread::setAbortable(boolean):void, org.gjt.sp.util.WorkThread::abortCurrentRequest():void]
org.gjt.sp.util.WorkThread	[org.gjt.sp.util.WorkThread::java.lang.String status, org.gjt.sp.util.WorkThread::setStatus(java.lang.String):void, org.gjt.sp.util.WorkThread::int progressValue, org.gjt.sp.util.WorkThread::setProgressValue(int):void]
installer.CBZip2InputStream	[installer.CBZip2InputStream::int m_bsBuff, installer.CBZip2InputStream::int m_bsLive, installer.CBZip2InputStream::java.io.InputStream m_input, installer.CBZip2InputStream::bsFinishedWithStream():void, installer.CBZip2InputStream::bsR(int):int, installer.CBZip2InputStream::bsSetStream(java.io.InputStream):void]
org.gjt.sp.jedit.gui.PasteFromListDialog	[org.gjt.sp.jedit.gui.PasteFromListDialog::javax.swing.JList clips, org.gjt.sp.jedit.gui.PasteFromListDialog::showClipText():void, org.gjt.sp.jedit.gui.PasteFromListDialog::javax.swing.JTextArea clipText, org.gjt.sp.jedit.gui.PasteFromListDialog::getSelectedClipText():java.lang.String]
org.gjt.sp.jedit.gui.StatusBar	[org.gjt.sp.jedit.gui.StatusBar::javax.swing.JPanel panel, org.gjt.sp.jedit.gui.StatusBar::java.awt.Component messageComp, org.gjt.sp.jedit.gui.StatusBar::setMessageComponent(java.awt.Component):void, org.gjt.sp.jedit.gui.StatusBar::boolean currentMessageIsIO]
org.gjt.sp.jedit.io.VFS	[org.gjt.sp.jedit.io.VFS::java.lang.String name, org.gjt.sp.jedit.io.VFS::_listDirectory(java.lang.Object, java.lang.String, java.awt.Component):org.gjt.sp.jedit.io.VFS.DirectoryEntry[], org.gjt.sp.jedit.io.VFS::_createInputStream(java.lang.Object, java.lang.String, boolean, java.awt.Component):java.io.InputStream, org.gjt.sp.jedit.io.VFS::_createOutputStream(java.lang.Object, java.lang.String, java.awt.Component):java.io.OutputStream, org.gjt.sp.jedit.io.VFS::createVFSSession(java.lang.String, java.awt.Component):java.lang.Object, org.gjt.sp.jedit.io.VFS::copy(org.gjt.sp.util.ProgressObserver, java.lang.String, java.lang.String, java.awt.Component, boolean):boolean, org.gjt.sp.jedit.io.VFS::load(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::insert(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::save(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::int caps, org.gjt.sp.jedit.io.VFS::copy(org.gjt.sp.util.ProgressObserver, org.gjt.sp.jedit.io.VFS, java.lang.Object, java.lang.String, org.gjt.sp.jedit.io.VFS, java.lang.Object, java.lang.String, java.awt.Component, boolean):boolean, org.gjt.sp.jedit.io.VFS::_getDirectoryEntry(java.lang.Object, java.lang.String, java.awt.Component):org.gjt.sp.jedit.io.VFS.DirectoryEntry]
org.gjt.sp.jedit.io.VFS	[org.gjt.sp.jedit.io.VFS::getFileName(java.lang.String):java.lang.String, org.gjt.sp.jedit.io.VFS::getTwoStageSaveName(java.lang.String):java.lang.String, org.gjt.sp.jedit.io.VFS::getParentOfPath(java.lang.String):java.lang.String]
org.gjt.sp.jedit.io.VFS	[org.gjt.sp.jedit.io.VFS::java.lang.String name, org.gjt.sp.jedit.io.VFS::_listDirectory(java.lang.Object, java.lang.String, java.awt.Component):org.gjt.sp.jedit.io.VFS.DirectoryEntry[], org.gjt.sp.jedit.io.VFS::_createInputStream(java.lang.Object, java.lang.String, boolean, java.awt.Component):java.io.InputStream, org.gjt.sp.jedit.io.VFS::_createOutputStream(java.lang.Object, java.lang.String, java.awt.Component):java.io.OutputStream]
org.gjt.sp.jedit.io.VFS	[org.gjt.sp.jedit.io.VFS::java.lang.String name, org.gjt.sp.jedit.io.VFS::_listDirectory(java.lang.Object, java.lang.String, java.awt.Component):org.gjt.sp.jedit.io.VFS.DirectoryEntry[], org.gjt.sp.jedit.io.VFS::_createInputStream(java.lang.Object, java.lang.String, boolean, java.awt.Component):java.io.InputStream, org.gjt.sp.jedit.io.VFS::_createOutputStream(java.lang.Object, java.lang.String, java.awt.Component):java.io.OutputStream, org.gjt.sp.jedit.io.VFS::createVFSSession(java.lang.String, java.awt.Component):java.lang.Object, org.gjt.sp.jedit.io.VFS::copy(org.gjt.sp.util.ProgressObserver, java.lang.String, java.lang.String, java.awt.Component, boolean):boolean, org.gjt.sp.jedit.io.VFS::load(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::insert(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::save(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, java.lang.String):boolean, org.gjt.sp.jedit.io.VFS::int caps, org.gjt.sp.jedit.io.VFS::copy(org.gjt.sp.util.ProgressObserver, org.gjt.sp.jedit.io.VFS, java.lang.Object, java.lang.String, org.gjt.sp.jedit.io.VFS, java.lang.Object, java.lang.String, java.awt.Component, boolean):boolean, org.gjt.sp.jedit.io.VFS::_getDirectoryEntry(java.lang.Object, java.lang.String, java.awt.Component):org.gjt.sp.jedit.io.VFS.DirectoryEntry, org.gjt.sp.jedit.io.VFS::_canonPath(java.lang.Object, java.lang.String, java.awt.Component):java.lang.String, org.gjt.sp.jedit.io.VFS::_listDirectory(java.lang.Object, java.util.ArrayList, java.util.ArrayList, java.lang.String, gnu.regexp.RE, boolean, java.awt.Component):void, org.gjt.sp.jedit.io.VFS::_listDirectory(java.lang.Object, java.lang.String, java.lang.String, boolean, java.awt.Component):java.lang.String[], org.gjt.sp.jedit.io.VFS::getDefaultColorFor(java.lang.String):java.awt.Color]
org.gjt.sp.jedit.options.ShortcutsOptionPane	[org.gjt.sp.jedit.options.ShortcutsOptionPane::java.util.Vector allBindings, org.gjt.sp.jedit.options.ShortcutsOptionPane::createBinding(java.lang.String, java.lang.String, java.lang.String):org.gjt.sp.jedit.gui.GrabKeyDialog.KeyBinding, org.gjt.sp.jedit.options.ShortcutsOptionPane::addBindings(java.lang.String, java.lang.String, java.util.Vector):void, org.gjt.sp.jedit.options.ShortcutsOptionPane::createModel(java.lang.String, java.lang.String[]):org.gjt.sp.jedit.options.ShortcutsOptionPane.ShortcutsModel]
org.gjt.sp.jedit.print.BufferPrintable	[org.gjt.sp.jedit.print.BufferPrintable::org.gjt.sp.jedit.Buffer buffer, org.gjt.sp.jedit.print.BufferPrintable::java.awt.Font font, org.gjt.sp.jedit.print.BufferPrintable::java.awt.font.LineMetrics lm, org.gjt.sp.jedit.print.BufferPrintable::paintFooter(java.awt.Graphics2D, double, double, double, double, int, boolean):double, org.gjt.sp.jedit.print.BufferPrintable::paintHeader(java.awt.Graphics2D, double, double, double, boolean):double]
org.gjt.sp.jedit.print.BufferPrintable	[org.gjt.sp.jedit.print.BufferPrintable::java.awt.print.PrinterJob job, org.gjt.sp.jedit.print.BufferPrintable::print():void, org.gjt.sp.jedit.print.BufferPrintable::java.lang.Object format]
org.gjt.sp.jedit.search.SearchBar	[org.gjt.sp.jedit.search.SearchBar::javax.swing.Timer timer, org.gjt.sp.jedit.search.SearchBar::int searchStart, org.gjt.sp.jedit.search.SearchBar::timerIncrementalSearch(int, boolean):void, org.gjt.sp.jedit.search.SearchBar::boolean searchReverse]
org.gjt.sp.jedit.search.SearchBar	[org.gjt.sp.jedit.search.SearchBar::javax.swing.JCheckBox ignoreCase, org.gjt.sp.jedit.search.SearchBar::javax.swing.JCheckBox regexp, org.gjt.sp.jedit.search.SearchBar::update():void]
org.gjt.sp.jedit.search.SearchDialog	[org.gjt.sp.jedit.search.SearchDialog::org.gjt.sp.jedit.gui.HistoryTextArea replace, org.gjt.sp.jedit.search.SearchDialog::javax.swing.JRadioButton stringReplace, org.gjt.sp.jedit.search.SearchDialog::javax.swing.JRadioButton beanShellReplace, org.gjt.sp.jedit.search.SearchDialog::createReplaceLabelAndField(javax.swing.JPanel, java.awt.GridBagConstraints):void]
org.gjt.sp.jedit.search.SearchDialog	[org.gjt.sp.jedit.search.SearchDialog::javax.swing.JButton findBtn, org.gjt.sp.jedit.search.SearchDialog::javax.swing.JButton replaceAndFindBtn, org.gjt.sp.jedit.search.SearchDialog::javax.swing.JButton replaceAllBtn, org.gjt.sp.jedit.search.SearchDialog::javax.swing.JButton closeBtn, org.gjt.sp.jedit.search.SearchDialog::createButtonsPanel():javax.swing.Box]
bsh.BshClassManager	[bsh.BshClassManager::java.util.Hashtable definingClasses, bsh.BshClassManager::isClassBeingDefined(java.lang.String):boolean, bsh.BshClassManager::definingClass(java.lang.String):void, bsh.BshClassManager::doneDefiningClass(java.lang.String):void, bsh.BshClassManager::java.util.Hashtable definingClassesBaseNames, bsh.BshClassManager::getClassBeingDefined(java.lang.String):java.lang.String]
bsh.BshClassManager	[bsh.BshClassManager::java.util.Hashtable resolvedObjectMethods, bsh.BshClassManager::java.util.Hashtable resolvedStaticMethods, bsh.BshClassManager::cacheResolvedMethod(java.lang.Class, java.lang.Class[], java.lang.reflect.Method):void, bsh.BshClassManager::getResolvedMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean):java.lang.reflect.Method]
bsh.BshClassManager	[bsh.BshClassManager::java.util.Hashtable absoluteClassCache, bsh.BshClassManager::cacheClassInfo(java.lang.String, java.lang.Class):void, bsh.BshClassManager::java.util.Hashtable absoluteNonClasses, bsh.BshClassManager::defineClass(java.lang.String, byte[]):java.lang.Class, bsh.BshClassManager::clearCaches():void, bsh.BshClassManager::java.util.Hashtable resolvedObjectMethods, bsh.BshClassManager::java.util.Hashtable resolvedStaticMethods, bsh.BshClassManager::cacheResolvedMethod(java.lang.Class, java.lang.Class[], java.lang.reflect.Method):void, bsh.BshClassManager::getResolvedMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean):java.lang.reflect.Method]
bsh.BshClassManager	[bsh.BshClassManager::java.lang.ClassLoader externalClassLoader, bsh.BshClassManager::getResource(java.lang.String):java.net.URL, bsh.BshClassManager::getResourceAsStream(java.lang.String):java.io.InputStream, bsh.BshClassManager::plainClassForName(java.lang.String):java.lang.Class, bsh.BshClassManager::setClassLoader(java.lang.ClassLoader):void, bsh.BshClassManager::classLoaderChanged():void]
bsh.BshClassManager	[bsh.BshClassManager::bsh.Interpreter declaringInterpreter, bsh.BshClassManager::createClassManager(bsh.Interpreter):bsh.BshClassManager, bsh.BshClassManager::loadSourceClass(java.lang.String):java.lang.Class, bsh.BshClassManager::classForName(java.lang.String):java.lang.Class, bsh.BshClassManager::java.lang.ClassLoader externalClassLoader, bsh.BshClassManager::getResource(java.lang.String):java.net.URL, bsh.BshClassManager::getResourceAsStream(java.lang.String):java.io.InputStream, bsh.BshClassManager::plainClassForName(java.lang.String):java.lang.Class, bsh.BshClassManager::setClassLoader(java.lang.ClassLoader):void, bsh.BshClassManager::classLoaderChanged():void, bsh.BshClassManager::java.util.Hashtable absoluteClassCache, bsh.BshClassManager::cacheClassInfo(java.lang.String, java.lang.Class):void, bsh.BshClassManager::java.util.Hashtable absoluteNonClasses, bsh.BshClassManager::defineClass(java.lang.String, byte[]):java.lang.Class, bsh.BshClassManager::clearCaches():void, bsh.BshClassManager::java.util.Hashtable resolvedObjectMethods, bsh.BshClassManager::java.util.Hashtable resolvedStaticMethods, bsh.BshClassManager::cacheResolvedMethod(java.lang.Class, java.lang.Class[], java.lang.reflect.Method):void, bsh.BshClassManager::getResolvedMethod(java.lang.Class, java.lang.String, java.lang.Class[], boolean):java.lang.reflect.Method]
bsh.BshClassManager	[bsh.BshClassManager::bsh.Interpreter declaringInterpreter, bsh.BshClassManager::createClassManager(bsh.Interpreter):bsh.BshClassManager, bsh.BshClassManager::loadSourceClass(java.lang.String):java.lang.Class, bsh.BshClassManager::classForName(java.lang.String):java.lang.Class, bsh.BshClassManager::java.lang.ClassLoader externalClassLoader, bsh.BshClassManager::getResource(java.lang.String):java.net.URL, bsh.BshClassManager::getResourceAsStream(java.lang.String):java.io.InputStream, bsh.BshClassManager::plainClassForName(java.lang.String):java.lang.Class, bsh.BshClassManager::setClassLoader(java.lang.ClassLoader):void, bsh.BshClassManager::classLoaderChanged():void]
bsh.EvalError	[bsh.EvalError::java.lang.String message, bsh.EvalError::prependMessage(java.lang.String):void, bsh.EvalError::reThrow(java.lang.String):void]
bsh.EvalError	[bsh.EvalError::bsh.SimpleNode node, bsh.EvalError::getErrorText():java.lang.String, bsh.EvalError::getErrorLineNumber():int, bsh.EvalError::getErrorSourceFile():java.lang.String]
bsh.SimpleNode	[bsh.SimpleNode::bsh.Node parent, bsh.SimpleNode::getSourceFile():java.lang.String, bsh.SimpleNode::java.lang.String sourceFile]
com.microstar.xml.XmlParser	[com.microstar.xml.XmlParser::java.lang.Object[] symbolTable, com.microstar.xml.XmlParser::intern(char[], int, int):java.lang.String, com.microstar.xml.XmlParser::extendArray(java.lang.Object, int, int):java.lang.Object]
com.microstar.xml.XmlParser	[com.microstar.xml.XmlParser::java.util.Hashtable elementInfo, com.microstar.xml.XmlParser::declaredElements():java.util.Enumeration, com.microstar.xml.XmlParser::getElementContentType(java.lang.String):int, com.microstar.xml.XmlParser::getElementContentModel(java.lang.String):java.lang.String, com.microstar.xml.XmlParser::getElementAttributes(java.lang.String):java.util.Hashtable, com.microstar.xml.XmlParser::declaredAttributes(java.lang.String):java.util.Enumeration, com.microstar.xml.XmlParser::getAttribute(java.lang.String, java.lang.String):java.lang.Object[], com.microstar.xml.XmlParser::getAttributeType(java.lang.String, java.lang.String):int, com.microstar.xml.XmlParser::getAttributeEnumeration(java.lang.String, java.lang.String):java.lang.String, com.microstar.xml.XmlParser::getAttributeDefaultValue(java.lang.String, java.lang.String):java.lang.String, com.microstar.xml.XmlParser::getAttributeDefaultValueType(java.lang.String, java.lang.String):int, com.microstar.xml.XmlParser::setElement(java.lang.String, int, java.lang.String, java.util.Hashtable):void, com.microstar.xml.XmlParser::setAttribute(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int):void]
gnu.regexp.RESyntax	[gnu.regexp.RESyntax::java.util.BitSet bits, gnu.regexp.RESyntax::get(int):boolean, gnu.regexp.RESyntax::set(int):gnu.regexp.RESyntax, gnu.regexp.RESyntax::clear(int):gnu.regexp.RESyntax, gnu.regexp.RESyntax::boolean isFinal, gnu.regexp.RESyntax::makeFinal():gnu.regexp.RESyntax]
org.gjt.sp.jedit.ActionSet	[org.gjt.sp.jedit.ActionSet::java.net.URL uri, org.gjt.sp.jedit.ActionSet::load():void, org.gjt.sp.jedit.ActionSet::boolean loaded]
org.gjt.sp.jedit.ActionSet	[org.gjt.sp.jedit.ActionSet::java.net.URL uri, org.gjt.sp.jedit.ActionSet::load():void, org.gjt.sp.jedit.ActionSet::boolean loaded, org.gjt.sp.jedit.ActionSet::getAction(java.lang.String):org.gjt.sp.jedit.EditAction, org.gjt.sp.jedit.ActionSet::getActions():org.gjt.sp.jedit.EditAction[]]
org.gjt.sp.jedit.Buffer	[org.gjt.sp.jedit.Buffer::int flags, org.gjt.sp.jedit.Buffer::setFlag(int, boolean):void, org.gjt.sp.jedit.Buffer::getFlag(int):boolean, org.gjt.sp.jedit.Buffer::setNewFile(boolean):void]
org.gjt.sp.jedit.Marker	[org.gjt.sp.jedit.Marker::int pos, org.gjt.sp.jedit.Marker::javax.swing.text.Position position, org.gjt.sp.jedit.Marker::getPosition():int, org.gjt.sp.jedit.Marker::removePosition():void]
org.gjt.sp.jedit.Mode	[org.gjt.sp.jedit.Mode::org.gjt.sp.jedit.syntax.TokenMarker marker, org.gjt.sp.jedit.Mode::getTokenMarker():org.gjt.sp.jedit.syntax.TokenMarker, org.gjt.sp.jedit.Mode::loadIfNecessary():void]
org.gjt.sp.jedit.Mode	[org.gjt.sp.jedit.Mode::gnu.regexp.RE firstlineRE, org.gjt.sp.jedit.Mode::gnu.regexp.RE filenameRE, org.gjt.sp.jedit.Mode::accept(java.lang.String, java.lang.String):boolean, org.gjt.sp.jedit.Mode::init():void, org.gjt.sp.jedit.Mode::org.gjt.sp.jedit.syntax.TokenMarker marker, org.gjt.sp.jedit.Mode::getTokenMarker():org.gjt.sp.jedit.syntax.TokenMarker, org.gjt.sp.jedit.Mode::loadIfNecessary():void]
org.gjt.sp.jedit.Mode	[org.gjt.sp.jedit.Mode::java.util.Hashtable props, org.gjt.sp.jedit.Mode::setProperty(java.lang.String, java.lang.Object):void, org.gjt.sp.jedit.Mode::unsetProperty(java.lang.String):void, org.gjt.sp.jedit.Mode::setProperties(java.util.Hashtable):void, org.gjt.sp.jedit.Mode::getProperty(java.lang.String):java.lang.Object, org.gjt.sp.jedit.Mode::getBooleanProperty(java.lang.String):boolean]
org.gjt.sp.jedit.browser.VFSBrowser	[org.gjt.sp.jedit.browser.VFSBrowser::org.gjt.sp.jedit.browser.VFSBrowser.FavoritesMenuButton favorites, org.gjt.sp.jedit.browser.VFSBrowser::org.gjt.sp.jedit.browser.VFSBrowser.PluginsMenuButton plugins, org.gjt.sp.jedit.browser.VFSBrowser::createMenuBar():javax.swing.JPanel]
org.gjt.sp.jedit.browser.VFSBrowser	[org.gjt.sp.jedit.browser.VFSBrowser::javax.swing.event.EventListenerList listenerList, org.gjt.sp.jedit.browser.VFSBrowser::addBrowserListener(org.gjt.sp.jedit.browser.BrowserListener):void, org.gjt.sp.jedit.browser.VFSBrowser::removeBrowserListener(org.gjt.sp.jedit.browser.BrowserListener):void]
org.gjt.sp.jedit.browser.VFSBrowser	[org.gjt.sp.jedit.browser.VFSBrowser::boolean requestRunning, org.gjt.sp.jedit.browser.VFSBrowser::endRequest():void, org.gjt.sp.jedit.browser.VFSBrowser::startRequest():boolean]
org.gjt.sp.jedit.browser.VFSBrowser	[org.gjt.sp.jedit.browser.VFSBrowser::org.gjt.sp.jedit.browser.VFSBrowser.FavoritesMenuButton favorites, org.gjt.sp.jedit.browser.VFSBrowser::org.gjt.sp.jedit.browser.VFSBrowser.PluginsMenuButton plugins, org.gjt.sp.jedit.browser.VFSBrowser::createMenuBar():javax.swing.JPanel, org.gjt.sp.jedit.browser.VFSBrowser::boolean maybeReloadRequestRunning, org.gjt.sp.jedit.browser.VFSBrowser::maybeReloadDirectory(java.lang.String):void]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::java.util.Vector bufferListeners, org.gjt.sp.jedit.buffer.JEditBuffer::removeBufferListener(org.gjt.sp.jedit.buffer.BufferListener):void, org.gjt.sp.jedit.buffer.JEditBuffer::getBufferListeners():org.gjt.sp.jedit.buffer.BufferListener[], org.gjt.sp.jedit.buffer.JEditBuffer::getListener(int):org.gjt.sp.jedit.buffer.BufferListener, org.gjt.sp.jedit.buffer.JEditBuffer::fireFoldLevelChanged(int, int):void, org.gjt.sp.jedit.buffer.JEditBuffer::fireContentInserted(int, int, int, int):void, org.gjt.sp.jedit.buffer.JEditBuffer::fireContentRemoved(int, int, int, int):void, org.gjt.sp.jedit.buffer.JEditBuffer::firePreContentRemoved(int, int, int, int):void, org.gjt.sp.jedit.buffer.JEditBuffer::fireTransactionComplete():void, org.gjt.sp.jedit.buffer.JEditBuffer::fireFoldHandlerChanged():void, org.gjt.sp.jedit.buffer.JEditBuffer::fireBufferLoaded():void, org.gjt.sp.jedit.buffer.JEditBuffer::addBufferListener(org.gjt.sp.jedit.buffer.BufferListener, int):void]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::java.util.HashMap properties, org.gjt.sp.jedit.buffer.JEditBuffer::java.lang.Object propertyLock, org.gjt.sp.jedit.buffer.JEditBuffer::getProperty(java.lang.Object):java.lang.Object, org.gjt.sp.jedit.buffer.JEditBuffer::getRegexpProperty(java.lang.String, int, gnu.regexp.RESyntax):gnu.regexp.RE, org.gjt.sp.jedit.buffer.JEditBuffer::getIntegerProperty(java.lang.String, int):int, org.gjt.sp.jedit.buffer.JEditBuffer::setProperty(java.lang.String, java.lang.Object):void, org.gjt.sp.jedit.buffer.JEditBuffer::resetCachedProperties():void, org.gjt.sp.jedit.buffer.JEditBuffer::java.util.List indentRules, org.gjt.sp.jedit.buffer.JEditBuffer::getStringProperty(java.lang.String):java.lang.String, org.gjt.sp.jedit.buffer.JEditBuffer::getBooleanProperty(java.lang.String):boolean, org.gjt.sp.jedit.buffer.JEditBuffer::createRegexpIndentRule(java.lang.String):org.gjt.sp.jedit.indent.IndentRule, org.gjt.sp.jedit.buffer.JEditBuffer::initIndentRules():void, org.gjt.sp.jedit.buffer.JEditBuffer::createBracketIndentRules(java.lang.String):java.util.List, org.gjt.sp.jedit.buffer.JEditBuffer::java.lang.String electricKeys, org.gjt.sp.jedit.buffer.JEditBuffer::isElectricKey(char):boolean]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::boolean readOnly, org.gjt.sp.jedit.buffer.JEditBuffer::boolean readOnlyOverride, org.gjt.sp.jedit.buffer.JEditBuffer::isReadOnly():boolean, org.gjt.sp.jedit.buffer.JEditBuffer::isEditable():boolean, org.gjt.sp.jedit.buffer.JEditBuffer::boolean io, org.gjt.sp.jedit.buffer.JEditBuffer::isPerformingIO():boolean]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::java.util.List indentRules, org.gjt.sp.jedit.buffer.JEditBuffer::getStringProperty(java.lang.String):java.lang.String, org.gjt.sp.jedit.buffer.JEditBuffer::getBooleanProperty(java.lang.String):boolean, org.gjt.sp.jedit.buffer.JEditBuffer::createRegexpIndentRule(java.lang.String):org.gjt.sp.jedit.indent.IndentRule, org.gjt.sp.jedit.buffer.JEditBuffer::initIndentRules():void, org.gjt.sp.jedit.buffer.JEditBuffer::createBracketIndentRules(java.lang.String):java.util.List, org.gjt.sp.jedit.buffer.JEditBuffer::java.lang.String electricKeys, org.gjt.sp.jedit.buffer.JEditBuffer::isElectricKey(char):boolean]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::boolean readOnly, org.gjt.sp.jedit.buffer.JEditBuffer::boolean readOnlyOverride, org.gjt.sp.jedit.buffer.JEditBuffer::isReadOnly():boolean, org.gjt.sp.jedit.buffer.JEditBuffer::isEditable():boolean]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::java.util.HashMap properties, org.gjt.sp.jedit.buffer.JEditBuffer::java.lang.Object propertyLock, org.gjt.sp.jedit.buffer.JEditBuffer::getProperty(java.lang.Object):java.lang.Object, org.gjt.sp.jedit.buffer.JEditBuffer::getRegexpProperty(java.lang.String, int, gnu.regexp.RESyntax):gnu.regexp.RE, org.gjt.sp.jedit.buffer.JEditBuffer::getIntegerProperty(java.lang.String, int):int, org.gjt.sp.jedit.buffer.JEditBuffer::setProperty(java.lang.String, java.lang.Object):void, org.gjt.sp.jedit.buffer.JEditBuffer::resetCachedProperties():void]
org.gjt.sp.jedit.buffer.JEditBuffer	[org.gjt.sp.jedit.buffer.JEditBuffer::java.util.List indentRules, org.gjt.sp.jedit.buffer.JEditBuffer::getStringProperty(java.lang.String):java.lang.String, org.gjt.sp.jedit.buffer.JEditBuffer::getBooleanProperty(java.lang.String):boolean, org.gjt.sp.jedit.buffer.JEditBuffer::createRegexpIndentRule(java.lang.String):org.gjt.sp.jedit.indent.IndentRule, org.gjt.sp.jedit.buffer.JEditBuffer::initIndentRules():void, org.gjt.sp.jedit.buffer.JEditBuffer::createBracketIndentRules(java.lang.String):java.util.List]
org.gjt.sp.jedit.gui.AnimatedIcon	[org.gjt.sp.jedit.gui.AnimatedIcon::int delay, org.gjt.sp.jedit.gui.AnimatedIcon::getRate():int, org.gjt.sp.jedit.gui.AnimatedIcon::setRate(int):void, org.gjt.sp.jedit.gui.AnimatedIcon::javax.swing.Timer timer, org.gjt.sp.jedit.gui.AnimatedIcon::start():void]
org.gjt.sp.jedit.gui.AnimatedIcon	[org.gjt.sp.jedit.gui.AnimatedIcon::int delay, org.gjt.sp.jedit.gui.AnimatedIcon::getRate():int, org.gjt.sp.jedit.gui.AnimatedIcon::setRate(int):void]
org.gjt.sp.jedit.gui.AnimatedIcon	[org.gjt.sp.jedit.gui.AnimatedIcon::int current, org.gjt.sp.jedit.gui.AnimatedIcon::java.awt.Component host, org.gjt.sp.jedit.gui.AnimatedIcon::java.awt.Image icon, org.gjt.sp.jedit.gui.AnimatedIcon::stop():void]
org.gjt.sp.jedit.syntax.ParserRuleSet	[org.gjt.sp.jedit.syntax.ParserRuleSet::java.util.Hashtable props, org.gjt.sp.jedit.syntax.ParserRuleSet::setProperties(java.util.Hashtable):void, org.gjt.sp.jedit.syntax.ParserRuleSet::java.lang.String _noWordSep]
org.gjt.sp.jedit.syntax.ParserRuleSet	[org.gjt.sp.jedit.syntax.ParserRuleSet::java.util.Hashtable props, org.gjt.sp.jedit.syntax.ParserRuleSet::setProperties(java.util.Hashtable):void, org.gjt.sp.jedit.syntax.ParserRuleSet::java.lang.String _noWordSep, org.gjt.sp.jedit.syntax.ParserRuleSet::java.lang.String noWordSep, org.gjt.sp.jedit.syntax.ParserRuleSet::setNoWordSep(java.lang.String):void, org.gjt.sp.jedit.syntax.ParserRuleSet::setKeywords(org.gjt.sp.jedit.syntax.KeywordMap):void, org.gjt.sp.jedit.syntax.ParserRuleSet::getNoWordSep():java.lang.String]
org.gjt.sp.jedit.syntax.ParserRuleSet	[org.gjt.sp.jedit.syntax.ParserRuleSet::int ruleCount, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule[] ruleMapLast, org.gjt.sp.jedit.syntax.ParserRuleSet::addRule(org.gjt.sp.jedit.syntax.ParserRule):void]
org.gjt.sp.jedit.syntax.ParserRuleSet	[org.gjt.sp.jedit.syntax.ParserRuleSet::int ruleCount, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule[] ruleMapLast, org.gjt.sp.jedit.syntax.ParserRuleSet::addRule(org.gjt.sp.jedit.syntax.ParserRule):void, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule[] ruleMapFirst, org.gjt.sp.jedit.syntax.ParserRuleSet::getRules(char):org.gjt.sp.jedit.syntax.ParserRule, org.gjt.sp.jedit.syntax.ParserRuleSet::resolveImports():void, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule escapeRule, org.gjt.sp.jedit.syntax.ParserRuleSet::setEscapeRule(org.gjt.sp.jedit.syntax.ParserRule):void, org.gjt.sp.jedit.syntax.ParserRuleSet::java.util.LinkedList imports, org.gjt.sp.jedit.syntax.ParserRuleSet::int terminateChar, org.gjt.sp.jedit.syntax.ParserRuleSet::setTerminateChar(int):void]
org.gjt.sp.jedit.syntax.ParserRuleSet	[org.gjt.sp.jedit.syntax.ParserRuleSet::int ruleCount, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule[] ruleMapLast, org.gjt.sp.jedit.syntax.ParserRuleSet::addRule(org.gjt.sp.jedit.syntax.ParserRule):void, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule[] ruleMapFirst, org.gjt.sp.jedit.syntax.ParserRuleSet::getRules(char):org.gjt.sp.jedit.syntax.ParserRule, org.gjt.sp.jedit.syntax.ParserRuleSet::resolveImports():void, org.gjt.sp.jedit.syntax.ParserRuleSet::org.gjt.sp.jedit.syntax.ParserRule escapeRule, org.gjt.sp.jedit.syntax.ParserRuleSet::setEscapeRule(org.gjt.sp.jedit.syntax.ParserRule):void, org.gjt.sp.jedit.syntax.ParserRuleSet::java.util.LinkedList imports]
org.gjt.sp.jedit.syntax.TokenMarker	[org.gjt.sp.jedit.syntax.TokenMarker::java.util.Hashtable ruleSets, org.gjt.sp.jedit.syntax.TokenMarker::getRuleSet(java.lang.String):org.gjt.sp.jedit.syntax.ParserRuleSet, org.gjt.sp.jedit.syntax.TokenMarker::getRuleSets():org.gjt.sp.jedit.syntax.ParserRuleSet[], org.gjt.sp.jedit.syntax.TokenMarker::org.gjt.sp.jedit.syntax.ParserRuleSet mainRuleSet, org.gjt.sp.jedit.syntax.TokenMarker::addRuleSet(org.gjt.sp.jedit.syntax.ParserRuleSet):void]
org.gjt.sp.jedit.syntax.TokenMarker	[org.gjt.sp.jedit.syntax.TokenMarker::java.util.Hashtable ruleSets, org.gjt.sp.jedit.syntax.TokenMarker::getRuleSet(java.lang.String):org.gjt.sp.jedit.syntax.ParserRuleSet, org.gjt.sp.jedit.syntax.TokenMarker::getRuleSets():org.gjt.sp.jedit.syntax.ParserRuleSet[]]
org.gjt.sp.jedit.textarea.ScreenLineManager	[org.gjt.sp.jedit.textarea.ScreenLineManager::org.gjt.sp.jedit.buffer.JEditBuffer buffer, org.gjt.sp.jedit.textarea.ScreenLineManager::short[] screenLines, org.gjt.sp.jedit.textarea.ScreenLineManager::invalidateScreenLineCounts():void, org.gjt.sp.jedit.textarea.ScreenLineManager::reset():void, org.gjt.sp.jedit.textarea.ScreenLineManager::contentInserted(int, int):void]
bsh.Interpreter	[bsh.Interpreter::bsh.Parser parser, bsh.Interpreter::get_jjtree():bsh.JJTParserState, bsh.Interpreter::get_jj_input_stream():bsh.JavaCharStream]
bsh.Interpreter	[bsh.Interpreter::bsh.NameSpace globalNameSpace, bsh.Interpreter::main(java.lang.String[]):void, bsh.Interpreter::loadRCFiles():void, bsh.Interpreter::source(java.lang.String, bsh.NameSpace):java.lang.Object, bsh.Interpreter::getu(java.lang.String):java.lang.Object, bsh.Interpreter::pathToFile(java.lang.String):java.io.File, bsh.Interpreter::get(java.lang.String):java.lang.Object, bsh.Interpreter::eval(java.lang.String):java.lang.Object, bsh.Interpreter::getBshPrompt():java.lang.String, bsh.Interpreter::eval(java.lang.String, bsh.NameSpace):java.lang.Object, bsh.Interpreter::showEvalString(java.lang.String):java.lang.String, bsh.Interpreter::getInterface(java.lang.Class):java.lang.Object]
bsh.Interpreter	[bsh.Interpreter::bsh.NameSpace globalNameSpace, bsh.Interpreter::main(java.lang.String[]):void, bsh.Interpreter::loadRCFiles():void, bsh.Interpreter::source(java.lang.String, bsh.NameSpace):java.lang.Object, bsh.Interpreter::getu(java.lang.String):java.lang.Object, bsh.Interpreter::pathToFile(java.lang.String):java.io.File, bsh.Interpreter::get(java.lang.String):java.lang.Object]
bsh.Interpreter	[bsh.Interpreter::bsh.NameSpace globalNameSpace, bsh.Interpreter::main(java.lang.String[]):void, bsh.Interpreter::loadRCFiles():void, bsh.Interpreter::source(java.lang.String, bsh.NameSpace):java.lang.Object, bsh.Interpreter::getu(java.lang.String):java.lang.Object, bsh.Interpreter::pathToFile(java.lang.String):java.io.File, bsh.Interpreter::get(java.lang.String):java.lang.Object, bsh.Interpreter::eval(java.lang.String):java.lang.Object, bsh.Interpreter::getBshPrompt():java.lang.String]
bsh.Interpreter	[bsh.Interpreter::source(java.lang.String, bsh.NameSpace):java.lang.Object, bsh.Interpreter::getu(java.lang.String):java.lang.Object, bsh.Interpreter::pathToFile(java.lang.String):java.io.File, bsh.Interpreter::get(java.lang.String):java.lang.Object]
installer.Install	[installer.Install::java.util.Properties props, installer.Install::getProperty(java.lang.String):java.lang.String, installer.Install::getIntegerProperty(java.lang.String):int]
org.gjt.sp.jedit.OptionGroup	[org.gjt.sp.jedit.OptionGroup::java.util.Vector members, org.gjt.sp.jedit.OptionGroup::getMembers():java.util.Enumeration, org.gjt.sp.jedit.OptionGroup::getMember(int):java.lang.Object, org.gjt.sp.jedit.OptionGroup::getMemberIndex(java.lang.Object):int, org.gjt.sp.jedit.OptionGroup::getMemberCount():int]
org.gjt.sp.jedit.PluginJAR.PluginCacheEntry	[org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeString(java.io.DataOutputStream, java.lang.Object):void, org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeStringArray(java.io.DataOutputStream, java.lang.String[]):void, org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::writeMap(java.io.DataOutputStream, java.util.Map):void]
org.gjt.sp.jedit.PluginJAR.PluginCacheEntry	[org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readString(java.io.DataInputStream):java.lang.String, org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readURI(java.io.DataInputStream):java.net.URL, org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readStringArray(java.io.DataInputStream):java.lang.String[], org.gjt.sp.jedit.PluginJAR.PluginCacheEntry::readMap(java.io.DataInputStream):java.util.Properties]
org.gjt.sp.jedit.gui.AbbrevEditor	[org.gjt.sp.jedit.gui.AbbrevEditor::javax.swing.JTextField abbrev, org.gjt.sp.jedit.gui.AbbrevEditor::getAbbrev():java.lang.String, org.gjt.sp.jedit.gui.AbbrevEditor::setAbbrev(java.lang.String):void]
org.gjt.sp.jedit.help.HelpHistoryModel	[org.gjt.sp.jedit.help.HelpHistoryModel::java.util.Vector listeners, org.gjt.sp.jedit.help.HelpHistoryModel::removeHelpHistoryModelListener(org.gjt.sp.jedit.help.HelpHistoryModelListener):void, org.gjt.sp.jedit.help.HelpHistoryModel::fireUpdate():void]
org.gjt.sp.jedit.help.HelpHistoryModel	[org.gjt.sp.jedit.help.HelpHistoryModel::int historyPos, org.gjt.sp.jedit.help.HelpHistoryModel::org.gjt.sp.jedit.help.HelpHistoryModel.HistoryEntry[] history, org.gjt.sp.jedit.help.HelpHistoryModel::forward():java.lang.String, org.gjt.sp.jedit.help.HelpHistoryModel::back():java.lang.String, org.gjt.sp.jedit.help.HelpHistoryModel::addToHistory(java.lang.String):void, org.gjt.sp.jedit.help.HelpHistoryModel::setCurrentEntry(org.gjt.sp.jedit.help.HelpHistoryModel.HistoryEntry):void, org.gjt.sp.jedit.help.HelpHistoryModel::updateTitle(java.lang.String, java.lang.String):void, org.gjt.sp.jedit.help.HelpHistoryModel::hasNext():boolean, org.gjt.sp.jedit.help.HelpHistoryModel::getPreviousURLs():org.gjt.sp.jedit.help.HelpHistoryModel.HistoryEntry[], org.gjt.sp.jedit.help.HelpHistoryModel::getNextURLs():org.gjt.sp.jedit.help.HelpHistoryModel.HistoryEntry[], org.gjt.sp.jedit.help.HelpHistoryModel::hasPrevious():boolean]
org.gjt.sp.jedit.pluginmgr.Roster	[org.gjt.sp.jedit.pluginmgr.Roster::java.util.List operations, org.gjt.sp.jedit.pluginmgr.Roster::getOperation(int):org.gjt.sp.jedit.pluginmgr.Roster.Operation, org.gjt.sp.jedit.pluginmgr.Roster::getOperationCount():int, org.gjt.sp.jedit.pluginmgr.Roster::isEmpty():boolean, org.gjt.sp.jedit.pluginmgr.Roster::addOperation(org.gjt.sp.jedit.pluginmgr.Roster.Operation):void, org.gjt.sp.jedit.pluginmgr.Roster::performOperationsInWorkThread(org.gjt.sp.jedit.pluginmgr.PluginManagerProgress):void]
org.gjt.sp.jedit.syntax.KeywordMap	[org.gjt.sp.jedit.syntax.KeywordMap::int mapLength, org.gjt.sp.jedit.syntax.KeywordMap::getStringMapKey(char[]):int, org.gjt.sp.jedit.syntax.KeywordMap::getSegmentMapKey(javax.swing.text.Segment, int, int):int]
org.gjt.sp.jedit.syntax.KeywordMap	[org.gjt.sp.jedit.syntax.KeywordMap::org.gjt.sp.jedit.syntax.KeywordMap.Keyword[] map, org.gjt.sp.jedit.syntax.KeywordMap::lookup(javax.swing.text.Segment, int, int):byte, org.gjt.sp.jedit.syntax.KeywordMap::add(org.gjt.sp.jedit.syntax.KeywordMap):void, org.gjt.sp.jedit.syntax.KeywordMap::getKeywords():java.lang.String[], org.gjt.sp.jedit.syntax.KeywordMap::java.lang.StringBuffer noWordSep, org.gjt.sp.jedit.syntax.KeywordMap::getNonAlphaNumericChars():java.lang.String, org.gjt.sp.jedit.syntax.KeywordMap::add(char[], byte):void, org.gjt.sp.jedit.syntax.KeywordMap::boolean ignoreCase]
org.gjt.sp.jedit.syntax.XModeHandler	[org.gjt.sp.jedit.syntax.XModeHandler::java.util.Stack stateStack, org.gjt.sp.jedit.syntax.XModeHandler::pushElement(java.lang.String):java.lang.String, org.gjt.sp.jedit.syntax.XModeHandler::peekElement():java.lang.String, org.gjt.sp.jedit.syntax.XModeHandler::popElement():java.lang.String]
org.gjt.sp.jedit.textarea.JEditTextArea	[org.gjt.sp.jedit.textarea.JEditTextArea::javax.swing.Box verticalBox, org.gjt.sp.jedit.textarea.JEditTextArea::addLeftOfScrollBar(java.awt.Component):void, org.gjt.sp.jedit.textarea.JEditTextArea::removeLeftOfScrollBar(java.awt.Component):void]
org.gjt.sp.util.WorkThreadPool	[org.gjt.sp.util.WorkThreadPool::javax.swing.event.EventListenerList listenerList, org.gjt.sp.util.WorkThreadPool::addProgressListener(org.gjt.sp.util.WorkThreadProgressListener):void, org.gjt.sp.util.WorkThreadPool::removeProgressListener(org.gjt.sp.util.WorkThreadProgressListener):void]
org.gjt.sp.util.WorkThreadPool	[org.gjt.sp.util.WorkThreadPool::org.gjt.sp.util.WorkThread[] threads, org.gjt.sp.util.WorkThreadPool::getThreadCount():int, org.gjt.sp.util.WorkThreadPool::getThread(int):org.gjt.sp.util.WorkThread]
org.objectweb.asm.Type	[org.objectweb.asm.Type::int sort, org.objectweb.asm.Type::getSize():int, org.objectweb.asm.Type::getOpcode(int):int]
org.objectweb.asm.Type	[org.objectweb.asm.Type::char[] buf, org.objectweb.asm.Type::int off, org.objectweb.asm.Type::int len, org.objectweb.asm.Type::getArgumentTypes(java.lang.String):org.objectweb.asm.Type[], org.objectweb.asm.Type::getDimensions():int, org.objectweb.asm.Type::getClassName():java.lang.String, org.objectweb.asm.Type::getInternalName():java.lang.String, org.objectweb.asm.Type::getDescriptor(java.lang.StringBuffer):void]
org.gjt.sp.jedit.Macros.Recorder	[org.gjt.sp.jedit.Macros.Recorder::boolean lastWasInput, org.gjt.sp.jedit.Macros.Recorder::boolean lastWasOverwrite, org.gjt.sp.jedit.Macros.Recorder::int overwriteCount, org.gjt.sp.jedit.Macros.Recorder::recordInput(java.lang.String, boolean):void, org.gjt.sp.jedit.Macros.Recorder::flushInput():void, org.gjt.sp.jedit.Macros.Recorder::record(java.lang.String):void, org.gjt.sp.jedit.Macros.Recorder::record(int, java.lang.String):void, org.gjt.sp.jedit.Macros.Recorder::recordInput(int, char, boolean):void]
bsh.ClassGeneratorUtil	[bsh.ClassGeneratorUtil::java.lang.String className, bsh.ClassGeneratorUtil::java.lang.String fqClassName, bsh.ClassGeneratorUtil::java.lang.Class superClass, bsh.ClassGeneratorUtil::java.lang.String superClassName, bsh.ClassGeneratorUtil::bsh.DelayedEvalBshMethod[] constructors, bsh.ClassGeneratorUtil::generateMethod(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], int, org.objectweb.asm.ClassWriter):void, bsh.ClassGeneratorUtil::generateConstructor(int, java.lang.String[], int, org.objectweb.asm.ClassWriter):void, bsh.ClassGeneratorUtil::generateSuperDelegateMethod(java.lang.Class, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], int, org.objectweb.asm.ClassWriter):void, bsh.ClassGeneratorUtil::doSwitchBranch(int, java.lang.String, java.lang.String[], org.objectweb.asm.Label, org.objectweb.asm.Label[], int, org.objectweb.asm.CodeVisitor):void, bsh.ClassGeneratorUtil::generatePlainReturnCode(java.lang.String, org.objectweb.asm.CodeVisitor):void, bsh.ClassGeneratorUtil::generateParameterReifierCode(java.lang.String[], boolean, org.objectweb.asm.CodeVisitor):void, bsh.ClassGeneratorUtil::generateReturnCode(java.lang.String, org.objectweb.asm.CodeVisitor):void, bsh.ClassGeneratorUtil::generateConstructorSwitch(int, int, int, org.objectweb.asm.CodeVisitor):void]
org.gjt.sp.jedit.browser.BrowserView	[org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.VFSBrowser browser, org.gjt.sp.jedit.browser.BrowserView::javax.swing.JList parentDirectories, org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.BrowserCommandsMenu popup, org.gjt.sp.jedit.browser.BrowserView::showFilePopup(org.gjt.sp.jedit.io.VFSFile[], java.awt.Component, java.awt.Point):void, org.gjt.sp.jedit.browser.BrowserView::loadDirectory(java.lang.Object, java.lang.String, boolean):void, org.gjt.sp.jedit.browser.BrowserView::maybeReloadDirectory(java.lang.String):void, org.gjt.sp.jedit.browser.BrowserView::java.util.Set tmpExpanded, org.gjt.sp.jedit.browser.BrowserView::clearExpansionState():void, org.gjt.sp.jedit.browser.BrowserView::saveExpansionState():void, org.gjt.sp.jedit.browser.BrowserView::directoryLoaded(java.lang.Object, java.lang.String, java.util.ArrayList):void]
org.gjt.sp.jedit.browser.BrowserView	[org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.VFSBrowser browser, org.gjt.sp.jedit.browser.BrowserView::javax.swing.JList parentDirectories, org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.BrowserCommandsMenu popup, org.gjt.sp.jedit.browser.BrowserView::showFilePopup(org.gjt.sp.jedit.io.VFSFile[], java.awt.Component, java.awt.Point):void, org.gjt.sp.jedit.browser.BrowserView::loadDirectory(java.lang.Object, java.lang.String, boolean):void, org.gjt.sp.jedit.browser.BrowserView::maybeReloadDirectory(java.lang.String):void, org.gjt.sp.jedit.browser.BrowserView::java.util.Set tmpExpanded, org.gjt.sp.jedit.browser.BrowserView::clearExpansionState():void, org.gjt.sp.jedit.browser.BrowserView::saveExpansionState():void, org.gjt.sp.jedit.browser.BrowserView::directoryLoaded(java.lang.Object, java.lang.String, java.util.ArrayList):void, org.gjt.sp.jedit.browser.BrowserView::focusOnFileView():void, org.gjt.sp.jedit.browser.BrowserView::selectNone():void, org.gjt.sp.jedit.browser.BrowserView::updateFileView():void]
org.gjt.sp.jedit.browser.BrowserView	[org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.VFSBrowser browser, org.gjt.sp.jedit.browser.BrowserView::javax.swing.JList parentDirectories, org.gjt.sp.jedit.browser.BrowserView::org.gjt.sp.jedit.browser.BrowserCommandsMenu popup, org.gjt.sp.jedit.browser.BrowserView::showFilePopup(org.gjt.sp.jedit.io.VFSFile[], java.awt.Component, java.awt.Point):void, org.gjt.sp.jedit.browser.BrowserView::loadDirectory(java.lang.Object, java.lang.String, boolean):void, org.gjt.sp.jedit.browser.BrowserView::maybeReloadDirectory(java.lang.String):void]
org.gjt.sp.jedit.search.HyperSearchResults	[org.gjt.sp.jedit.search.HyperSearchResults::javax.swing.JLabel caption, org.gjt.sp.jedit.search.HyperSearchResults::searchStarted():void, org.gjt.sp.jedit.search.HyperSearchResults::searchFailed():void, org.gjt.sp.jedit.search.HyperSearchResults::searchDone(javax.swing.tree.DefaultMutableTreeNode):void, org.gjt.sp.jedit.search.HyperSearchResults::javax.swing.tree.DefaultMutableTreeNode resultTreeRoot, org.gjt.sp.jedit.search.HyperSearchResults::javax.swing.tree.DefaultTreeModel resultTreeModel, org.gjt.sp.jedit.search.HyperSearchResults::javax.swing.JTree resultTree]
org.gjt.sp.jedit.AbstractOptionPane	[org.gjt.sp.jedit.AbstractOptionPane::java.awt.GridBagLayout gridBag, org.gjt.sp.jedit.AbstractOptionPane::int y, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component, java.awt.Component, int):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component):void, org.gjt.sp.jedit.AbstractOptionPane::addSeparator():void, org.gjt.sp.jedit.AbstractOptionPane::addSeparator(java.lang.String):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component, int):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.lang.String, java.awt.Component):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.lang.String, java.awt.Component, int):void]
org.gjt.sp.jedit.AbstractOptionPane	[org.gjt.sp.jedit.AbstractOptionPane::java.awt.GridBagLayout gridBag, org.gjt.sp.jedit.AbstractOptionPane::int y, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component, java.awt.Component, int):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component):void, org.gjt.sp.jedit.AbstractOptionPane::addSeparator():void, org.gjt.sp.jedit.AbstractOptionPane::addSeparator(java.lang.String):void, org.gjt.sp.jedit.AbstractOptionPane::addComponent(java.awt.Component, int):void]
org.gjt.sp.jedit.PropertyManager	[org.gjt.sp.jedit.PropertyManager::java.util.Properties system, org.gjt.sp.jedit.PropertyManager::java.util.Properties site, org.gjt.sp.jedit.PropertyManager::getProperties():java.util.Properties, org.gjt.sp.jedit.PropertyManager::getDefaultProperty(java.lang.String):java.lang.String, org.gjt.sp.jedit.PropertyManager::setTemporaryProperty(java.lang.String, java.lang.String):void, org.gjt.sp.jedit.PropertyManager::java.util.List plugins, org.gjt.sp.jedit.PropertyManager::removePluginProps(java.util.Properties):void, org.gjt.sp.jedit.PropertyManager::loadPluginProps(java.io.InputStream):java.util.Properties, org.gjt.sp.jedit.PropertyManager::loadProps(java.util.Properties, java.io.InputStream):void]
bsh.NameSpace	[bsh.NameSpace::java.util.Hashtable methods, bsh.NameSpace::setMethod(java.lang.String, bsh.BshMethod):void, bsh.NameSpace::getVariableNames():java.lang.String[], bsh.NameSpace::enumerationToStringArray(java.util.Enumeration):java.lang.String[], bsh.NameSpace::getMethodNames():java.lang.String[], bsh.NameSpace::getMethods():bsh.BshMethod[], bsh.NameSpace::flattenMethodCollection(java.util.Enumeration):bsh.BshMethod[]]
bsh.NameSpace	[bsh.NameSpace::bsh.This thisReference, bsh.NameSpace::getThis(bsh.Interpreter):bsh.This, bsh.NameSpace::getSuper(bsh.Interpreter):bsh.This, bsh.NameSpace::getGlobal(bsh.Interpreter):bsh.This, bsh.NameSpace::invokeMethod(java.lang.String, java.lang.Object[], bsh.Interpreter, bsh.CallStack, bsh.SimpleNode):java.lang.Object]
bsh.NameSpace	[bsh.NameSpace::java.util.Hashtable methods, bsh.NameSpace::setMethod(java.lang.String, bsh.BshMethod):void, bsh.NameSpace::getVariableNames():java.lang.String[], bsh.NameSpace::enumerationToStringArray(java.util.Enumeration):java.lang.String[], bsh.NameSpace::getMethodNames():java.lang.String[]]
bsh.NameSpace	[bsh.NameSpace::java.util.Hashtable importedClasses, bsh.NameSpace::importClass(java.lang.String):void, bsh.NameSpace::java.util.Vector importedPackages, bsh.NameSpace::importPackage(java.lang.String):void]
org.gjt.sp.jedit.gui.DockableWindowManager	[org.gjt.sp.jedit.gui.DockableWindowManager::org.gjt.sp.jedit.View view, org.gjt.sp.jedit.gui.DockableWindowManager::closeCurrentArea():void, org.gjt.sp.jedit.gui.DockableWindowManager::java.util.Hashtable windows, org.gjt.sp.jedit.gui.DockableWindowManager::java.util.ArrayList clones, org.gjt.sp.jedit.gui.DockableWindowManager::getAllPluginEntries(org.gjt.sp.jedit.PluginJAR, boolean):java.util.Iterator]
org.gjt.sp.jedit.gui.RegisterViewer	[org.gjt.sp.jedit.gui.RegisterViewer::javax.swing.JList registerList, org.gjt.sp.jedit.gui.RegisterViewer::boolean editing, org.gjt.sp.jedit.gui.RegisterViewer::updateSelected():void, org.gjt.sp.jedit.gui.RegisterViewer::refreshList():void, org.gjt.sp.jedit.gui.RegisterViewer::org.gjt.sp.jedit.View view, org.gjt.sp.jedit.gui.RegisterViewer::insertRegister():void]
org.gjt.sp.jedit.gui.RegisterViewer	[org.gjt.sp.jedit.gui.RegisterViewer::javax.swing.JList registerList, org.gjt.sp.jedit.gui.RegisterViewer::boolean editing, org.gjt.sp.jedit.gui.RegisterViewer::updateSelected():void, org.gjt.sp.jedit.gui.RegisterViewer::refreshList():void]
org.gjt.sp.jedit.help.HelpIndex	[org.gjt.sp.jedit.help.HelpIndex::java.util.ArrayList files, org.gjt.sp.jedit.help.HelpIndex::getFile(int):org.gjt.sp.jedit.help.HelpIndex.HelpFile, org.gjt.sp.jedit.help.HelpIndex::indexStream(java.io.InputStream, java.lang.String):void, org.gjt.sp.jedit.help.HelpIndex::indexJAR(java.util.zip.ZipFile):void, org.gjt.sp.jedit.help.HelpIndex::indexURL(java.lang.String):void, org.gjt.sp.jedit.help.HelpIndex::indexDirectory(java.lang.String):void]
org.gjt.sp.jedit.io.VFSFile	[org.gjt.sp.jedit.io.VFSFile::long length, org.gjt.sp.jedit.io.VFSFile::boolean canRead, org.gjt.sp.jedit.io.VFSFile::boolean canWrite, org.gjt.sp.jedit.io.VFSFile::getExtendedAttribute(java.lang.String):java.lang.String]
org.gjt.sp.jedit.io.VFSFile	[org.gjt.sp.jedit.io.VFSFile::boolean colorCalculated, org.gjt.sp.jedit.io.VFSFile::getColor():java.awt.Color, org.gjt.sp.jedit.io.VFSFile::java.awt.Color color]
org.gjt.sp.jedit.textarea.FastRepaintManager	[org.gjt.sp.jedit.textarea.FastRepaintManager::org.gjt.sp.jedit.textarea.TextAreaPainter painter, org.gjt.sp.jedit.textarea.FastRepaintManager::updateGraphics():void, org.gjt.sp.jedit.textarea.FastRepaintManager::java.awt.Graphics2D gfx, org.gjt.sp.jedit.textarea.FastRepaintManager::java.awt.Image img]
org.gjt.sp.jedit.textarea.FastRepaintManager	[org.gjt.sp.jedit.textarea.FastRepaintManager::org.gjt.sp.jedit.textarea.JEditTextArea textArea, org.gjt.sp.jedit.textarea.FastRepaintManager::int firstLine, org.gjt.sp.jedit.textarea.FastRepaintManager::paint(java.awt.Graphics):void]
bsh.BSHArrayDimensions	[bsh.BSHArrayDimensions::java.lang.Class baseType, bsh.BSHArrayDimensions::eval(java.lang.Class, bsh.CallStack, bsh.Interpreter):java.lang.Object, bsh.BSHArrayDimensions::int numDefinedDims, bsh.BSHArrayDimensions::addDefinedDimension():void]
installer.CBZip2OutputStream	[installer.CBZip2OutputStream::int m_blockSize100k, installer.CBZip2OutputStream::initialize():void, installer.CBZip2OutputStream::int m_combinedCRC]
org.gjt.sp.jedit.EditServer	[org.gjt.sp.jedit.EditServer::java.lang.String portFile, org.gjt.sp.jedit.EditServer::stopServer():void, org.gjt.sp.jedit.EditServer::boolean abort]
org.gjt.sp.jedit.buffer.UndoManager	[org.gjt.sp.jedit.buffer.UndoManager::int compoundEditCount, org.gjt.sp.jedit.buffer.UndoManager::insideCompoundEdit():boolean, org.gjt.sp.jedit.buffer.UndoManager::beginCompoundEdit():void, org.gjt.sp.jedit.buffer.UndoManager::org.gjt.sp.jedit.buffer.UndoManager.CompoundEdit compoundEdit, org.gjt.sp.jedit.buffer.UndoManager::endCompoundEdit():void]
org.gjt.sp.jedit.buffer.UndoManager	[org.gjt.sp.jedit.buffer.UndoManager::org.gjt.sp.jedit.buffer.UndoManager.Edit undosFirst, org.gjt.sp.jedit.buffer.UndoManager::int undoCount, org.gjt.sp.jedit.buffer.UndoManager::org.gjt.sp.jedit.buffer.UndoManager.Edit undosLast, org.gjt.sp.jedit.buffer.UndoManager::org.gjt.sp.jedit.buffer.UndoManager.Edit redosFirst, org.gjt.sp.jedit.buffer.UndoManager::org.gjt.sp.jedit.buffer.UndoManager.Edit redosLast, org.gjt.sp.jedit.buffer.UndoManager::clear():void, org.gjt.sp.jedit.buffer.UndoManager::addEdit(org.gjt.sp.jedit.buffer.UndoManager.Edit):void, org.gjt.sp.jedit.buffer.UndoManager::undo():int, org.gjt.sp.jedit.buffer.UndoManager::redo():int]
org.gjt.sp.jedit.gui.EditAbbrevDialog	[org.gjt.sp.jedit.gui.EditAbbrevDialog::java.lang.String originalAbbrev, org.gjt.sp.jedit.gui.EditAbbrevDialog::java.util.Map abbrevs, org.gjt.sp.jedit.gui.EditAbbrevDialog::checkForExistingAbbrev():boolean]
org.gjt.sp.jedit.pluginmgr.ManagePanel.PluginTableModel	[org.gjt.sp.jedit.pluginmgr.ManagePanel.PluginTableModel::unloadPluginJARWithDialog(org.gjt.sp.jedit.PluginJAR):void, org.gjt.sp.jedit.pluginmgr.ManagePanel.PluginTableModel::transitiveClosure(java.lang.String[], java.util.List):void, org.gjt.sp.jedit.pluginmgr.ManagePanel.PluginTableModel::unloadPluginJAR(org.gjt.sp.jedit.PluginJAR):void]
org.gjt.sp.jedit.textarea.TextAreaPainter	[org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.Color wrapGuideColor, org.gjt.sp.jedit.textarea.TextAreaPainter::setWrapGuideColor(java.awt.Color):void, org.gjt.sp.jedit.textarea.TextAreaPainter::boolean wrapGuide, org.gjt.sp.jedit.textarea.TextAreaPainter::setWrapGuidePainted(boolean):void]
org.gjt.sp.jedit.textarea.TextAreaPainter	[org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.Color structureHighlightColor, org.gjt.sp.jedit.textarea.TextAreaPainter::setStructureHighlightColor(java.awt.Color):void, org.gjt.sp.jedit.textarea.TextAreaPainter::setStructureHighlightEnabled(boolean):void, org.gjt.sp.jedit.textarea.TextAreaPainter::boolean structureHighlight]
org.gjt.sp.jedit.textarea.TextAreaPainter	[org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.Color selectionColor, org.gjt.sp.jedit.textarea.TextAreaPainter::setSelectionColor(java.awt.Color):void, org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.Color multipleSelectionColor, org.gjt.sp.jedit.textarea.TextAreaPainter::setMultipleSelectionColor(java.awt.Color):void]
org.gjt.sp.jedit.textarea.TextAreaPainter	[org.gjt.sp.jedit.textarea.TextAreaPainter::boolean antiAlias, org.gjt.sp.jedit.textarea.TextAreaPainter::setAntiAliasEnabled(boolean):void, org.gjt.sp.jedit.textarea.TextAreaPainter::updateRenderingHints():void, org.gjt.sp.jedit.textarea.TextAreaPainter::boolean fracFontMetrics, org.gjt.sp.jedit.textarea.TextAreaPainter::setFractionalFontMetricsEnabled(boolean):void, org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.RenderingHints renderingHints, org.gjt.sp.jedit.textarea.TextAreaPainter::java.awt.font.FontRenderContext fontRenderContext, org.gjt.sp.jedit.textarea.TextAreaPainter::getStringWidth(java.lang.String):float]
org.objectweb.asm.ClassWriter	[org.objectweb.asm.ClassWriter::org.objectweb.asm.Item[] table, org.objectweb.asm.ClassWriter::get(org.objectweb.asm.Item):org.objectweb.asm.Item, org.objectweb.asm.ClassWriter::put(org.objectweb.asm.Item):void, org.objectweb.asm.ClassWriter::int threshold]
org.gjt.sp.jedit.gui.HistoryText	[org.gjt.sp.jedit.gui.HistoryText::javax.swing.text.JTextComponent text, org.gjt.sp.jedit.gui.HistoryText::getText():java.lang.String, org.gjt.sp.jedit.gui.HistoryText::showPopupMenu(boolean):void, org.gjt.sp.jedit.gui.HistoryText::doBackwardSearch():void, org.gjt.sp.jedit.gui.HistoryText::doForwardSearch():void, org.gjt.sp.jedit.gui.HistoryText::historyPrevious():void, org.gjt.sp.jedit.gui.HistoryText::historyNext():void, org.gjt.sp.jedit.gui.HistoryText::setText(java.lang.String):void, org.gjt.sp.jedit.gui.HistoryText::javax.swing.JPopupMenu popup, org.gjt.sp.jedit.gui.HistoryText::showPopupMenu(java.lang.String, int, int):void, org.gjt.sp.jedit.gui.HistoryText::getDocument():javax.swing.text.Document, org.gjt.sp.jedit.gui.HistoryText::org.gjt.sp.jedit.gui.HistoryModel historyModel, org.gjt.sp.jedit.gui.HistoryText::int index]
org.gjt.sp.jedit.help.HelpTOCPanel	[org.gjt.sp.jedit.help.HelpTOCPanel::javax.swing.tree.DefaultTreeModel tocModel, org.gjt.sp.jedit.help.HelpTOCPanel::load():void, org.gjt.sp.jedit.help.HelpTOCPanel::javax.swing.tree.DefaultMutableTreeNode tocRoot, org.gjt.sp.jedit.help.HelpTOCPanel::javax.swing.JTree toc, org.gjt.sp.jedit.help.HelpTOCPanel::selectNode(java.lang.String):void, org.gjt.sp.jedit.help.HelpTOCPanel::java.util.Hashtable nodes, org.gjt.sp.jedit.help.HelpTOCPanel::createNode(java.lang.String, java.lang.String):javax.swing.tree.DefaultMutableTreeNode, org.gjt.sp.jedit.help.HelpTOCPanel::createTOC():void]
installer.TarEntry	[installer.TarEntry::java.io.File file, installer.TarEntry::getDirectoryEntries():installer.TarEntry[], installer.TarEntry::initialize():void, installer.TarEntry::isDirectory():boolean, installer.TarEntry::equals(installer.TarEntry):boolean, installer.TarEntry::isDescendent(installer.TarEntry):boolean, installer.TarEntry::getName():java.lang.String, installer.TarEntry::setName(java.lang.String):void, installer.TarEntry::getFileTarHeader(installer.TarHeader, java.io.File):void, installer.TarEntry::writeEntryHeader(byte[]):void, installer.TarEntry::parseTarHeader(installer.TarHeader, byte[]):void, installer.TarEntry::nameTarHeader(installer.TarHeader, java.lang.String):void, installer.TarEntry::getUserId():int, installer.TarEntry::setUserId(int):void, installer.TarEntry::getGroupId():int, installer.TarEntry::setGroupId(int):void, installer.TarEntry::getUserName():java.lang.String, installer.TarEntry::setUserName(java.lang.String):void, installer.TarEntry::getGroupName():java.lang.String, installer.TarEntry::setGroupName(java.lang.String):void, installer.TarEntry::setIds(int, int):void, installer.TarEntry::setNames(java.lang.String, java.lang.String):void]
installer.TarEntry	[installer.TarEntry::java.io.File file, installer.TarEntry::getDirectoryEntries():installer.TarEntry[], installer.TarEntry::initialize():void, installer.TarEntry::isDirectory():boolean, installer.TarEntry::equals(installer.TarEntry):boolean, installer.TarEntry::isDescendent(installer.TarEntry):boolean, installer.TarEntry::getName():java.lang.String, installer.TarEntry::setName(java.lang.String):void, installer.TarEntry::getFileTarHeader(installer.TarHeader, java.io.File):void, installer.TarEntry::writeEntryHeader(byte[]):void, installer.TarEntry::parseTarHeader(installer.TarHeader, byte[]):void, installer.TarEntry::nameTarHeader(installer.TarHeader, java.lang.String):void, installer.TarEntry::getUserId():int, installer.TarEntry::setUserId(int):void, installer.TarEntry::getGroupId():int, installer.TarEntry::setGroupId(int):void, installer.TarEntry::getUserName():java.lang.String, installer.TarEntry::setUserName(java.lang.String):void, installer.TarEntry::getGroupName():java.lang.String, installer.TarEntry::setGroupName(java.lang.String):void, installer.TarEntry::setIds(int, int):void, installer.TarEntry::setNames(java.lang.String, java.lang.String):void, installer.TarEntry::setModTime(long):void, installer.TarEntry::setModTime(java.util.Date):void, installer.TarEntry::getModTime():java.util.Date]
org.gjt.sp.jedit.textarea.Gutter	[org.gjt.sp.jedit.textarea.Gutter::org.gjt.sp.jedit.View view, org.gjt.sp.jedit.textarea.Gutter::int borderWidth, org.gjt.sp.jedit.textarea.Gutter::javax.swing.border.Border focusBorder, org.gjt.sp.jedit.textarea.Gutter::setBorder(int, java.awt.Color, java.awt.Color, java.awt.Color):void, org.gjt.sp.jedit.textarea.Gutter::javax.swing.border.Border noFocusBorder, org.gjt.sp.jedit.textarea.Gutter::updateBorder():void]
org.gjt.sp.jedit.gui.MarkerViewer	[org.gjt.sp.jedit.gui.MarkerViewer::org.gjt.sp.jedit.gui.RolloverButton previous, org.gjt.sp.jedit.gui.MarkerViewer::org.gjt.sp.jedit.gui.RolloverButton next, org.gjt.sp.jedit.gui.MarkerViewer::org.gjt.sp.jedit.gui.RolloverButton clear, org.gjt.sp.jedit.gui.MarkerViewer::refreshList():void]
org.gjt.sp.jedit.textarea.ChunkCache	[org.gjt.sp.jedit.textarea.ChunkCache::getSubregionOfOffset(int, org.gjt.sp.jedit.textarea.ChunkCache.LineInfo[]):int, org.gjt.sp.jedit.textarea.ChunkCache::xToSubregionOffset(org.gjt.sp.jedit.textarea.ChunkCache.LineInfo, int, boolean):int, org.gjt.sp.jedit.textarea.ChunkCache::getSubregionStartOffset(int, int):int, org.gjt.sp.jedit.textarea.ChunkCache::getSubregionEndOffset(int, int):int, org.gjt.sp.jedit.textarea.ChunkCache::getBelowPosition(int, int, int, boolean):int, org.gjt.sp.jedit.textarea.ChunkCache::getAbovePosition(int, int, int, boolean):int, org.gjt.sp.jedit.textarea.ChunkCache::xToSubregionOffset(int, int, int, boolean):int]
org.objectweb.asm.Item	[org.objectweb.asm.Item::long longVal, org.objectweb.asm.Item::set(long):void, org.objectweb.asm.Item::float floatVal, org.objectweb.asm.Item::set(float):void, org.objectweb.asm.Item::double doubleVal, org.objectweb.asm.Item::set(double):void]
